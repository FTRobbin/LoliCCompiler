/* The following code was generated by JFlex 1.6.1 */

/*
lexer specification for loliccompiler for Jflex by RobbinNi
*/

package lexer;

import java_cup.runtime.*;

import parser.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>D:/4415 ±‡“Î‘≠¿Ì MS109/loliccompiler/src/lexer/loliccompiler.flex</tt>
 */
class Yylex implements java_cup.runtime.Scanner, Symbols {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int COMMENT = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\15\1\70\1\20"+
    "\1\14\1\6\1\66\1\16\1\46\1\47\1\50\1\24\1\64\1\52"+
    "\1\65\1\71\1\4\1\10\3\23\4\11\2\7\1\14\1\51\1\62"+
    "\1\53\1\63\2\14\6\13\24\5\1\56\1\17\1\57\1\61\2\6"+
    "\1\33\1\22\1\31\1\30\1\41\1\40\1\5\1\32\1\27\1\5"+
    "\1\44\1\42\1\5\1\35\1\26\2\5\1\34\1\36\1\21\1\37"+
    "\1\25\1\43\1\12\1\5\1\45\1\54\1\60\1\55\1\67\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff91\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\2\5\1\6\1\7"+
    "\1\4\1\10\11\4\1\1\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\1\1\35\2\36\1\37\1\40\1\41\1\42\1\0"+
    "\1\43\1\44\1\4\1\45\1\46\2\4\1\47\11\4"+
    "\2\0\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\0\1\67\1\0\1\70\2\37\1\71\2\4"+
    "\1\72\6\4\1\73\2\4\5\0\1\74\1\75\2\0"+
    "\1\4\1\76\1\4\1\77\4\4\1\100\1\4\2\0"+
    "\1\101\1\0\1\102\1\103\4\4\1\104\1\105\2\0"+
    "\1\4\1\106\1\107\1\110\1\111\1\112\1\4\1\113";

  private static int [] zzUnpackAction() {
    int [] result = new int[148];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\256\0\u0122\0\u015c"+
    "\0\u0196\0\u01d0\0\u020a\0\256\0\u0244\0\u027e\0\u02b8\0\u02f2"+
    "\0\u032c\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2"+
    "\0\256\0\256\0\256\0\256\0\u04fc\0\256\0\256\0\256"+
    "\0\256\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658\0\u0692"+
    "\0\256\0\u06cc\0\256\0\u0706\0\u0740\0\256\0\256\0\u077a"+
    "\0\u07b4\0\256\0\256\0\u07ee\0\u0828\0\256\0\256\0\u0862"+
    "\0\256\0\256\0\u089c\0\u08d6\0\u015c\0\u0910\0\u094a\0\u0984"+
    "\0\u09be\0\u09f8\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54"+
    "\0\256\0\256\0\256\0\256\0\256\0\u0b8e\0\256\0\u0bc8"+
    "\0\256\0\256\0\256\0\256\0\256\0\256\0\256\0\u0c02"+
    "\0\u0c3c\0\256\0\u0c02\0\256\0\u0c76\0\256\0\u0828\0\u0cb0"+
    "\0\u0cea\0\u015c\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46"+
    "\0\u015c\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc"+
    "\0\256\0\256\0\u1016\0\u1050\0\u108a\0\u015c\0\u10c4\0\u015c"+
    "\0\u10fe\0\u1138\0\u1172\0\u11ac\0\u015c\0\u11e6\0\u1220\0\u125a"+
    "\0\256\0\u1294\0\256\0\u015c\0\u12ce\0\u1308\0\u1342\0\u137c"+
    "\0\u015c\0\u015c\0\u13b6\0\u13f0\0\u142a\0\u015c\0\u015c\0\u015c"+
    "\0\256\0\256\0\u1464\0\u015c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[148];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\10\1\4\1\11\1\12"+
    "\1\11\2\10\1\4\1\6\1\13\1\4\1\14\1\10"+
    "\1\15\1\11\1\16\1\17\1\10\1\20\1\10\1\21"+
    "\2\10\1\22\1\10\1\23\1\24\1\25\1\26\1\10"+
    "\1\27\2\10\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\2\4"+
    "\14\54\1\55\1\56\51\54\24\57\1\60\45\57\74\0"+
    "\1\6\73\0\1\61\17\0\1\62\26\0\1\63\23\0"+
    "\7\10\3\0\1\10\1\0\3\10\1\0\21\10\10\0"+
    "\2\10\1\0\1\10\17\0\3\11\11\0\1\11\56\0"+
    "\2\64\1\65\10\0\1\64\64\0\1\66\34\0\1\67"+
    "\23\0\7\10\3\0\1\10\1\0\3\10\1\0\7\10"+
    "\1\70\11\10\10\0\2\10\1\0\1\10\14\0\1\71"+
    "\46\0\1\72\23\0\7\10\3\0\1\10\1\0\3\10"+
    "\1\0\1\10\1\73\17\10\10\0\2\10\1\0\1\10"+
    "\15\0\7\10\3\0\1\10\1\0\3\10\1\0\10\10"+
    "\1\74\2\10\1\75\5\10\10\0\2\10\1\0\1\10"+
    "\15\0\7\10\3\0\1\10\1\0\3\10\1\0\1\10"+
    "\1\76\3\10\1\77\13\10\10\0\2\10\1\0\1\10"+
    "\15\0\7\10\3\0\1\10\1\0\3\10\1\0\14\10"+
    "\1\100\4\10\10\0\2\10\1\0\1\10\15\0\7\10"+
    "\3\0\1\10\1\0\1\101\2\10\1\0\2\10\1\102"+
    "\16\10\10\0\2\10\1\0\1\10\15\0\7\10\3\0"+
    "\1\10\1\0\3\10\1\0\10\10\1\103\10\10\10\0"+
    "\2\10\1\0\1\10\15\0\7\10\3\0\1\10\1\0"+
    "\3\10\1\0\1\10\1\104\17\10\10\0\2\10\1\0"+
    "\1\10\15\0\7\10\3\0\1\10\1\0\3\10\1\0"+
    "\15\10\1\105\3\10\10\0\2\10\1\0\1\10\15\0"+
    "\7\10\3\0\1\10\1\0\3\10\1\0\5\10\1\106"+
    "\13\10\10\0\2\10\1\0\1\10\14\0\13\107\1\110"+
    "\52\107\53\0\1\111\71\0\1\112\4\0\1\113\64\0"+
    "\1\114\71\0\1\115\6\0\1\116\62\0\1\117\7\0"+
    "\1\120\61\0\1\121\10\0\1\122\60\0\1\123\7\0"+
    "\1\124\1\0\1\125\57\0\1\126\71\0\1\127\16\0"+
    "\1\54\2\0\14\54\2\0\51\54\10\0\1\130\1\0"+
    "\1\131\4\0\4\132\1\133\10\0\2\132\2\0\1\132"+
    "\5\0\1\132\27\0\1\134\65\0\1\61\1\135\1\136"+
    "\67\61\10\0\2\64\11\0\1\64\55\0\3\137\1\0"+
    "\1\137\6\0\2\137\4\0\2\137\1\0\1\137\4\0"+
    "\2\137\35\0\7\10\3\0\1\10\1\0\3\10\1\0"+
    "\14\10\1\140\4\10\10\0\2\10\1\0\1\10\15\0"+
    "\7\10\3\0\1\10\1\0\3\10\1\0\2\10\1\141"+
    "\16\10\10\0\2\10\1\0\1\10\15\0\7\10\3\0"+
    "\1\10\1\0\1\142\2\10\1\0\21\10\10\0\2\10"+
    "\1\0\1\10\15\0\7\10\3\0\1\10\1\0\3\10"+
    "\1\0\10\10\1\143\10\10\10\0\2\10\1\0\1\10"+
    "\15\0\7\10\3\0\1\10\1\0\3\10\1\0\6\10"+
    "\1\144\12\10\10\0\2\10\1\0\1\10\15\0\7\10"+
    "\3\0\1\10\1\0\1\145\2\10\1\0\21\10\10\0"+
    "\2\10\1\0\1\10\15\0\7\10\3\0\1\10\1\0"+
    "\3\10\1\0\7\10\1\146\11\10\10\0\2\10\1\0"+
    "\1\10\15\0\7\10\3\0\1\10\1\0\3\10\1\0"+
    "\20\10\1\147\10\0\2\10\1\0\1\10\15\0\7\10"+
    "\3\0\1\10\1\0\3\10\1\0\2\10\1\150\16\10"+
    "\10\0\2\10\1\0\1\10\15\0\7\10\3\0\1\10"+
    "\1\0\3\10\1\0\7\10\1\151\11\10\10\0\2\10"+
    "\1\0\1\10\15\0\7\10\3\0\1\10\1\0\3\10"+
    "\1\0\11\10\1\152\7\10\10\0\2\10\1\0\1\10"+
    "\15\0\7\10\3\0\1\10\1\0\3\10\1\0\2\10"+
    "\1\153\16\10\10\0\2\10\1\0\1\10\26\0\1\154"+
    "\63\0\1\155\1\0\1\156\3\0\1\154\4\157\1\160"+
    "\10\0\2\157\2\0\1\157\5\0\1\157\76\0\1\161"+
    "\71\0\1\162\26\0\2\163\11\0\1\163\55\0\3\164"+
    "\1\0\1\164\6\0\2\164\4\0\2\164\1\0\1\164"+
    "\4\0\2\164\32\0\1\136\74\0\7\10\3\0\1\10"+
    "\1\0\3\10\1\0\6\10\1\165\12\10\10\0\2\10"+
    "\1\0\1\10\15\0\7\10\3\0\1\10\1\0\3\10"+
    "\1\0\3\10\1\166\15\10\10\0\2\10\1\0\1\10"+
    "\15\0\7\10\3\0\1\10\1\0\1\167\2\10\1\0"+
    "\21\10\10\0\2\10\1\0\1\10\15\0\7\10\3\0"+
    "\1\10\1\0\3\10\1\0\7\10\1\170\11\10\10\0"+
    "\2\10\1\0\1\10\15\0\7\10\3\0\1\10\1\0"+
    "\3\10\1\0\12\10\1\171\6\10\10\0\2\10\1\0"+
    "\1\10\15\0\7\10\3\0\1\10\1\0\3\10\1\0"+
    "\12\10\1\172\6\10\10\0\2\10\1\0\1\10\15\0"+
    "\7\10\3\0\1\10\1\0\3\10\1\0\14\10\1\173"+
    "\4\10\10\0\2\10\1\0\1\10\15\0\7\10\3\0"+
    "\1\10\1\0\3\10\1\0\1\10\1\174\17\10\10\0"+
    "\2\10\1\0\1\10\15\0\7\10\3\0\1\10\1\0"+
    "\3\10\1\0\14\10\1\175\4\10\10\0\2\10\1\0"+
    "\1\10\15\0\7\10\3\0\1\10\1\0\3\10\1\0"+
    "\15\10\1\176\3\10\10\0\2\10\1\0\1\10\26\0"+
    "\1\177\63\0\2\200\11\0\1\200\22\0\1\201\32\0"+
    "\3\202\1\0\1\202\6\0\2\202\4\0\2\202\1\0"+
    "\1\202\4\0\2\202\76\0\1\201\33\0\2\200\11\0"+
    "\1\200\56\0\2\203\11\0\1\203\55\0\3\203\1\0"+
    "\1\203\6\0\2\203\4\0\2\203\1\0\1\203\4\0"+
    "\2\203\35\0\7\10\3\0\1\10\1\0\3\10\1\0"+
    "\17\10\1\204\1\10\10\0\2\10\1\0\1\10\15\0"+
    "\7\10\3\0\1\10\1\0\3\10\1\0\2\10\1\205"+
    "\16\10\10\0\2\10\1\0\1\10\15\0\7\10\3\0"+
    "\1\10\1\0\3\10\1\0\7\10\1\206\11\10\10\0"+
    "\2\10\1\0\1\10\15\0\7\10\3\0\1\10\1\0"+
    "\3\10\1\0\4\10\1\207\14\10\10\0\2\10\1\0"+
    "\1\10\15\0\7\10\3\0\1\10\1\0\3\10\1\0"+
    "\1\10\1\210\17\10\10\0\2\10\1\0\1\10\15\0"+
    "\7\10\3\0\1\10\1\0\3\10\1\0\10\10\1\211"+
    "\10\10\10\0\2\10\1\0\1\10\15\0\7\10\3\0"+
    "\1\10\1\0\3\10\1\0\14\10\1\212\4\10\10\0"+
    "\2\10\1\0\1\10\10\0\17\213\2\0\25\213\1\0"+
    "\23\213\10\0\2\214\11\0\1\214\55\0\3\214\1\0"+
    "\1\214\6\0\2\214\4\0\2\214\1\0\1\214\4\0"+
    "\2\214\35\0\7\10\3\0\1\10\1\0\3\10\1\0"+
    "\10\10\1\215\10\10\10\0\2\10\1\0\1\10\15\0"+
    "\7\10\3\0\1\10\1\0\3\10\1\0\10\10\1\216"+
    "\10\10\10\0\2\10\1\0\1\10\15\0\7\10\3\0"+
    "\1\10\1\0\1\217\2\10\1\0\21\10\10\0\2\10"+
    "\1\0\1\10\15\0\7\10\3\0\1\10\1\0\3\10"+
    "\1\0\13\10\1\220\5\10\10\0\2\10\1\0\1\10"+
    "\56\0\1\221\71\0\1\222\30\0\7\10\3\0\1\10"+
    "\1\0\3\10\1\0\12\10\1\223\6\10\10\0\2\10"+
    "\1\0\1\10\15\0\7\10\3\0\1\10\1\0\3\10"+
    "\1\0\14\10\1\224\4\10\10\0\2\10\1\0\1\10"+
    "\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5278];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\5\1\1\11\14\1\4\11"+
    "\1\1\4\11\7\1\1\11\1\1\1\11\2\1\2\11"+
    "\2\1\2\11\1\1\1\0\2\11\1\1\2\11\14\1"+
    "\2\0\5\11\1\1\1\11\1\1\7\11\1\1\1\0"+
    "\1\11\1\0\1\11\1\1\1\11\15\1\5\0\2\11"+
    "\2\0\12\1\2\0\1\11\1\0\1\11\7\1\2\0"+
    "\4\1\2\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[148];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    StringBuffer buffer = new StringBuffer();

    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }

    private Symbol symbol(int type, Object value) { return new Symbol(type, yyline, yycolumn, value); }

    private void reportError(String message) throws Error {
        throw new Error("Scanning error in line " + yyline + ", column " + yycolumn + " : " message + "\n") ;
    }

    private int chNum(char ch) {
        if (ch >= '0' && ch <= '9') {
            return ch - '0';
        } else if (ch >= 'A' && ch <= 'F') {
            return ch - 'A' + 10;
        } else {
            return ch - 'a' + 10;
        }
    }

    private char lexANC(String s) {
        char ch;
        if (s[1] == 'x') {
            ch = (chNum(s[2]) << 4) | chNum(s[3]);
        } else {
            ch = (chNum(s[1]) << 6) | (chNum(s[2]) << 3) | chNum(s[3]);
        }
        return ch;
    }

    private char lexTDC(String s) {
        switch (s) {
            case "\\b"  : return '\b';
            case "\\f"  : return '\f';
            case "\\n"  : return '\n';
            case "\\r"  : return '\r';
            case "\\t"  : return '\t';
            case "\\\\" : return '\\';
            case "\\\'" : return '\'';
            case "\\\"" : return '\"';
            case "\\0"  : return '\0';
        }
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 172) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     {
        if (yystate() == COMMENT) {
            reportError("Comment reaches the end of file.");
        }
    }
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { reportError("Illegal character <" + yytext() + ">");
            }
          case 76: break;
          case 2: 
            { /* ignored */
            }
          case 77: break;
          case 3: 
            { return symbol(sym.DIVIDE);
            }
          case 78: break;
          case 4: 
            { return symbol(sym.IDENTIFIER, yytext());
            }
          case 79: break;
          case 5: 
            { return symbol(sym.INTEGER, Integer.parseInt(yytext()));
            }
          case 80: break;
          case 6: 
            { return symbol(sym.ADDRESS_BITWISEAND);
            }
          case 81: break;
          case 7: 
            { buffer.setLength(0); yybegin(STRING);
            }
          case 82: break;
          case 8: 
            { return symbol(sym.MULTIPLY_ASTERISK);
            }
          case 83: break;
          case 9: 
            { return symbol(sym.LEFTRBRACKET);
            }
          case 84: break;
          case 10: 
            { return symbol(sym.RIGHTRBRACKET);
            }
          case 85: break;
          case 11: 
            { return symbol(sym.SEMICOLON);
            }
          case 86: break;
          case 12: 
            { return symbol(sym.COMMA);
            }
          case 87: break;
          case 13: 
            { return symbol(sym.ASSIGN);
            }
          case 88: break;
          case 14: 
            { return symbol(sym.LEFTCBRACKET);
            }
          case 89: break;
          case 15: 
            { return symbol(sym.RIGHTCBRACKET);
            }
          case 90: break;
          case 16: 
            { return symbol(sym.LEFTSBRACKET);
            }
          case 91: break;
          case 17: 
            { return symbol(sym.RIGHTSBRACKET);
            }
          case 92: break;
          case 18: 
            { return symbol(sym.BITWISEOR);
            }
          case 93: break;
          case 19: 
            { return symbol(sym.BITWISEXOR);
            }
          case 94: break;
          case 20: 
            { return symbol(sym.SMALLER);
            }
          case 95: break;
          case 21: 
            { return symbol(sym.GREATER);
            }
          case 96: break;
          case 22: 
            { return symbol(sym.ADD);
            }
          case 97: break;
          case 23: 
            { return symbol(sym.SUBTRACT);
            }
          case 98: break;
          case 24: 
            { return symbol(sym.MOD);
            }
          case 99: break;
          case 25: 
            { return symbol(sym.BITWISENOT);
            }
          case 100: break;
          case 26: 
            { return symbol(sym.NOT);
            }
          case 101: break;
          case 27: 
            { return symbol(sym.DOT);
            }
          case 102: break;
          case 28: 
            { buffer.append(yytext());
            }
          case 103: break;
          case 29: 
            { yybegin(YYINITIAL);
                      return symbol(sym.STRING, buffer.toString());
            }
          case 104: break;
          case 30: 
            { 
            }
          case 105: break;
          case 31: 
            { /* ignore */
            }
          case 106: break;
          case 32: 
            { yybegin(COMMENT);
            }
          case 107: break;
          case 33: 
            { return symbol(sym.DIVASSIGN);
            }
          case 108: break;
          case 34: 
            { return symbol(sym.INTEGER, Integer.parseInt(yytext().subString(1), 8));
            }
          case 109: break;
          case 35: 
            { return symbol(sym.AND);
            }
          case 110: break;
          case 36: 
            { return symbol(sym.ANDASSIGN);
            }
          case 111: break;
          case 37: 
            { reportError("Unexpected end of a comment.");
            }
          case 112: break;
          case 38: 
            { return symbol(sym.MULASSIGN);
            }
          case 113: break;
          case 39: 
            { return symbol(sym.IF);
            }
          case 114: break;
          case 40: 
            { return symbol(sym.EQUAL);
            }
          case 115: break;
          case 41: 
            { return symbol(sym.ORASSIGN);
            }
          case 116: break;
          case 42: 
            { return symbol(sym.OR);
            }
          case 117: break;
          case 43: 
            { return symbol(sym.XORASSIGN);
            }
          case 118: break;
          case 44: 
            { return symbol(sym.SMALLEREQUAL);
            }
          case 119: break;
          case 45: 
            { return symbol(sym.SHIFTLEFT);
            }
          case 120: break;
          case 46: 
            { return symbol(sym.GREATEREQUAL);
            }
          case 121: break;
          case 47: 
            { return symbol(sym.SHIFTRIGHT);
            }
          case 122: break;
          case 48: 
            { return symbol(sym.ADDASSIGN);
            }
          case 123: break;
          case 49: 
            { return symbol(sym.INCREASE);
            }
          case 124: break;
          case 50: 
            { return symbol(sym.SUBASSIGN);
            }
          case 125: break;
          case 51: 
            { return symbol(sym.POINTER);
            }
          case 126: break;
          case 52: 
            { return symbol(sym.DECREASE);
            }
          case 127: break;
          case 53: 
            { return symbol(sym.MODASSIGN);
            }
          case 128: break;
          case 54: 
            { return symbol(sym.NOTEQUAL);
            }
          case 129: break;
          case 55: 
            { buffer.append(lexTDC(yytext()));
            }
          case 130: break;
          case 56: 
            { yybegin(YYINITIAL);
            }
          case 131: break;
          case 57: 
            { return symbol(sym.INTEGER, Integer.parseInt(yytext().subString(2), 16));
            }
          case 132: break;
          case 58: 
            { return symbol(sym.INT);
            }
          case 133: break;
          case 59: 
            { return symbol(sym.FOR);
            }
          case 134: break;
          case 60: 
            { return symbol(sym.SHLASSIGN);
            }
          case 135: break;
          case 61: 
            { return symbol(sym.SHRASSIGN);
            }
          case 136: break;
          case 62: 
            { return symbol(sym.VOID);
            }
          case 137: break;
          case 63: 
            { return symbol(sym.CHAR);
            }
          case 138: break;
          case 64: 
            { return symbol(sym.ELSE);
            }
          case 139: break;
          case 65: 
            { return symbol(sym.CHAR, lexTDC(yytext()));
            }
          case 140: break;
          case 66: 
            { buffer.append(lexANC(yytext()));
            }
          case 141: break;
          case 67: 
            { return symbol(sym.BREAK);
            }
          case 142: break;
          case 68: 
            { return symbol(sym.UNION);
            }
          case 143: break;
          case 69: 
            { return symbol(sym.WHILE);
            }
          case 144: break;
          case 70: 
            { return symbol(sym.RETURN);
            }
          case 145: break;
          case 71: 
            { return symbol(sym.STRUCT);
            }
          case 146: break;
          case 72: 
            { return symbol(sym.SIZEOF);
            }
          case 147: break;
          case 73: 
            { return symbol(sym.CHAR, yytext()[0]);
            }
          case 148: break;
          case 74: 
            { return symbol(sym.CHAR, lexANC(yytext()));
            }
          case 149: break;
          case 75: 
            { return symbol(sym.CONTINUE);
            }
          case 150: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Yylex [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Yylex scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Yylex(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
