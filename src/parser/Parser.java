
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package parser;

import lexer.Yylex;
import java.util.*;
import java.io.Reader;
import ast.nodes.*;
import ast.nodes.declaration.*;
import ast.nodes.statment.*;
import ast.nodes.type.*;
import ast.nodes.initialization.*;
import ast.nodes.expression.*;
import table.SyntacticTable;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symbols.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\252\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\003\003\000\002\003\003\000\002\066\002" +
    "\000\002\020\006\000\002\067\002\000\002\020\007\000" +
    "\002\005\003\000\002\005\004\000\002\004\004\000\002" +
    "\004\005\000\002\004\005\000\002\070\002\000\002\004" +
    "\007\000\002\007\004\000\002\014\003\000\002\014\004" +
    "\000\002\015\003\000\002\015\003\000\002\015\005\000" +
    "\002\071\002\000\002\015\006\000\002\072\002\000\002" +
    "\073\002\000\002\015\010\000\002\015\006\000\002\011" +
    "\003\000\002\011\005\000\002\010\003\000\002\010\005" +
    "\000\002\006\003\000\002\006\005\000\002\013\003\000" +
    "\002\013\005\000\002\021\003\000\002\021\005\000\002" +
    "\022\003\000\002\022\005\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\004\000\002\023\007" +
    "\000\002\023\006\000\002\023\004\000\002\023\006\000" +
    "\002\023\003\000\002\025\005\000\002\025\006\000\002" +
    "\016\003\000\002\016\004\000\002\017\003\000\002\017" +
    "\003\000\002\017\005\000\002\017\005\000\002\017\006" +
    "\000\002\017\006\000\002\012\003\000\002\012\005\000" +
    "\002\026\003\000\002\074\002\000\002\026\004\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\027" +
    "\003\000\002\027\004\000\002\030\004\000\002\030\003" +
    "\000\002\075\002\000\002\031\007\000\002\076\002\000" +
    "\002\031\006\000\002\077\002\000\002\031\006\000\002" +
    "\100\002\000\002\031\005\000\002\032\007\000\002\032" +
    "\011\000\002\033\007\000\002\033\010\000\002\033\011" +
    "\000\002\034\004\000\002\034\004\000\002\034\004\000" +
    "\002\034\005\000\002\035\003\000\002\035\005\000\002" +
    "\036\003\000\002\036\005\000\002\057\003\000\002\057" +
    "\003\000\002\057\003\000\002\057\003\000\002\057\003" +
    "\000\002\057\003\000\002\057\003\000\002\057\003\000" +
    "\002\057\003\000\002\057\003\000\002\057\003\000\002" +
    "\037\003\000\002\040\003\000\002\040\005\000\002\041" +
    "\003\000\002\041\005\000\002\042\003\000\002\042\005" +
    "\000\002\043\003\000\002\043\005\000\002\044\003\000" +
    "\002\044\005\000\002\045\003\000\002\045\005\000\002" +
    "\060\003\000\002\060\003\000\002\046\003\000\002\046" +
    "\005\000\002\061\003\000\002\061\003\000\002\061\003" +
    "\000\002\061\003\000\002\047\003\000\002\047\005\000" +
    "\002\062\003\000\002\062\003\000\002\050\003\000\002" +
    "\050\005\000\002\063\003\000\002\063\003\000\002\051" +
    "\003\000\002\051\005\000\002\064\003\000\002\064\003" +
    "\000\002\064\003\000\002\052\003\000\002\052\006\000" +
    "\002\024\003\000\002\024\004\000\002\053\003\000\002" +
    "\053\004\000\002\053\004\000\002\053\004\000\002\053" +
    "\004\000\002\053\006\000\002\065\003\000\002\065\003" +
    "\000\002\065\003\000\002\065\003\000\002\065\003\000" +
    "\002\065\003\000\002\054\003\000\002\054\006\000\002" +
    "\054\005\000\002\054\006\000\002\054\005\000\002\054" +
    "\005\000\002\054\005\000\002\054\005\000\002\054\004" +
    "\000\002\054\004\000\002\056\003\000\002\056\005\000" +
    "\002\055\003\000\002\055\003\000\002\055\003\000\002" +
    "\055\003\000\002\055\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010f\000\020\060\016\064\012\065\017\066\004\067" +
    "\011\070\010\101\014\001\002\000\016\004\uffd8\005\uffd8" +
    "\006\uffd8\015\uffd8\057\uffd8\060\uffd8\001\002\000\022\002" +
    "\000\060\000\064\000\065\000\066\000\067\000\070\000" +
    "\101\000\001\002\000\022\002\ufffd\060\ufffd\064\ufffd\065" +
    "\ufffd\066\ufffd\067\ufffd\070\ufffd\101\ufffd\001\002\000\022" +
    "\002\ufffe\060\ufffe\064\ufffe\065\ufffe\066\ufffe\067\ufffe\070" +
    "\ufffe\101\ufffe\001\002\000\006\011\u010e\057\u010f\001\002" +
    "\000\006\011\357\057\360\001\002\000\016\004\uffd9\005" +
    "\uffd9\006\uffd9\015\uffd9\057\uffd9\060\uffd9\001\002\000\022" +
    "\002\356\060\016\064\012\065\017\066\004\067\011\070" +
    "\010\101\014\001\002\000\016\060\016\064\012\065\017" +
    "\066\004\067\011\070\010\001\002\000\014\004\030\006" +
    "\020\015\025\057\023\060\024\001\002\000\016\004\uffd1" +
    "\005\uffd1\006\uffd1\015\uffd1\057\uffd1\060\uffd1\001\002\000" +
    "\016\004\uffd7\005\uffd7\006\uffd7\015\uffd7\057\uffd7\060\uffd7" +
    "\001\002\000\100\002\ufff6\004\ufff6\006\ufff6\011\ufff6\012" +
    "\ufff6\015\ufff6\020\ufff6\023\ufff6\024\ufff6\027\ufff6\030\ufff6" +
    "\042\ufff6\043\ufff6\057\ufff6\060\ufff6\061\ufff6\062\ufff6\063" +
    "\ufff6\064\ufff6\065\ufff6\066\ufff6\067\ufff6\070\ufff6\071\ufff6" +
    "\073\ufff6\074\ufff6\075\ufff6\076\ufff6\077\ufff6\100\ufff6\101" +
    "\ufff6\001\002\000\006\006\343\007\342\001\002\000\036" +
    "\004\322\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\013" +
    "\323\060\ufff0\064\ufff0\065\ufff0\066\ufff0\067\ufff0\070\ufff0" +
    "\101\ufff0\001\002\000\036\004\uffee\005\uffee\006\uffee\007" +
    "\uffee\010\uffee\011\uffee\013\uffee\060\uffee\064\uffee\065\uffee" +
    "\066\uffee\067\uffee\070\uffee\101\uffee\001\002\000\036\004" +
    "\uffed\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed\013\uffed" +
    "\060\uffed\064\uffed\065\uffed\066\uffed\067\uffed\070\uffed\101" +
    "\uffed\001\002\000\012\004\030\015\025\057\023\060\024" +
    "\001\002\000\030\006\uffdf\007\uffdf\010\035\011\ufffc\060" +
    "\ufffa\064\ufffa\065\ufffa\066\ufffa\067\ufffa\070\ufffa\101\ufffa" +
    "\001\002\000\006\006\uffe1\007\uffe1\001\002\000\012\004" +
    "\030\015\025\057\023\060\024\001\002\000\004\005\032" +
    "\001\002\000\036\004\uffec\005\uffec\006\uffec\007\uffec\010" +
    "\uffec\011\uffec\013\uffec\060\uffec\064\uffec\065\uffec\066\uffec" +
    "\067\uffec\070\uffec\101\uffec\001\002\000\020\060\016\064" +
    "\012\065\017\066\004\067\011\070\010\101\014\001\002" +
    "\000\004\011\226\001\002\000\040\004\073\011\074\015" +
    "\072\020\040\023\064\024\052\027\051\030\044\042\062" +
    "\043\075\057\045\061\067\062\042\063\055\100\036\001" +
    "\002\000\036\004\223\015\072\020\040\023\064\024\052" +
    "\027\051\030\044\042\062\043\075\057\045\061\067\062" +
    "\042\063\055\100\036\001\002\000\122\004\uff68\005\uff68" +
    "\006\uff68\007\uff68\010\uff68\012\uff68\013\uff68\014\uff68\015" +
    "\uff68\016\uff68\017\uff68\020\uff68\021\uff68\022\uff68\023\uff68" +
    "\024\uff68\025\uff68\026\uff68\031\uff68\032\uff68\033\uff68\034" +
    "\uff68\035\uff68\036\uff68\037\uff68\040\uff68\041\uff68\042\uff68" +
    "\043\uff68\044\uff68\045\uff68\046\uff68\047\uff68\050\uff68\051" +
    "\uff68\052\uff68\053\uff68\054\uff68\055\uff68\056\uff68\001\002" +
    "\000\036\004\uff6e\015\uff6e\020\uff6e\023\uff6e\024\uff6e\027" +
    "\uff6e\030\uff6e\042\uff6e\043\uff6e\057\uff6e\061\uff6e\062\uff6e" +
    "\063\uff6e\100\uff6e\001\002\000\010\006\uffdd\007\uffdd\012" +
    "\uffdd\001\002\000\122\004\uff5a\005\uff5a\006\uff5a\007\uff5a" +
    "\010\uff5a\012\uff5a\013\uff5a\014\uff5a\015\uff5a\016\uff5a\017" +
    "\uff5a\020\uff5a\021\uff5a\022\uff5a\023\uff5a\024\uff5a\025\uff5a" +
    "\026\uff5a\031\uff5a\032\uff5a\033\uff5a\034\uff5a\035\uff5a\036" +
    "\uff5a\037\uff5a\040\uff5a\041\uff5a\042\uff5a\043\uff5a\044\uff5a" +
    "\045\uff5a\046\uff5a\047\uff5a\050\uff5a\051\uff5a\052\uff5a\053" +
    "\uff5a\054\uff5a\055\uff5a\056\uff5a\001\002\000\060\005\uff7d" +
    "\006\uff7d\007\uff7d\012\uff7d\014\uff7d\015\uff7d\016\uff7d\017" +
    "\uff7d\020\uff7d\021\uff7d\022\uff7d\023\uff7d\024\uff7d\025\uff7d" +
    "\026\uff7d\032\uff7d\033\uff7d\034\uff7d\035\uff7d\036\uff7d\037" +
    "\uff7d\040\uff7d\041\uff7d\001\002\000\036\004\uff69\015\uff69" +
    "\020\uff69\023\uff69\024\uff69\027\uff69\030\uff69\042\uff69\043" +
    "\uff69\057\uff69\061\uff69\062\uff69\063\uff69\100\uff69\001\002" +
    "\000\122\004\uff5c\005\uff5c\006\uff5c\007\uff5c\010\uff5c\012" +
    "\uff5c\013\uff5c\014\uff5c\015\uff5c\016\uff5c\017\uff5c\020\uff5c" +
    "\021\uff5c\022\uff5c\023\uff5c\024\uff5c\025\uff5c\026\uff5c\031" +
    "\uff5c\032\uff5c\033\uff5c\034\uff5c\035\uff5c\036\uff5c\037\uff5c" +
    "\040\uff5c\041\uff5c\042\uff5c\043\uff5c\044\uff5c\045\uff5c\046" +
    "\uff5c\047\uff5c\050\uff5c\051\uff5c\052\uff5c\053\uff5c\054\uff5c" +
    "\055\uff5c\056\uff5c\001\002\000\106\005\uff78\006\uff78\007" +
    "\uff78\010\214\012\uff78\014\uff78\015\uff78\016\uff78\017\uff78" +
    "\020\uff78\021\uff78\022\uff78\023\uff78\024\uff78\025\uff78\026" +
    "\uff78\032\uff78\033\uff78\034\uff78\035\uff78\036\uff78\037\uff78" +
    "\040\uff78\041\uff78\045\206\046\211\047\215\050\207\051" +
    "\210\052\220\053\217\054\205\055\216\056\212\001\002" +
    "\000\026\005\uff93\006\uff93\007\uff93\012\uff93\014\uff93\016" +
    "\uff93\017\uff93\020\136\032\uff93\033\uff93\001\002\000\046" +
    "\005\uff8b\006\uff8b\007\uff8b\012\uff8b\014\uff8b\016\uff8b\017" +
    "\uff8b\020\uff8b\021\uff8b\022\uff8b\032\uff8b\033\uff8b\034\uff8b" +
    "\035\uff8b\036\uff8b\037\uff8b\040\153\041\152\001\002\000" +
    "\036\004\uff6a\015\uff6a\020\uff6a\023\uff6a\024\uff6a\027\uff6a" +
    "\030\uff6a\042\uff6a\043\uff6a\057\uff6a\061\uff6a\062\uff6a\063" +
    "\uff6a\100\uff6a\001\002\000\036\004\uff6b\015\uff6b\020\uff6b" +
    "\023\uff6b\024\uff6b\027\uff6b\030\uff6b\042\uff6b\043\uff6b\057" +
    "\uff6b\061\uff6b\062\uff6b\063\uff6b\100\uff6b\001\002\000\122" +
    "\004\170\005\uff74\006\uff74\007\uff74\010\uff74\012\uff74\013" +
    "\166\014\uff74\015\uff74\016\uff74\017\uff74\020\uff74\021\uff74" +
    "\022\uff74\023\uff74\024\uff74\025\uff74\026\uff74\031\167\032" +
    "\uff74\033\uff74\034\uff74\035\uff74\036\uff74\037\uff74\040\uff74" +
    "\041\uff74\042\163\043\164\044\165\045\uff74\046\uff74\047" +
    "\uff74\050\uff74\051\uff74\052\uff74\053\uff74\054\uff74\055\uff74" +
    "\056\uff74\001\002\000\024\005\uff95\006\uff95\007\uff95\012" +
    "\uff95\014\uff95\016\uff95\017\134\032\uff95\033\uff95\001\002" +
    "\000\122\004\uff59\005\uff59\006\uff59\007\uff59\010\uff59\012" +
    "\uff59\013\uff59\014\uff59\015\uff59\016\uff59\017\uff59\020\uff59" +
    "\021\uff59\022\uff59\023\uff59\024\uff59\025\uff59\026\uff59\031" +
    "\uff59\032\uff59\033\uff59\034\uff59\035\uff59\036\uff59\037\uff59" +
    "\040\uff59\041\uff59\042\uff59\043\uff59\044\uff59\045\uff59\046" +
    "\uff59\047\uff59\050\uff59\051\uff59\052\uff59\053\uff59\054\uff59" +
    "\055\uff59\056\uff59\001\002\000\022\005\uff97\006\uff97\007" +
    "\uff97\012\uff97\014\uff97\016\132\032\uff97\033\uff97\001\002" +
    "\000\052\005\uff85\006\uff85\007\uff85\012\uff85\014\uff85\016" +
    "\uff85\017\uff85\020\uff85\021\uff85\022\uff85\023\157\024\156" +
    "\032\uff85\033\uff85\034\uff85\035\uff85\036\uff85\037\uff85\040" +
    "\uff85\041\uff85\001\002\000\020\005\uff99\006\uff99\007\uff99" +
    "\012\uff99\014\uff99\032\uff99\033\130\001\002\000\032\005" +
    "\uff91\006\uff91\007\uff91\012\uff91\014\uff91\016\uff91\017\uff91" +
    "\020\uff91\032\uff91\033\uff91\034\140\035\141\001\002\000" +
    "\036\004\077\015\072\020\040\023\064\024\052\027\051" +
    "\030\044\042\062\043\075\057\045\061\067\062\042\063" +
    "\055\100\036\001\002\000\042\005\uff8f\006\uff8f\007\uff8f" +
    "\012\uff8f\014\uff8f\016\uff8f\017\uff8f\020\uff8f\021\150\022" +
    "\145\032\uff8f\033\uff8f\034\uff8f\035\uff8f\036\144\037\147" +
    "\001\002\000\036\004\uff6c\015\uff6c\020\uff6c\023\uff6c\024" +
    "\uff6c\027\uff6c\030\uff6c\042\uff6c\043\uff6c\057\uff6c\061\uff6c" +
    "\062\uff6c\063\uff6c\100\uff6c\001\002\000\016\005\uffa7\006" +
    "\uffa7\007\uffa7\012\uffa7\014\uffa7\032\126\001\002\000\060" +
    "\005\uff81\006\uff81\007\uff81\012\uff81\014\uff81\015\123\016" +
    "\uff81\017\uff81\020\uff81\021\uff81\022\uff81\023\uff81\024\uff81" +
    "\025\124\026\121\032\uff81\033\uff81\034\uff81\035\uff81\036" +
    "\uff81\037\uff81\040\uff81\041\uff81\001\002\000\122\004\uff5b" +
    "\005\uff5b\006\uff5b\007\uff5b\010\uff5b\012\uff5b\013\uff5b\014" +
    "\uff5b\015\uff5b\016\uff5b\017\uff5b\020\uff5b\021\uff5b\022\uff5b" +
    "\023\uff5b\024\uff5b\025\uff5b\026\uff5b\031\uff5b\032\uff5b\033" +
    "\uff5b\034\uff5b\035\uff5b\036\uff5b\037\uff5b\040\uff5b\041\uff5b" +
    "\042\uff5b\043\uff5b\044\uff5b\045\uff5b\046\uff5b\047\uff5b\050" +
    "\uff5b\051\uff5b\052\uff5b\053\uff5b\054\uff5b\055\uff5b\056\uff5b" +
    "\001\002\000\036\004\073\015\072\020\040\023\064\024" +
    "\052\027\051\030\044\042\062\043\075\057\045\061\067" +
    "\062\042\063\055\100\036\001\002\000\006\006\uffde\007" +
    "\uffde\001\002\000\036\004\uff6d\015\uff6d\020\uff6d\023\uff6d" +
    "\024\uff6d\027\uff6d\030\uff6d\042\uff6d\043\uff6d\057\uff6d\061" +
    "\uff6d\062\uff6d\063\uff6d\100\uff6d\001\002\000\052\004\073" +
    "\015\072\020\040\023\064\024\052\027\051\030\044\042" +
    "\062\043\075\057\045\060\016\061\067\062\042\063\055" +
    "\064\012\065\017\066\004\067\011\070\010\100\036\001" +
    "\002\000\040\004\073\011\074\015\072\020\040\023\064" +
    "\024\052\027\051\030\044\042\062\043\075\057\045\061" +
    "\067\062\042\063\055\100\036\001\002\000\036\004\077" +
    "\015\072\020\040\023\064\024\052\027\051\030\044\042" +
    "\062\043\075\057\045\061\067\062\042\063\055\100\036" +
    "\001\002\000\106\005\uff72\006\uff72\007\uff72\010\uff72\012" +
    "\uff72\014\uff72\015\uff72\016\uff72\017\uff72\020\uff72\021\uff72" +
    "\022\uff72\023\uff72\024\uff72\025\uff72\026\uff72\032\uff72\033" +
    "\uff72\034\uff72\035\uff72\036\uff72\037\uff72\040\uff72\041\uff72" +
    "\045\uff72\046\uff72\047\uff72\050\uff72\051\uff72\052\uff72\053" +
    "\uff72\054\uff72\055\uff72\056\uff72\001\002\000\036\004\073" +
    "\015\072\020\040\023\064\024\052\027\051\030\044\042" +
    "\062\043\075\057\045\061\067\062\042\063\055\100\036" +
    "\001\002\000\012\005\uffa9\006\uffa9\007\uffa9\014\uffa9\001" +
    "\002\000\006\005\103\007\102\001\002\000\036\004\073" +
    "\015\072\020\040\023\064\024\052\027\051\030\044\042" +
    "\062\043\075\057\045\061\067\062\042\063\055\100\036" +
    "\001\002\000\122\004\uff58\005\uff58\006\uff58\007\uff58\010" +
    "\uff58\012\uff58\013\uff58\014\uff58\015\uff58\016\uff58\017\uff58" +
    "\020\uff58\021\uff58\022\uff58\023\uff58\024\uff58\025\uff58\026" +
    "\uff58\031\uff58\032\uff58\033\uff58\034\uff58\035\uff58\036\uff58" +
    "\037\uff58\040\uff58\041\uff58\042\uff58\043\uff58\044\uff58\045" +
    "\uff58\046\uff58\047\uff58\050\uff58\051\uff58\052\uff58\053\uff58" +
    "\054\uff58\055\uff58\056\uff58\001\002\000\012\005\uffa8\006" +
    "\uffa8\007\uffa8\014\uffa8\001\002\000\006\007\107\012\110" +
    "\001\002\000\006\007\uffdb\012\uffdb\001\002\000\040\004" +
    "\073\011\074\015\072\020\040\023\064\024\052\027\051" +
    "\030\044\042\062\043\075\057\045\061\067\062\042\063" +
    "\055\100\036\001\002\000\010\006\uffdc\007\uffdc\012\uffdc" +
    "\001\002\000\006\007\uffda\012\uffda\001\002\000\006\005" +
    "\uff76\015\uff76\001\002\000\006\005\114\015\115\001\002" +
    "\000\036\004\073\015\072\020\040\023\064\024\052\027" +
    "\051\030\044\042\062\043\075\057\045\061\067\062\042" +
    "\063\055\100\036\001\002\000\006\005\uff75\015\uff75\001" +
    "\002\000\106\005\uff77\006\uff77\007\uff77\010\uff77\012\uff77" +
    "\014\uff77\015\uff77\016\uff77\017\uff77\020\uff77\021\uff77\022" +
    "\uff77\023\uff77\024\uff77\025\uff77\026\uff77\032\uff77\033\uff77" +
    "\034\uff77\035\uff77\036\uff77\037\uff77\040\uff77\041\uff77\045" +
    "\uff77\046\uff77\047\uff77\050\uff77\051\uff77\052\uff77\053\uff77" +
    "\054\uff77\055\uff77\056\uff77\001\002\000\106\005\uff78\006" +
    "\uff78\007\uff78\010\uff78\012\uff78\014\uff78\015\uff78\016\uff78" +
    "\017\uff78\020\uff78\021\uff78\022\uff78\023\uff78\024\uff78\025" +
    "\uff78\026\uff78\032\uff78\033\uff78\034\uff78\035\uff78\036\uff78" +
    "\037\uff78\040\uff78\041\uff78\045\uff78\046\uff78\047\uff78\050" +
    "\uff78\051\uff78\052\uff78\053\uff78\054\uff78\055\uff78\056\uff78" +
    "\001\002\000\106\005\uff71\006\uff71\007\uff71\010\uff71\012" +
    "\uff71\014\uff71\015\uff71\016\uff71\017\uff71\020\uff71\021\uff71" +
    "\022\uff71\023\uff71\024\uff71\025\uff71\026\uff71\032\uff71\033" +
    "\uff71\034\uff71\035\uff71\036\uff71\037\uff71\040\uff71\041\uff71" +
    "\045\uff71\046\uff71\047\uff71\050\uff71\051\uff71\052\uff71\053" +
    "\uff71\054\uff71\055\uff71\056\uff71\001\002\000\036\004\uff79" +
    "\015\uff79\020\uff79\023\uff79\024\uff79\027\uff79\030\uff79\042" +
    "\uff79\043\uff79\057\uff79\061\uff79\062\uff79\063\uff79\100\uff79" +
    "\001\002\000\036\004\073\015\072\020\040\023\064\024" +
    "\052\027\051\030\044\042\062\043\075\057\045\061\067" +
    "\062\042\063\055\100\036\001\002\000\036\004\uff7b\015" +
    "\uff7b\020\uff7b\023\uff7b\024\uff7b\027\uff7b\030\uff7b\042\uff7b" +
    "\043\uff7b\057\uff7b\061\uff7b\062\uff7b\063\uff7b\100\uff7b\001" +
    "\002\000\036\004\uff7a\015\uff7a\020\uff7a\023\uff7a\024\uff7a" +
    "\027\uff7a\030\uff7a\042\uff7a\043\uff7a\057\uff7a\061\uff7a\062" +
    "\uff7a\063\uff7a\100\uff7a\001\002\000\060\005\uff7c\006\uff7c" +
    "\007\uff7c\012\uff7c\014\uff7c\015\uff7c\016\uff7c\017\uff7c\020" +
    "\uff7c\021\uff7c\022\uff7c\023\uff7c\024\uff7c\025\uff7c\026\uff7c" +
    "\032\uff7c\033\uff7c\034\uff7c\035\uff7c\036\uff7c\037\uff7c\040" +
    "\uff7c\041\uff7c\001\002\000\036\004\073\015\072\020\040" +
    "\023\064\024\052\027\051\030\044\042\062\043\075\057" +
    "\045\061\067\062\042\063\055\100\036\001\002\000\020" +
    "\005\uff98\006\uff98\007\uff98\012\uff98\014\uff98\032\uff98\033" +
    "\130\001\002\000\036\004\073\015\072\020\040\023\064" +
    "\024\052\027\051\030\044\042\062\043\075\057\045\061" +
    "\067\062\042\063\055\100\036\001\002\000\022\005\uff96" +
    "\006\uff96\007\uff96\012\uff96\014\uff96\016\132\032\uff96\033" +
    "\uff96\001\002\000\036\004\073\015\072\020\040\023\064" +
    "\024\052\027\051\030\044\042\062\043\075\057\045\061" +
    "\067\062\042\063\055\100\036\001\002\000\024\005\uff94" +
    "\006\uff94\007\uff94\012\uff94\014\uff94\016\uff94\017\134\032" +
    "\uff94\033\uff94\001\002\000\036\004\073\015\072\020\040" +
    "\023\064\024\052\027\051\030\044\042\062\043\075\057" +
    "\045\061\067\062\042\063\055\100\036\001\002\000\026" +
    "\005\uff92\006\uff92\007\uff92\012\uff92\014\uff92\016\uff92\017" +
    "\uff92\020\136\032\uff92\033\uff92\001\002\000\036\004\073" +
    "\015\072\020\040\023\064\024\052\027\051\030\044\042" +
    "\062\043\075\057\045\061\067\062\042\063\055\100\036" +
    "\001\002\000\032\005\uff90\006\uff90\007\uff90\012\uff90\014" +
    "\uff90\016\uff90\017\uff90\020\uff90\032\uff90\033\uff90\034\140" +
    "\035\141\001\002\000\036\004\uff8d\015\uff8d\020\uff8d\023" +
    "\uff8d\024\uff8d\027\uff8d\030\uff8d\042\uff8d\043\uff8d\057\uff8d" +
    "\061\uff8d\062\uff8d\063\uff8d\100\uff8d\001\002\000\036\004" +
    "\uff8c\015\uff8c\020\uff8c\023\uff8c\024\uff8c\027\uff8c\030\uff8c" +
    "\042\uff8c\043\uff8c\057\uff8c\061\uff8c\062\uff8c\063\uff8c\100" +
    "\uff8c\001\002\000\036\004\073\015\072\020\040\023\064" +
    "\024\052\027\051\030\044\042\062\043\075\057\045\061" +
    "\067\062\042\063\055\100\036\001\002\000\042\005\uff8e" +
    "\006\uff8e\007\uff8e\012\uff8e\014\uff8e\016\uff8e\017\uff8e\020" +
    "\uff8e\021\150\022\145\032\uff8e\033\uff8e\034\uff8e\035\uff8e" +
    "\036\144\037\147\001\002\000\036\004\uff87\015\uff87\020" +
    "\uff87\023\uff87\024\uff87\027\uff87\030\uff87\042\uff87\043\uff87" +
    "\057\uff87\061\uff87\062\uff87\063\uff87\100\uff87\001\002\000" +
    "\036\004\uff88\015\uff88\020\uff88\023\uff88\024\uff88\027\uff88" +
    "\030\uff88\042\uff88\043\uff88\057\uff88\061\uff88\062\uff88\063" +
    "\uff88\100\uff88\001\002\000\036\004\073\015\072\020\040" +
    "\023\064\024\052\027\051\030\044\042\062\043\075\057" +
    "\045\061\067\062\042\063\055\100\036\001\002\000\036" +
    "\004\uff86\015\uff86\020\uff86\023\uff86\024\uff86\027\uff86\030" +
    "\uff86\042\uff86\043\uff86\057\uff86\061\uff86\062\uff86\063\uff86" +
    "\100\uff86\001\002\000\036\004\uff89\015\uff89\020\uff89\023" +
    "\uff89\024\uff89\027\uff89\030\uff89\042\uff89\043\uff89\057\uff89" +
    "\061\uff89\062\uff89\063\uff89\100\uff89\001\002\000\046\005" +
    "\uff8a\006\uff8a\007\uff8a\012\uff8a\014\uff8a\016\uff8a\017\uff8a" +
    "\020\uff8a\021\uff8a\022\uff8a\032\uff8a\033\uff8a\034\uff8a\035" +
    "\uff8a\036\uff8a\037\uff8a\040\153\041\152\001\002\000\036" +
    "\004\uff82\015\uff82\020\uff82\023\uff82\024\uff82\027\uff82\030" +
    "\uff82\042\uff82\043\uff82\057\uff82\061\uff82\062\uff82\063\uff82" +
    "\100\uff82\001\002\000\036\004\uff83\015\uff83\020\uff83\023" +
    "\uff83\024\uff83\027\uff83\030\uff83\042\uff83\043\uff83\057\uff83" +
    "\061\uff83\062\uff83\063\uff83\100\uff83\001\002\000\036\004" +
    "\073\015\072\020\040\023\064\024\052\027\051\030\044" +
    "\042\062\043\075\057\045\061\067\062\042\063\055\100" +
    "\036\001\002\000\052\005\uff84\006\uff84\007\uff84\012\uff84" +
    "\014\uff84\016\uff84\017\uff84\020\uff84\021\uff84\022\uff84\023" +
    "\157\024\156\032\uff84\033\uff84\034\uff84\035\uff84\036\uff84" +
    "\037\uff84\040\uff84\041\uff84\001\002\000\036\004\uff7e\015" +
    "\uff7e\020\uff7e\023\uff7e\024\uff7e\027\uff7e\030\uff7e\042\uff7e" +
    "\043\uff7e\057\uff7e\061\uff7e\062\uff7e\063\uff7e\100\uff7e\001" +
    "\002\000\036\004\uff7f\015\uff7f\020\uff7f\023\uff7f\024\uff7f" +
    "\027\uff7f\030\uff7f\042\uff7f\043\uff7f\057\uff7f\061\uff7f\062" +
    "\uff7f\063\uff7f\100\uff7f\001\002\000\036\004\073\015\072" +
    "\020\040\023\064\024\052\027\051\030\044\042\062\043" +
    "\075\057\045\061\067\062\042\063\055\100\036\001\002" +
    "\000\060\005\uff80\006\uff80\007\uff80\012\uff80\014\uff80\015" +
    "\123\016\uff80\017\uff80\020\uff80\021\uff80\022\uff80\023\uff80" +
    "\024\uff80\025\124\026\121\032\uff80\033\uff80\034\uff80\035" +
    "\uff80\036\uff80\037\uff80\040\uff80\041\uff80\001\002\000\106" +
    "\005\uff73\006\uff73\007\uff73\010\uff73\012\uff73\014\uff73\015" +
    "\uff73\016\uff73\017\uff73\020\uff73\021\uff73\022\uff73\023\uff73" +
    "\024\uff73\025\uff73\026\uff73\032\uff73\033\uff73\034\uff73\035" +
    "\uff73\036\uff73\037\uff73\040\uff73\041\uff73\045\uff73\046\uff73" +
    "\047\uff73\050\uff73\051\uff73\052\uff73\053\uff73\054\uff73\055" +
    "\uff73\056\uff73\001\002\000\122\004\uff60\005\uff60\006\uff60" +
    "\007\uff60\010\uff60\012\uff60\013\uff60\014\uff60\015\uff60\016" +
    "\uff60\017\uff60\020\uff60\021\uff60\022\uff60\023\uff60\024\uff60" +
    "\025\uff60\026\uff60\031\uff60\032\uff60\033\uff60\034\uff60\035" +
    "\uff60\036\uff60\037\uff60\040\uff60\041\uff60\042\uff60\043\uff60" +
    "\044\uff60\045\uff60\046\uff60\047\uff60\050\uff60\051\uff60\052" +
    "\uff60\053\uff60\054\uff60\055\uff60\056\uff60\001\002\000\122" +
    "\004\uff5f\005\uff5f\006\uff5f\007\uff5f\010\uff5f\012\uff5f\013" +
    "\uff5f\014\uff5f\015\uff5f\016\uff5f\017\uff5f\020\uff5f\021\uff5f" +
    "\022\uff5f\023\uff5f\024\uff5f\025\uff5f\026\uff5f\031\uff5f\032" +
    "\uff5f\033\uff5f\034\uff5f\035\uff5f\036\uff5f\037\uff5f\040\uff5f" +
    "\041\uff5f\042\uff5f\043\uff5f\044\uff5f\045\uff5f\046\uff5f\047" +
    "\uff5f\050\uff5f\051\uff5f\052\uff5f\053\uff5f\054\uff5f\055\uff5f" +
    "\056\uff5f\001\002\000\006\057\204\060\203\001\002\000" +
    "\036\004\073\015\072\020\040\023\064\024\052\027\051" +
    "\030\044\042\062\043\075\057\045\061\067\062\042\063" +
    "\055\100\036\001\002\000\006\057\200\060\177\001\002" +
    "\000\040\004\073\005\172\015\072\020\040\023\064\024" +
    "\052\027\051\030\044\042\062\043\075\057\045\061\067" +
    "\062\042\063\055\100\036\001\002\000\006\005\uff5e\007" +
    "\uff5e\001\002\000\122\004\uff66\005\uff66\006\uff66\007\uff66" +
    "\010\uff66\012\uff66\013\uff66\014\uff66\015\uff66\016\uff66\017" +
    "\uff66\020\uff66\021\uff66\022\uff66\023\uff66\024\uff66\025\uff66" +
    "\026\uff66\031\uff66\032\uff66\033\uff66\034\uff66\035\uff66\036" +
    "\uff66\037\uff66\040\uff66\041\uff66\042\uff66\043\uff66\044\uff66" +
    "\045\uff66\046\uff66\047\uff66\050\uff66\051\uff66\052\uff66\053" +
    "\uff66\054\uff66\055\uff66\056\uff66\001\002\000\006\005\175" +
    "\007\174\001\002\000\036\004\073\015\072\020\040\023" +
    "\064\024\052\027\051\030\044\042\062\043\075\057\045" +
    "\061\067\062\042\063\055\100\036\001\002\000\122\004" +
    "\uff65\005\uff65\006\uff65\007\uff65\010\uff65\012\uff65\013\uff65" +
    "\014\uff65\015\uff65\016\uff65\017\uff65\020\uff65\021\uff65\022" +
    "\uff65\023\uff65\024\uff65\025\uff65\026\uff65\031\uff65\032\uff65" +
    "\033\uff65\034\uff65\035\uff65\036\uff65\037\uff65\040\uff65\041" +
    "\uff65\042\uff65\043\uff65\044\uff65\045\uff65\046\uff65\047\uff65" +
    "\050\uff65\051\uff65\052\uff65\053\uff65\054\uff65\055\uff65\056" +
    "\uff65\001\002\000\006\005\uff5d\007\uff5d\001\002\000\122" +
    "\004\uff62\005\uff62\006\uff62\007\uff62\010\uff62\012\uff62\013" +
    "\uff62\014\uff62\015\uff62\016\uff62\017\uff62\020\uff62\021\uff62" +
    "\022\uff62\023\uff62\024\uff62\025\uff62\026\uff62\031\uff62\032" +
    "\uff62\033\uff62\034\uff62\035\uff62\036\uff62\037\uff62\040\uff62" +
    "\041\uff62\042\uff62\043\uff62\044\uff62\045\uff62\046\uff62\047" +
    "\uff62\050\uff62\051\uff62\052\uff62\053\uff62\054\uff62\055\uff62" +
    "\056\uff62\001\002\000\122\004\uff64\005\uff64\006\uff64\007" +
    "\uff64\010\uff64\012\uff64\013\uff64\014\uff64\015\uff64\016\uff64" +
    "\017\uff64\020\uff64\021\uff64\022\uff64\023\uff64\024\uff64\025" +
    "\uff64\026\uff64\031\uff64\032\uff64\033\uff64\034\uff64\035\uff64" +
    "\036\uff64\037\uff64\040\uff64\041\uff64\042\uff64\043\uff64\044" +
    "\uff64\045\uff64\046\uff64\047\uff64\050\uff64\051\uff64\052\uff64" +
    "\053\uff64\054\uff64\055\uff64\056\uff64\001\002\000\006\007" +
    "\102\014\202\001\002\000\122\004\uff67\005\uff67\006\uff67" +
    "\007\uff67\010\uff67\012\uff67\013\uff67\014\uff67\015\uff67\016" +
    "\uff67\017\uff67\020\uff67\021\uff67\022\uff67\023\uff67\024\uff67" +
    "\025\uff67\026\uff67\031\uff67\032\uff67\033\uff67\034\uff67\035" +
    "\uff67\036\uff67\037\uff67\040\uff67\041\uff67\042\uff67\043\uff67" +
    "\044\uff67\045\uff67\046\uff67\047\uff67\050\uff67\051\uff67\052" +
    "\uff67\053\uff67\054\uff67\055\uff67\056\uff67\001\002\000\122" +
    "\004\uff61\005\uff61\006\uff61\007\uff61\010\uff61\012\uff61\013" +
    "\uff61\014\uff61\015\uff61\016\uff61\017\uff61\020\uff61\021\uff61" +
    "\022\uff61\023\uff61\024\uff61\025\uff61\026\uff61\031\uff61\032" +
    "\uff61\033\uff61\034\uff61\035\uff61\036\uff61\037\uff61\040\uff61" +
    "\041\uff61\042\uff61\043\uff61\044\uff61\045\uff61\046\uff61\047" +
    "\uff61\050\uff61\051\uff61\052\uff61\053\uff61\054\uff61\055\uff61" +
    "\056\uff61\001\002\000\122\004\uff63\005\uff63\006\uff63\007" +
    "\uff63\010\uff63\012\uff63\013\uff63\014\uff63\015\uff63\016\uff63" +
    "\017\uff63\020\uff63\021\uff63\022\uff63\023\uff63\024\uff63\025" +
    "\uff63\026\uff63\031\uff63\032\uff63\033\uff63\034\uff63\035\uff63" +
    "\036\uff63\037\uff63\040\uff63\041\uff63\042\uff63\043\uff63\044" +
    "\uff63\045\uff63\046\uff63\047\uff63\050\uff63\051\uff63\052\uff63" +
    "\053\uff63\054\uff63\055\uff63\056\uff63\001\002\000\036\004" +
    "\uff9b\015\uff9b\020\uff9b\023\uff9b\024\uff9b\027\uff9b\030\uff9b" +
    "\042\uff9b\043\uff9b\057\uff9b\061\uff9b\062\uff9b\063\uff9b\100" +
    "\uff9b\001\002\000\036\004\uffa4\015\uffa4\020\uffa4\023\uffa4" +
    "\024\uffa4\027\uffa4\030\uffa4\042\uffa4\043\uffa4\057\uffa4\061" +
    "\uffa4\062\uffa4\063\uffa4\100\uffa4\001\002\000\036\004\uffa1" +
    "\015\uffa1\020\uffa1\023\uffa1\024\uffa1\027\uffa1\030\uffa1\042" +
    "\uffa1\043\uffa1\057\uffa1\061\uffa1\062\uffa1\063\uffa1\100\uffa1" +
    "\001\002\000\036\004\uffa0\015\uffa0\020\uffa0\023\uffa0\024" +
    "\uffa0\027\uffa0\030\uffa0\042\uffa0\043\uffa0\057\uffa0\061\uffa0" +
    "\062\uffa0\063\uffa0\100\uffa0\001\002\000\036\004\uffa3\015" +
    "\uffa3\020\uffa3\023\uffa3\024\uffa3\027\uffa3\030\uffa3\042\uffa3" +
    "\043\uffa3\057\uffa3\061\uffa3\062\uffa3\063\uffa3\100\uffa3\001" +
    "\002\000\036\004\uff9d\015\uff9d\020\uff9d\023\uff9d\024\uff9d" +
    "\027\uff9d\030\uff9d\042\uff9d\043\uff9d\057\uff9d\061\uff9d\062" +
    "\uff9d\063\uff9d\100\uff9d\001\002\000\036\004\073\015\072" +
    "\020\040\023\064\024\052\027\051\030\044\042\062\043" +
    "\075\057\045\061\067\062\042\063\055\100\036\001\002" +
    "\000\036\004\uffa5\015\uffa5\020\uffa5\023\uffa5\024\uffa5\027" +
    "\uffa5\030\uffa5\042\uffa5\043\uffa5\057\uffa5\061\uffa5\062\uffa5" +
    "\063\uffa5\100\uffa5\001\002\000\036\004\uffa2\015\uffa2\020" +
    "\uffa2\023\uffa2\024\uffa2\027\uffa2\030\uffa2\042\uffa2\043\uffa2" +
    "\057\uffa2\061\uffa2\062\uffa2\063\uffa2\100\uffa2\001\002\000" +
    "\036\004\uff9c\015\uff9c\020\uff9c\023\uff9c\024\uff9c\027\uff9c" +
    "\030\uff9c\042\uff9c\043\uff9c\057\uff9c\061\uff9c\062\uff9c\063" +
    "\uff9c\100\uff9c\001\002\000\036\004\uff9e\015\uff9e\020\uff9e" +
    "\023\uff9e\024\uff9e\027\uff9e\030\uff9e\042\uff9e\043\uff9e\057" +
    "\uff9e\061\uff9e\062\uff9e\063\uff9e\100\uff9e\001\002\000\036" +
    "\004\uff9f\015\uff9f\020\uff9f\023\uff9f\024\uff9f\027\uff9f\030" +
    "\uff9f\042\uff9f\043\uff9f\057\uff9f\061\uff9f\062\uff9f\063\uff9f" +
    "\100\uff9f\001\002\000\014\005\uffa6\006\uffa6\007\uffa6\012" +
    "\uffa6\014\uffa6\001\002\000\106\005\uff70\006\uff70\007\uff70" +
    "\010\uff70\012\uff70\014\uff70\015\uff70\016\uff70\017\uff70\020" +
    "\uff70\021\uff70\022\uff70\023\uff70\024\uff70\025\uff70\026\uff70" +
    "\032\uff70\033\uff70\034\uff70\035\uff70\036\uff70\037\uff70\040" +
    "\uff70\041\uff70\045\uff70\046\uff70\047\uff70\050\uff70\051\uff70" +
    "\052\uff70\053\uff70\054\uff70\055\uff70\056\uff70\001\002\000" +
    "\052\004\073\015\072\020\040\023\064\024\052\027\051" +
    "\030\044\042\062\043\075\057\045\060\016\061\067\062" +
    "\042\063\055\064\012\065\017\066\004\067\011\070\010" +
    "\100\036\001\002\000\006\005\225\015\115\001\002\000" +
    "\106\005\uff6f\006\uff6f\007\uff6f\010\uff6f\012\uff6f\014\uff6f" +
    "\015\uff6f\016\uff6f\017\uff6f\020\uff6f\021\uff6f\022\uff6f\023" +
    "\uff6f\024\uff6f\025\uff6f\026\uff6f\032\uff6f\033\uff6f\034\uff6f" +
    "\035\uff6f\036\uff6f\037\uff6f\040\uff6f\041\uff6f\045\uff6f\046" +
    "\uff6f\047\uff6f\050\uff6f\051\uff6f\052\uff6f\053\uff6f\054\uff6f" +
    "\055\uff6f\056\uff6f\001\002\000\076\004\073\006\245\011" +
    "\uffc3\012\uffb4\015\072\020\040\023\064\024\052\027\051" +
    "\030\044\042\062\043\075\057\045\060\016\061\067\062" +
    "\042\063\055\064\012\065\017\066\004\067\011\070\010" +
    "\071\235\073\246\074\234\075\233\076\244\077\241\100" +
    "\036\101\014\001\002\000\022\002\ufffb\060\ufffb\064\ufffb" +
    "\065\ufffb\066\ufffb\067\ufffb\070\ufffb\101\ufffb\001\002\000" +
    "\076\004\073\006\245\011\uffc3\012\uffb6\015\072\020\040" +
    "\023\064\024\052\027\051\030\044\042\062\043\075\057" +
    "\045\060\016\061\067\062\042\063\055\064\012\065\017" +
    "\066\004\067\011\070\010\071\235\073\246\074\234\075" +
    "\233\076\244\077\241\100\036\101\014\001\002\000\062" +
    "\004\uffc0\006\uffc0\011\uffc0\012\uffc0\015\uffc0\020\uffc0\023" +
    "\uffc0\024\uffc0\027\uffc0\030\uffc0\042\uffc0\043\uffc0\057\uffc0" +
    "\061\uffc0\062\uffc0\063\uffc0\071\uffc0\072\uffc0\073\uffc0\074" +
    "\uffc0\075\uffc0\076\uffc0\077\uffc0\100\uffc0\001\002\000\062" +
    "\004\uffbf\006\uffbf\011\uffbf\012\uffbf\015\uffbf\020\uffbf\023" +
    "\uffbf\024\uffbf\027\uffbf\030\uffbf\042\uffbf\043\uffbf\057\uffbf" +
    "\061\uffbf\062\uffbf\063\uffbf\071\uffbf\072\uffbf\073\uffbf\074" +
    "\uffbf\075\uffbf\076\uffbf\077\uffbf\100\uffbf\001\002\000\004" +
    "\006\310\001\002\000\004\004\300\001\002\000\004\004" +
    "\272\001\002\000\004\012\271\001\002\000\006\006\270" +
    "\007\102\001\002\000\060\004\uffbe\006\uffbe\011\uffbe\012" +
    "\uffbe\015\uffbe\020\uffbe\023\uffbe\024\uffbe\027\uffbe\030\uffbe" +
    "\042\uffbe\043\uffbe\057\uffbe\061\uffbe\062\uffbe\063\uffbe\071" +
    "\uffbe\073\uffbe\074\uffbe\075\uffbe\076\uffbe\077\uffbe\100\uffbe" +
    "\001\002\000\040\004\073\006\265\015\072\020\040\023" +
    "\064\024\052\027\051\030\044\042\062\043\075\057\045" +
    "\061\067\062\042\063\055\100\036\001\002\000\014\004" +
    "\030\006\020\015\025\057\023\060\024\001\002\000\062" +
    "\004\uffc1\006\uffc1\011\uffc1\012\uffc1\015\uffc1\020\uffc1\023" +
    "\uffc1\024\uffc1\027\uffc1\030\uffc1\042\uffc1\043\uffc1\057\uffc1" +
    "\061\uffc1\062\uffc1\063\uffc1\071\uffc1\072\uffc1\073\uffc1\074" +
    "\uffc1\075\uffc1\076\uffc1\077\uffc1\100\uffc1\001\002\000\004" +
    "\006\263\001\002\000\064\004\uffbb\005\uffbb\006\uffbb\011" +
    "\uffbb\012\uffbb\015\uffbb\020\uffbb\023\uffbb\024\uffbb\027\uffbb" +
    "\030\uffbb\042\uffbb\043\uffbb\057\uffbb\061\uffbb\062\uffbb\063" +
    "\uffbb\071\uffbb\072\uffbb\073\uffbb\074\uffbb\075\uffbb\076\uffbb" +
    "\077\uffbb\100\uffbb\001\002\000\004\004\257\001\002\000" +
    "\062\004\uffc4\006\uffc4\011\uffc4\012\uffc4\015\uffc4\020\uffc4" +
    "\023\uffc4\024\uffc4\027\uffc4\030\uffc4\042\uffc4\043\uffc4\057" +
    "\uffc4\061\uffc4\062\uffc4\063\uffc4\071\uffc4\072\uffc4\073\uffc4" +
    "\074\uffc4\075\uffc4\076\uffc4\077\uffc4\100\uffc4\001\002\000" +
    "\076\004\ufff8\006\ufff8\011\ufff8\012\ufff8\015\ufff8\020\ufff8" +
    "\023\ufff8\024\ufff8\027\ufff8\030\ufff8\042\ufff8\043\ufff8\057" +
    "\ufff8\060\ufff8\061\ufff8\062\ufff8\063\ufff8\064\ufff8\065\ufff8" +
    "\066\ufff8\067\ufff8\070\ufff8\071\ufff8\073\ufff8\074\ufff8\075" +
    "\ufff8\076\ufff8\077\ufff8\100\ufff8\101\ufff8\001\002\000\004" +
    "\011\226\001\002\000\060\004\073\006\245\011\uffc3\012" +
    "\uffb8\015\072\020\040\023\064\024\052\027\051\030\044" +
    "\042\062\043\075\057\045\061\067\062\042\063\055\071" +
    "\235\073\246\074\234\075\233\076\244\077\241\100\036" +
    "\001\002\000\060\004\uffbd\006\uffbd\011\uffbd\012\uffbd\015" +
    "\uffbd\020\uffbd\023\uffbd\024\uffbd\027\uffbd\030\uffbd\042\uffbd" +
    "\043\uffbd\057\uffbd\061\uffbd\062\uffbd\063\uffbd\071\uffbd\073" +
    "\uffbd\074\uffbd\075\uffbd\076\uffbd\077\uffbd\100\uffbd\001\002" +
    "\000\004\012\255\001\002\000\102\002\uffb7\004\uffb7\006" +
    "\uffb7\011\uffb7\012\uffb7\015\uffb7\020\uffb7\023\uffb7\024\uffb7" +
    "\027\uffb7\030\uffb7\042\uffb7\043\uffb7\057\uffb7\060\uffb7\061" +
    "\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7\067\uffb7" +
    "\070\uffb7\071\uffb7\072\uffb7\073\uffb7\074\uffb7\075\uffb7\076" +
    "\uffb7\077\uffb7\100\uffb7\101\uffb7\001\002\000\062\004\uffc2" +
    "\006\uffc2\011\uffc2\012\uffc2\015\uffc2\020\uffc2\023\uffc2\024" +
    "\uffc2\027\uffc2\030\uffc2\042\uffc2\043\uffc2\057\uffc2\061\uffc2" +
    "\062\uffc2\063\uffc2\071\uffc2\072\uffc2\073\uffc2\074\uffc2\075" +
    "\uffc2\076\uffc2\077\uffc2\100\uffc2\001\002\000\036\004\073" +
    "\015\072\020\040\023\064\024\052\027\051\030\044\042" +
    "\062\043\075\057\045\061\067\062\042\063\055\100\036" +
    "\001\002\000\006\005\261\007\102\001\002\000\056\004" +
    "\073\006\245\011\uffc3\015\072\020\040\023\064\024\052" +
    "\027\051\030\044\042\062\043\075\057\045\061\067\062" +
    "\042\063\055\071\235\073\246\074\234\075\233\076\244" +
    "\077\241\100\036\001\002\000\062\004\uffb0\006\uffb0\011" +
    "\uffb0\012\uffb0\015\uffb0\020\uffb0\023\uffb0\024\uffb0\027\uffb0" +
    "\030\uffb0\042\uffb0\043\uffb0\057\uffb0\061\uffb0\062\uffb0\063" +
    "\uffb0\071\uffb0\072\uffb0\073\uffb0\074\uffb0\075\uffb0\076\uffb0" +
    "\077\uffb0\100\uffb0\001\002\000\062\004\uffac\006\uffac\011" +
    "\uffac\012\uffac\015\uffac\020\uffac\023\uffac\024\uffac\027\uffac" +
    "\030\uffac\042\uffac\043\uffac\057\uffac\061\uffac\062\uffac\063" +
    "\uffac\071\uffac\072\uffac\073\uffac\074\uffac\075\uffac\076\uffac" +
    "\077\uffac\100\uffac\001\002\000\010\006\uffdf\007\uffdf\010" +
    "\035\001\002\000\062\004\uffab\006\uffab\011\uffab\012\uffab" +
    "\015\uffab\020\uffab\023\uffab\024\uffab\027\uffab\030\uffab\042" +
    "\uffab\043\uffab\057\uffab\061\uffab\062\uffab\063\uffab\071\uffab" +
    "\072\uffab\073\uffab\074\uffab\075\uffab\076\uffab\077\uffab\100" +
    "\uffab\001\002\000\006\006\267\007\102\001\002\000\062" +
    "\004\uffaa\006\uffaa\011\uffaa\012\uffaa\015\uffaa\020\uffaa\023" +
    "\uffaa\024\uffaa\027\uffaa\030\uffaa\042\uffaa\043\uffaa\057\uffaa" +
    "\061\uffaa\062\uffaa\063\uffaa\071\uffaa\072\uffaa\073\uffaa\074" +
    "\uffaa\075\uffaa\076\uffaa\077\uffaa\100\uffaa\001\002\000\064" +
    "\004\uffbc\005\uffbc\006\uffbc\011\uffbc\012\uffbc\015\uffbc\020" +
    "\uffbc\023\uffbc\024\uffbc\027\uffbc\030\uffbc\042\uffbc\043\uffbc" +
    "\057\uffbc\061\uffbc\062\uffbc\063\uffbc\071\uffbc\072\uffbc\073" +
    "\uffbc\074\uffbc\075\uffbc\076\uffbc\077\uffbc\100\uffbc\001\002" +
    "\000\102\002\uffb3\004\uffb3\006\uffb3\011\uffb3\012\uffb3\015" +
    "\uffb3\020\uffb3\023\uffb3\024\uffb3\027\uffb3\030\uffb3\042\uffb3" +
    "\043\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\063\uffb3\064" +
    "\uffb3\065\uffb3\066\uffb3\067\uffb3\070\uffb3\071\uffb3\072\uffb3" +
    "\073\uffb3\074\uffb3\075\uffb3\076\uffb3\077\uffb3\100\uffb3\101" +
    "\uffb3\001\002\000\036\004\073\015\072\020\040\023\064" +
    "\024\052\027\051\030\044\042\062\043\075\057\045\061" +
    "\067\062\042\063\055\100\036\001\002\000\006\005\274" +
    "\007\102\001\002\000\056\004\073\006\245\011\uffc3\015" +
    "\072\020\040\023\064\024\052\027\051\030\044\042\062" +
    "\043\075\057\045\061\067\062\042\063\055\071\235\073" +
    "\246\074\234\075\233\076\244\077\241\100\036\001\002" +
    "\000\062\004\uffb2\006\uffb2\011\uffb2\012\uffb2\015\uffb2\020" +
    "\uffb2\023\uffb2\024\uffb2\027\uffb2\030\uffb2\042\uffb2\043\uffb2" +
    "\057\uffb2\061\uffb2\062\uffb2\063\uffb2\071\uffb2\072\276\073" +
    "\uffb2\074\uffb2\075\uffb2\076\uffb2\077\uffb2\100\uffb2\001\002" +
    "\000\056\004\073\006\245\011\uffc3\015\072\020\040\023" +
    "\064\024\052\027\051\030\044\042\062\043\075\057\045" +
    "\061\067\062\042\063\055\071\235\073\246\074\234\075" +
    "\233\076\244\077\241\100\036\001\002\000\062\004\uffb1" +
    "\006\uffb1\011\uffb1\012\uffb1\015\uffb1\020\uffb1\023\uffb1\024" +
    "\uffb1\027\uffb1\030\uffb1\042\uffb1\043\uffb1\057\uffb1\061\uffb1" +
    "\062\uffb1\063\uffb1\071\uffb1\072\uffb1\073\uffb1\074\uffb1\075" +
    "\uffb1\076\uffb1\077\uffb1\100\uffb1\001\002\000\040\004\073" +
    "\006\245\015\072\020\040\023\064\024\052\027\051\030" +
    "\044\042\062\043\075\057\045\061\067\062\042\063\055" +
    "\100\036\001\002\000\040\004\073\006\245\015\072\020" +
    "\040\023\064\024\052\027\051\030\044\042\062\043\075" +
    "\057\045\061\067\062\042\063\055\100\036\001\002\000" +
    "\040\004\073\005\304\015\072\020\040\023\064\024\052" +
    "\027\051\030\044\042\062\043\075\057\045\061\067\062" +
    "\042\063\055\100\036\001\002\000\006\005\306\007\102" +
    "\001\002\000\056\004\073\006\245\011\uffc3\015\072\020" +
    "\040\023\064\024\052\027\051\030\044\042\062\043\075" +
    "\057\045\061\067\062\042\063\055\071\235\073\246\074" +
    "\234\075\233\076\244\077\241\100\036\001\002\000\062" +
    "\004\uffaf\006\uffaf\011\uffaf\012\uffaf\015\uffaf\020\uffaf\023" +
    "\uffaf\024\uffaf\027\uffaf\030\uffaf\042\uffaf\043\uffaf\057\uffaf" +
    "\061\uffaf\062\uffaf\063\uffaf\071\uffaf\072\uffaf\073\uffaf\074" +
    "\uffaf\075\uffaf\076\uffaf\077\uffaf\100\uffaf\001\002\000\056" +
    "\004\073\006\245\011\uffc3\015\072\020\040\023\064\024" +
    "\052\027\051\030\044\042\062\043\075\057\045\061\067" +
    "\062\042\063\055\071\235\073\246\074\234\075\233\076" +
    "\244\077\241\100\036\001\002\000\062\004\uffae\006\uffae" +
    "\011\uffae\012\uffae\015\uffae\020\uffae\023\uffae\024\uffae\027" +
    "\uffae\030\uffae\042\uffae\043\uffae\057\uffae\061\uffae\062\uffae" +
    "\063\uffae\071\uffae\072\uffae\073\uffae\074\uffae\075\uffae\076" +
    "\uffae\077\uffae\100\uffae\001\002\000\062\004\uffad\006\uffad" +
    "\011\uffad\012\uffad\015\uffad\020\uffad\023\uffad\024\uffad\027" +
    "\uffad\030\uffad\042\uffad\043\uffad\057\uffad\061\uffad\062\uffad" +
    "\063\uffad\071\uffad\072\uffad\073\uffad\074\uffad\075\uffad\076" +
    "\uffad\077\uffad\100\uffad\001\002\000\076\004\ufff7\006\ufff7" +
    "\011\ufff7\012\ufff7\015\ufff7\020\ufff7\023\ufff7\024\ufff7\027" +
    "\ufff7\030\ufff7\042\ufff7\043\ufff7\057\ufff7\060\ufff7\061\ufff7" +
    "\062\ufff7\063\ufff7\064\ufff7\065\ufff7\066\ufff7\067\ufff7\070" +
    "\ufff7\071\ufff7\073\ufff7\074\ufff7\075\ufff7\076\ufff7\077\ufff7" +
    "\100\ufff7\101\ufff7\001\002\000\004\012\316\001\002\000" +
    "\060\004\073\006\245\011\uffc3\012\uffba\015\072\020\040" +
    "\023\064\024\052\027\051\030\044\042\062\043\075\057" +
    "\045\061\067\062\042\063\055\071\235\073\246\074\234" +
    "\075\233\076\244\077\241\100\036\001\002\000\004\012" +
    "\315\001\002\000\102\002\uffb9\004\uffb9\006\uffb9\011\uffb9" +
    "\012\uffb9\015\uffb9\020\uffb9\023\uffb9\024\uffb9\027\uffb9\030" +
    "\uffb9\042\uffb9\043\uffb9\057\uffb9\060\uffb9\061\uffb9\062\uffb9" +
    "\063\uffb9\064\uffb9\065\uffb9\066\uffb9\067\uffb9\070\uffb9\071" +
    "\uffb9\072\uffb9\073\uffb9\074\uffb9\075\uffb9\076\uffb9\077\uffb9" +
    "\100\uffb9\101\uffb9\001\002\000\102\002\uffb5\004\uffb5\006" +
    "\uffb5\011\uffb5\012\uffb5\015\uffb5\020\uffb5\023\uffb5\024\uffb5" +
    "\027\uffb5\030\uffb5\042\uffb5\043\uffb5\057\uffb5\060\uffb5\061" +
    "\uffb5\062\uffb5\063\uffb5\064\uffb5\065\uffb5\066\uffb5\067\uffb5" +
    "\070\uffb5\071\uffb5\072\uffb5\073\uffb5\074\uffb5\075\uffb5\076" +
    "\uffb5\077\uffb5\100\uffb5\101\uffb5\001\002\000\022\011\226" +
    "\060\016\064\012\065\017\066\004\067\011\070\010\101" +
    "\014\001\002\000\022\002\ufff9\060\ufff9\064\ufff9\065\ufff9" +
    "\066\ufff9\067\ufff9\070\ufff9\101\ufff9\001\002\000\032\005" +
    "\uffef\006\uffef\007\uffef\010\uffef\011\uffef\060\uffef\064\uffef" +
    "\065\uffef\066\uffef\067\uffef\070\uffef\101\uffef\001\002\000" +
    "\020\005\uffeb\060\uffe9\064\uffe9\065\uffe9\066\uffe9\067\uffe9" +
    "\070\uffe9\001\002\000\036\004\073\015\072\020\040\023" +
    "\064\024\052\027\051\030\044\042\062\043\075\057\045" +
    "\061\067\062\042\063\055\100\036\001\002\000\006\014" +
    "\uff9a\032\126\001\002\000\004\014\326\001\002\000\036" +
    "\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\013" +
    "\uffe6\060\uffe6\064\uffe6\065\uffe6\066\uffe6\067\uffe6\070\uffe6" +
    "\101\uffe6\001\002\000\004\005\341\001\002\000\016\060" +
    "\016\064\012\065\017\066\004\067\011\070\010\001\002" +
    "\000\006\005\uffe3\007\uffe3\001\002\000\012\004\030\015" +
    "\025\057\023\060\024\001\002\000\006\005\uffe8\007\334" +
    "\001\002\000\016\060\016\064\012\065\017\066\004\067" +
    "\011\070\010\001\002\000\004\005\336\001\002\000\036" +
    "\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\013" +
    "\uffe7\060\uffe7\064\uffe7\065\uffe7\066\uffe7\067\uffe7\070\uffe7" +
    "\101\uffe7\001\002\000\006\005\uffe2\007\uffe2\001\002\000" +
    "\006\005\ufff1\007\ufff1\001\002\000\036\004\uffea\005\uffea" +
    "\006\uffea\007\uffea\010\uffea\011\uffea\013\uffea\060\uffea\064" +
    "\uffea\065\uffea\066\uffea\067\uffea\070\uffea\101\uffea\001\002" +
    "\000\012\004\030\015\025\057\023\060\024\001\002\000" +
    "\100\002\ufff5\004\ufff5\006\ufff5\011\ufff5\012\ufff5\015\ufff5" +
    "\020\ufff5\023\ufff5\024\ufff5\027\ufff5\030\ufff5\042\ufff5\043" +
    "\ufff5\057\ufff5\060\ufff5\061\ufff5\062\ufff5\063\ufff5\064\ufff5" +
    "\065\ufff5\066\ufff5\067\ufff5\070\ufff5\071\ufff5\073\ufff5\074" +
    "\ufff5\075\ufff5\076\ufff5\077\ufff5\100\ufff5\101\ufff5\001\002" +
    "\000\006\006\uffe0\007\uffe0\001\002\000\014\004\030\006" +
    "\350\015\025\057\023\060\024\001\002\000\006\006\uffe5" +
    "\007\uffe5\001\002\000\006\006\ufff3\007\351\001\002\000" +
    "\100\002\ufff4\004\ufff4\006\ufff4\011\ufff4\012\ufff4\015\ufff4" +
    "\020\ufff4\023\ufff4\024\ufff4\027\ufff4\030\ufff4\042\ufff4\043" +
    "\ufff4\057\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4\064\ufff4" +
    "\065\ufff4\066\ufff4\067\ufff4\070\ufff4\071\ufff4\073\ufff4\074" +
    "\ufff4\075\ufff4\076\ufff4\077\ufff4\100\ufff4\101\ufff4\001\002" +
    "\000\012\004\030\015\025\057\023\060\024\001\002\000" +
    "\004\006\353\001\002\000\100\002\ufff2\004\ufff2\006\ufff2" +
    "\011\ufff2\012\ufff2\015\ufff2\020\ufff2\023\ufff2\024\ufff2\027" +
    "\ufff2\030\ufff2\042\ufff2\043\ufff2\057\ufff2\060\ufff2\061\ufff2" +
    "\062\ufff2\063\ufff2\064\ufff2\065\ufff2\066\ufff2\067\ufff2\070" +
    "\ufff2\071\ufff2\073\ufff2\074\ufff2\075\ufff2\076\ufff2\077\ufff2" +
    "\100\ufff2\101\ufff2\001\002\000\006\006\uffe4\007\uffe4\001" +
    "\002\000\022\002\uffff\060\uffff\064\uffff\065\uffff\066\uffff" +
    "\067\uffff\070\uffff\101\uffff\001\002\000\004\002\001\001" +
    "\002\000\016\060\016\064\012\065\017\066\004\067\011" +
    "\070\010\001\002\000\020\004\uffd6\005\uffd6\006\uffd6\011" +
    "\361\015\uffd6\057\uffd6\060\uffd6\001\002\000\016\060\016" +
    "\064\012\065\017\066\004\067\011\070\010\001\002\000" +
    "\012\004\030\015\025\057\023\060\024\001\002\000\020" +
    "\012\365\060\016\064\012\065\017\066\004\067\011\070" +
    "\010\001\002\000\012\004\374\015\370\057\372\060\366" +
    "\001\002\000\016\004\uffd5\005\uffd5\006\uffd5\015\uffd5\057" +
    "\uffd5\060\uffd5\001\002\000\014\004\uffcb\005\uffcb\006\uffcb" +
    "\007\uffcb\013\uffcb\001\002\000\006\006\u0108\007\u0107\001" +
    "\002\000\012\004\374\015\370\057\372\060\366\001\002" +
    "\000\014\004\u0100\005\uffce\006\uffce\007\uffce\013\377\001" +
    "\002\000\014\004\uffcc\005\uffcc\006\uffcc\007\uffcc\013\uffcc" +
    "\001\002\000\006\006\uffc6\007\uffc6\001\002\000\012\004" +
    "\374\015\370\057\372\060\366\001\002\000\004\005\376" +
    "\001\002\000\014\004\uffca\005\uffca\006\uffca\007\uffca\013" +
    "\uffca\001\002\000\036\004\073\015\072\020\040\023\064" +
    "\024\052\027\051\030\044\042\062\043\075\057\045\061" +
    "\067\062\042\063\055\100\036\001\002\000\020\005\u0101" +
    "\060\016\064\012\065\017\066\004\067\011\070\010\001" +
    "\002\000\014\004\uffc9\005\uffc9\006\uffc9\007\uffc9\013\uffc9" +
    "\001\002\000\006\005\u0103\007\334\001\002\000\014\004" +
    "\uffc8\005\uffc8\006\uffc8\007\uffc8\013\uffc8\001\002\000\004" +
    "\014\u0105\001\002\000\014\004\uffc7\005\uffc7\006\uffc7\007" +
    "\uffc7\013\uffc7\001\002\000\010\005\uffcd\006\uffcd\007\uffcd" +
    "\001\002\000\012\004\374\015\370\057\372\060\366\001" +
    "\002\000\020\012\uffcf\060\uffcf\064\uffcf\065\uffcf\066\uffcf" +
    "\067\uffcf\070\uffcf\001\002\000\006\006\uffc5\007\uffc5\001" +
    "\002\000\006\006\u010b\007\351\001\002\000\020\012\uffd0" +
    "\060\uffd0\064\uffd0\065\uffd0\066\uffd0\067\uffd0\070\uffd0\001" +
    "\002\000\020\012\u010d\060\016\064\012\065\017\066\004" +
    "\067\011\070\010\001\002\000\016\004\uffd4\005\uffd4\006" +
    "\uffd4\015\uffd4\057\uffd4\060\uffd4\001\002\000\016\060\016" +
    "\064\012\065\017\066\004\067\011\070\010\001\002\000" +
    "\016\004\uffd3\005\uffd3\006\uffd3\015\uffd3\057\uffd3\060\uffd3" +
    "\001\002\000\020\012\u0111\060\016\064\012\065\017\066" +
    "\004\067\011\070\010\001\002\000\016\004\uffd2\005\uffd2" +
    "\006\uffd2\015\uffd2\057\uffd2\060\uffd2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010f\000\014\002\012\003\004\004\006\020\005\023" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\354\004\006\020\005" +
    "\023\014\001\001\000\004\023\344\001\001\000\012\006" +
    "\020\013\026\014\025\015\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\320\015\021\001\001\000\006\066\033\067\032\001" +
    "\001\000\002\001\001\000\006\014\030\015\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\247\005" +
    "\316\023\241\001\001\000\004\031\226\001\001\000\044" +
    "\021\070\036\040\040\064\041\057\042\055\043\053\044" +
    "\046\045\060\046\062\047\047\050\056\051\065\052\042" +
    "\053\045\054\052\055\036\065\067\001\001\000\012\053" +
    "\221\054\052\055\036\065\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\057\212\001\001\000\002\001\001\000\004\062\153\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\063\157\001\001\000\002\001\001\000\004\060\141" +
    "\001\001\000\012\053\161\054\052\055\036\065\067\001" +
    "\001\000\004\061\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\064\121\001\001\000\002\001\001\000" +
    "\014\052\117\053\116\054\052\055\036\065\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\023\111\024" +
    "\112\035\100\036\077\040\064\041\057\042\055\043\053" +
    "\044\046\045\060\046\062\047\047\050\056\051\065\052" +
    "\042\053\045\054\052\055\036\065\067\001\001\000\046" +
    "\021\105\022\104\036\040\040\064\041\057\042\055\043" +
    "\053\044\046\045\060\046\062\047\047\050\056\051\065" +
    "\052\042\053\045\054\052\055\036\065\067\001\001\000" +
    "\012\053\075\054\052\055\036\065\067\001\001\000\002" +
    "\001\001\000\044\035\100\036\077\040\064\041\057\042" +
    "\055\043\053\044\046\045\060\046\062\047\047\050\056" +
    "\051\065\052\042\053\045\054\052\055\036\065\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\036\103" +
    "\040\064\041\057\042\055\043\053\044\046\045\060\046" +
    "\062\047\047\050\056\051\065\052\042\053\045\054\052" +
    "\055\036\065\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\021\110" +
    "\036\040\040\064\041\057\042\055\043\053\044\046\045" +
    "\060\046\062\047\047\050\056\051\065\052\042\053\045" +
    "\054\052\055\036\065\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\052\115\053\116\054\052\055\036\065\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\052\124\053\116\054" +
    "\052\055\036\065\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\041\126\042\055\043" +
    "\053\044\046\045\060\046\062\047\047\050\056\051\065" +
    "\052\042\053\116\054\052\055\036\065\067\001\001\000" +
    "\002\001\001\000\034\042\130\043\053\044\046\045\060" +
    "\046\062\047\047\050\056\051\065\052\042\053\116\054" +
    "\052\055\036\065\067\001\001\000\002\001\001\000\032" +
    "\043\132\044\046\045\060\046\062\047\047\050\056\051" +
    "\065\052\042\053\116\054\052\055\036\065\067\001\001" +
    "\000\002\001\001\000\030\044\134\045\060\046\062\047" +
    "\047\050\056\051\065\052\042\053\116\054\052\055\036" +
    "\065\067\001\001\000\002\001\001\000\026\045\136\046" +
    "\062\047\047\050\056\051\065\052\042\053\116\054\052" +
    "\055\036\065\067\001\001\000\004\060\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\046\142\047\047" +
    "\050\056\051\065\052\042\053\116\054\052\055\036\065" +
    "\067\001\001\000\004\061\145\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\047\150\050\056\051\065\052" +
    "\042\053\116\054\052\055\036\065\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\062\153\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\050\154\051\065" +
    "\052\042\053\116\054\052\055\036\065\067\001\001\000" +
    "\004\063\157\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\051\160\052\042\053\116\054\052\055\036\065" +
    "\067\001\001\000\004\064\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\035\200\036\077\040\064\041\057\042\055\043\053" +
    "\044\046\045\060\046\062\047\047\050\056\051\065\052" +
    "\042\053\045\054\052\055\036\065\067\001\001\000\002" +
    "\001\001\000\044\036\170\040\064\041\057\042\055\043" +
    "\053\044\046\045\060\046\062\047\047\050\056\051\065" +
    "\052\042\053\045\054\052\055\036\056\172\065\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\036\175\040\064\041\057\042\055\043\053\044" +
    "\046\045\060\046\062\047\047\050\056\051\065\052\042" +
    "\053\045\054\052\055\036\065\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\036\220\040\064\041\057\042\055\043\053" +
    "\044\046\045\060\046\062\047\047\050\056\051\065\052" +
    "\042\053\045\054\052\055\036\065\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\023\111\024\223\035\100\036\077\040\064\041" +
    "\057\042\055\043\053\044\046\045\060\046\062\047\047" +
    "\050\056\051\065\052\042\053\045\054\052\055\036\065" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\072" +
    "\004\247\005\227\023\241\026\237\027\251\030\246\032" +
    "\242\033\230\034\231\035\236\036\077\040\064\041\057" +
    "\042\055\043\053\044\046\045\060\046\062\047\047\050" +
    "\056\051\065\052\042\053\045\054\052\055\036\065\067" +
    "\074\250\100\235\001\001\000\002\001\001\000\070\004" +
    "\310\023\241\026\237\027\312\030\246\032\242\033\230" +
    "\034\231\035\236\036\077\040\064\041\057\042\055\043" +
    "\053\044\046\045\060\046\062\047\047\050\056\051\065" +
    "\052\042\053\045\054\052\055\036\065\067\074\250\077" +
    "\311\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\035\265" +
    "\036\077\040\064\041\057\042\055\043\053\044\046\045" +
    "\060\046\062\047\047\050\056\051\065\052\042\053\045" +
    "\054\052\055\036\065\067\001\001\000\012\006\020\013" +
    "\026\014\263\015\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\255\001\001\000\062" +
    "\026\252\030\246\032\242\033\230\034\231\035\236\036" +
    "\077\040\064\041\057\042\055\043\053\044\046\045\060" +
    "\046\062\047\047\050\056\051\065\052\042\053\045\054" +
    "\052\055\036\065\067\074\250\076\253\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\035\257\036\077\040\064\041\057\042\055" +
    "\043\053\044\046\045\060\046\062\047\047\050\056\051" +
    "\065\052\042\053\045\054\052\055\036\065\067\001\001" +
    "\000\002\001\001\000\060\026\261\030\246\032\242\033" +
    "\230\034\231\035\236\036\077\040\064\041\057\042\055" +
    "\043\053\044\046\045\060\046\062\047\047\050\056\051" +
    "\065\052\042\053\045\054\052\055\036\065\067\074\250" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\035\272\036" +
    "\077\040\064\041\057\042\055\043\053\044\046\045\060" +
    "\046\062\047\047\050\056\051\065\052\042\053\045\054" +
    "\052\055\036\065\067\001\001\000\002\001\001\000\060" +
    "\026\274\030\246\032\242\033\230\034\231\035\236\036" +
    "\077\040\064\041\057\042\055\043\053\044\046\045\060" +
    "\046\062\047\047\050\056\051\065\052\042\053\045\054" +
    "\052\055\036\065\067\074\250\001\001\000\002\001\001" +
    "\000\060\026\276\030\246\032\242\033\230\034\231\035" +
    "\236\036\077\040\064\041\057\042\055\043\053\044\046" +
    "\045\060\046\062\047\047\050\056\051\065\052\042\053" +
    "\045\054\052\055\036\065\067\074\250\001\001\000\002" +
    "\001\001\000\046\030\300\035\236\036\077\040\064\041" +
    "\057\042\055\043\053\044\046\045\060\046\062\047\047" +
    "\050\056\051\065\052\042\053\045\054\052\055\036\065" +
    "\067\001\001\000\046\030\301\035\236\036\077\040\064" +
    "\041\057\042\055\043\053\044\046\045\060\046\062\047" +
    "\047\050\056\051\065\052\042\053\045\054\052\055\036" +
    "\065\067\001\001\000\044\035\302\036\077\040\064\041" +
    "\057\042\055\043\053\044\046\045\060\046\062\047\047" +
    "\050\056\051\065\052\042\053\045\054\052\055\036\065" +
    "\067\001\001\000\002\001\001\000\060\026\304\030\246" +
    "\032\242\033\230\034\231\035\236\036\077\040\064\041" +
    "\057\042\055\043\053\044\046\045\060\046\062\047\047" +
    "\050\056\051\065\052\042\053\045\054\052\055\036\065" +
    "\067\074\250\001\001\000\002\001\001\000\060\026\306" +
    "\030\246\032\242\033\230\034\231\035\236\036\077\040" +
    "\064\041\057\042\055\043\053\044\046\045\060\046\062" +
    "\047\047\050\056\051\065\052\042\053\045\054\052\055" +
    "\036\065\067\074\250\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\062\026" +
    "\252\030\246\032\242\033\230\034\231\035\236\036\077" +
    "\040\064\041\057\042\055\043\053\044\046\045\060\046" +
    "\062\047\047\050\056\051\065\052\042\053\045\054\052" +
    "\055\036\065\067\074\250\075\313\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\310" +
    "\023\241\031\317\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\071\326\072\327\001\001\000\042\037\324" +
    "\040\323\041\057\042\055\043\053\044\046\045\060\046" +
    "\062\047\047\050\056\051\065\052\042\053\116\054\052" +
    "\055\036\065\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\330" +
    "\010\332\023\331\001\001\000\002\001\001\000\006\014" +
    "\337\015\021\001\001\000\004\073\334\001\001\000\006" +
    "\007\336\023\331\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\013\343\014\263\015\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\011\346\014\345\015\021" +
    "\001\001\000\002\001\001\000\004\070\351\001\001\000" +
    "\002\001\001\000\006\014\353\015\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\023\361\025\u010b\001\001" +
    "\000\002\001\001\000\006\023\361\025\362\001\001\000" +
    "\010\011\u0109\014\345\015\021\001\001\000\004\023\363" +
    "\001\001\000\010\012\366\016\372\017\370\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\u0105\017\370\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\374\017\370\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\037\u0103\040" +
    "\323\041\057\042\055\043\053\044\046\045\060\046\062" +
    "\047\047\050\056\051\065\052\042\053\116\054\052\055" +
    "\036\065\067\001\001\000\010\007\330\010\u0101\023\331" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\u0108\017\370\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\363\001\001\000\002\001\001\000\006\023\361\025" +
    "\u010f\001\001\000\002\001\001\000\004\023\363\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 ((Yylex)getScanner()).setTable(this.table = new SyntacticTable()); 
    }



	SyntacticTable table;

    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer("\tParsing error");
    	if (info instanceof java_cup.runtime.Symbol) {
    		java_cup.runtime.Symbol s = (java_cup.runtime.Symbol) info;

   			if (s.left >= 0) {
   				m.append(" in line " + (s.left +1 ));
   				if (s.right >= 0) { m.append(", column " + (s.right + 1));
   				}
   			}
   		}
   		m.append(" : " + message);
   		System.err.println(m);
   	}

   	public Parser(Reader input) {
   		this(new Yylex(input));
   	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= external_definition 
            {
              Program RESULT =null;
		Program decl = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = decl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= program external_definition 
            {
              Program RESULT =null;
		Program prog = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Program decl = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (new Program()).add(prog).add(decl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // external_definition ::= declaration 
            {
              Program RESULT =null;
		DeclList decl = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (new Program()).add(decl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("external_definition",1, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // external_definition ::= function_definition 
            {
              Program RESULT =null;
		FunctionDefi func = (FunctionDefi)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (new Program()).add(func); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("external_definition",1, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              FunctionDefi RESULT =null;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 table.retrive(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",52, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // function_definition ::= type_specifier declarator NT$0 compound_statement 
            {
              FunctionDefi RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (FunctionDefi) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		CompoundStat stat = (CompoundStat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							if (dect.type == null) {
								dect.type = type;
							} else {
								dect.type.encore(type);
							}
							RESULT = new FunctionDefi(dect.type, dect.name, new ParaList(), stat); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_definition",14, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$1 ::= 
            {
              FunctionDefi RESULT =null;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 table.retrive(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",53, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // function_definition ::= type_specifier declarator NT$1 declaration_list compound_statement 
            {
              FunctionDefi RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (FunctionDefi) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		DeclList para = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		CompoundStat stat = (CompoundStat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							if (dect.type == null) {
								dect.type = type;
							} else {
								dect.type.encore(type);
							}
							RESULT = new FunctionDefi(dect.type, dect.name, para, stat); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_definition",14, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaration_list ::= declaration 
            {
              DeclList RESULT =null;
		DeclList decl = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (new DeclList()).add(decl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list",3, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaration_list ::= declaration_list declaration 
            {
              DeclList RESULT =null;
		DeclList list = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		DeclList decl = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = list.add(decl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list",3, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaration ::= type_specifier COLON 
            {
              DeclList RESULT =null;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new DeclList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaration ::= type_specifier init_declarator_list COLON 
            {
              DeclList RESULT =null;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		DeclList init = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					for (Declaration dect : init.list) {
						if (dect.type == null) {
							dect.type = type;
						} else {
							dect.type.encore(type);
						}
					}
					RESULT = init;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaration ::= TYPEDEF type_specifier COLON 
            {
              DeclList RESULT =null;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new DeclList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$2 ::= 
            {
              DeclList RESULT =null;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		DeclList init = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

					RESULT = new DeclList();
					for (Declaration dect : init.list) {
						if (dect.type == null) {
							dect.type = type;
						} else {
							dect.type.encore(type);
						}
						table.addEntry(dect.name.toString(), Symbols.TYPENAME);
						RESULT.add(new TypeDecl(dect.type, dect.name));
					}
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",54, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaration ::= TYPEDEF type_specifier declarator_list NT$2 COLON 
            {
              DeclList RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (DeclList) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		DeclList init = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // plain_declaration ::= type_specifier declarator 
            {
              DeclList RESULT =null;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							if (dect.type == null) {
								dect.type = type;
							} else {
								dect.type.encore(type);
							}
							RESULT = (new DeclList()).add(dect);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plain_declaration",5, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declarator ::= direct_declarator 
            {
              Declaration RESULT =null;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = dect;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator",10, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declarator ::= MUL declarator 
            {
              Declaration RESULT =null;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			dect.type = new PointerType(dect.type);
					RESULT = dect;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator",10, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // direct_declarator ::= IDENTIFIER 
            {
              Declaration RESULT =null;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new VariableDecl(null, new Symbol(name), new InitList()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_declarator",11, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // direct_declarator ::= TYPENAME 
            {
              Declaration RESULT =null;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			table.addEntry(name, Symbols.IDENTIFIER);
						RESULT = new VariableDecl(null, new Symbol(name), new InitList()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_declarator",11, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // direct_declarator ::= PARAL declarator PARAR 
            {
              Declaration RESULT =null;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new VariableDecl(dect.type, dect.name, new InitList()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_declarator",11, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$3 ::= 
            {
              Declaration RESULT =null;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
 table.addScope(); table.delScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",55, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // direct_declarator ::= direct_declarator PARAL NT$3 PARAR 
            {
              Declaration RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Declaration) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		  RESULT = new FunctionDecl(dect.type, dect.name, new DeclList()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_declarator",11, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$4 ::= 
            {
              Declaration RESULT =null;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
 table.addScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",56, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$5 ::= 
            {
              Declaration RESULT =(Declaration) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		DeclList para = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 table.delScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",57, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // direct_declarator ::= direct_declarator PARAL NT$4 parameter_list NT$5 PARAR 
            {
              Declaration RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Declaration) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		DeclList para = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
			RESULT = new FunctionDecl(dect.type, dect.name, para); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_declarator",11, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // direct_declarator ::= direct_declarator SQUARL constant_expression SQUARR 
            {
              Declaration RESULT =null;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			RESULT = new VariableDecl(new ArrayType(dect.type, expr), dect.name, new InitList()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_declarator",11, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declarator_list ::= declarator 
            {
              DeclList RESULT =null;
		Declaration decl = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = (new DeclList()).add(decl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator_list",7, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declarator_list ::= declarator_list COMMA declarator 
            {
              DeclList RESULT =null;
		DeclList list = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Declaration decl = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = list.add(decl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator_list",7, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parameter_list ::= plain_declaration 
            {
              DeclList RESULT =null;
		DeclList decl = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = (new ParaList()).add(decl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",6, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parameter_list ::= parameter_list COMMA plain_declaration 
            {
              DeclList RESULT =null;
		DeclList list = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		DeclList decl = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = list.add(decl);	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",6, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // init_declarator_list ::= init_declarator 
            {
              DeclList RESULT =null;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = (new DeclList()).add(dect); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_declarator_list",4, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // init_declarator_list ::= init_declarator_list COMMA init_declarator 
            {
              DeclList RESULT =null;
		DeclList list = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = list.add(dect); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_declarator_list",4, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // init_declarator ::= declarator 
            {
              Declaration RESULT =null;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = dect; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_declarator",9, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // init_declarator ::= declarator ASSIGN initializer 
            {
              Declaration RESULT =null;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Initializer init = (Initializer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			dect.init = init;
						RESULT = dect; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_declarator",9, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // initializer ::= assignment_expression 
            {
              Initializer RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new InitValue(expr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializer",15, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // initializer ::= CURLYL initializer_list CURLYR 
            {
              Initializer RESULT =null;
		InitList list = (InitList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			RESULT = list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializer",15, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // initializer_list ::= initializer 
            {
              InitList RESULT =null;
		Initializer init = (Initializer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = (new InitList()).add(init); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializer_list",16, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // initializer_list ::= initializer_list COMMA initializer 
            {
              InitList RESULT =null;
		InitList list = (InitList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Initializer init = (Initializer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = list.add(init); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializer_list",16, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // type_specifier ::= VOID 
            {
              Type RESULT =null;
			RESULT = new VoidType(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",17, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // type_specifier ::= INT 
            {
              Type RESULT =null;
			RESULT = new IntType(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",17, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // type_specifier ::= CHAR 
            {
              Type RESULT =null;
			RESULT = new CharType(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",17, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // type_specifier ::= STRUCT IDENTIFIER 
            {
              Type RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new StructType(new Symbol(id), new DeclList()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",17, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // type_specifier ::= STRUCT IDENTIFIER CURLYL field_list CURLYR 
            {
              Type RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		DeclList list = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			RESULT = new StructType(new Symbol(id), list); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",17, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // type_specifier ::= STRUCT CURLYL field_list CURLYR 
            {
              Type RESULT =null;
		DeclList list = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			RESULT = new StructType(new Symbol(""), list); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",17, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // type_specifier ::= UNION IDENTIFIER 
            {
              Type RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new UnionType(new Symbol(id), new DeclList()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",17, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // type_specifier ::= UNION CURLYL field_list CURLYR 
            {
              Type RESULT =null;
		DeclList list = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			RESULT = new UnionType(new Symbol(""), list); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",17, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // type_specifier ::= TYPENAME 
            {
              Type RESULT =null;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new DefinedType(new Symbol(name)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",17, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // field_list ::= type_specifier declarator_list COLON 
            {
              DeclList RESULT =null;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		DeclList list = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			for (Declaration decl : list.list) {
						if (decl.type == null) {
							decl.type = type;
						} else {
							decl.type.encore(type);
						}
					}
					RESULT = list;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list",19, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // field_list ::= field_list type_specifier struct_declarator_list COLON 
            {
              DeclList RESULT =null;
		DeclList list = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		DeclList list2 = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			for (Declaration decl : list2.list) {
						if (decl.type == null) {
							decl.type = type;
						} else {
							decl.type.encore(type);
						}
					}
					list = list.add(list2);
					RESULT = list;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list",19, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // struct_declarator ::= struct_direct_declarator 
            {
              Declaration RESULT =null;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = dect;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_declarator",12, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // struct_declarator ::= MUL struct_declarator 
            {
              Declaration RESULT =null;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			dect.type = new PointerType(dect.type);
							RESULT = dect;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_declarator",12, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // struct_direct_declarator ::= IDENTIFIER 
            {
              Declaration RESULT =null;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new VariableDecl(null, new Symbol(name), new InitList()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_direct_declarator",13, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // struct_direct_declarator ::= TYPENAME 
            {
              Declaration RESULT =null;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new VariableDecl(null, new Symbol(name), new InitList()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_direct_declarator",13, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // struct_direct_declarator ::= PARAL struct_declarator PARAR 
            {
              Declaration RESULT =null;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new VariableDecl(dect.type, dect.name, new InitList()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_direct_declarator",13, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // struct_direct_declarator ::= struct_direct_declarator PARAL PARAR 
            {
              Declaration RESULT =null;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  RESULT = new FunctionDecl(dect.type, dect.name, new DeclList()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_direct_declarator",13, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // struct_direct_declarator ::= struct_direct_declarator PARAL parameter_list PARAR 
            {
              Declaration RESULT =null;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		DeclList para = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			RESULT = new FunctionDecl(dect.type, dect.name, para); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_direct_declarator",13, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // struct_direct_declarator ::= struct_direct_declarator SQUARL constant_expression SQUARR 
            {
              Declaration RESULT =null;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			RESULT = new VariableDecl(new ArrayType(dect.type, expr), dect.name, new InitList()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_direct_declarator",13, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // struct_declarator_list ::= struct_declarator 
            {
              DeclList RESULT =null;
		Declaration decl = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = (new DeclList()).add(decl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_declarator_list",8, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // struct_declarator_list ::= struct_declarator_list COMMA struct_declarator 
            {
              DeclList RESULT =null;
		DeclList list = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Declaration decl = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = list.add(decl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_declarator_list",8, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // statement ::= expression_statement 
            {
              Statement RESULT =null;
		ExpressionStat stat = (ExpressionStat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = stat; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",20, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$6 ::= 
            {
              Statement RESULT =null;
 table.addScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",58, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // statement ::= NT$6 compound_statement 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		CompoundStat stat = (CompoundStat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = stat; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",20, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // statement ::= selection_statement 
            {
              Statement RESULT =null;
		SelectionStat stat = (SelectionStat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = stat; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",20, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // statement ::= iteration_statement 
            {
              Statement RESULT =null;
		IterationStat stat = (IterationStat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = stat; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",20, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // statement ::= jump_statement 
            {
              Statement RESULT =null;
		JumpStat stat = (JumpStat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = stat; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",20, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // statement_list ::= statement 
            {
              StatList RESULT =null;
		Statement stat = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = (new StatList()).add(stat); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",21, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // statement_list ::= statement_list statement 
            {
              StatList RESULT =null;
		StatList list = (StatList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Statement stat = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = list.add(stat); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",21, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expression_statement ::= expression COLON 
            {
              ExpressionStat RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			RESULT = new ExpressionStat(expr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_statement",22, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expression_statement ::= COLON 
            {
              ExpressionStat RESULT =null;
			RESULT = new ExpressionStat(new EmptyExpr()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_statement",22, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$7 ::= 
            {
              CompoundStat RESULT =null;
		DeclList dlst = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		StatList slst = (StatList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 table.delScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",59, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // compound_statement ::= CURLYL declaration_list statement_list NT$7 CURLYR 
            {
              CompoundStat RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (CompoundStat) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		DeclList dlst = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		StatList slst = (StatList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
			RESULT = new CompoundStat(dlst, slst); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_statement",23, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$8 ::= 
            {
              CompoundStat RESULT =null;
		StatList slst = (StatList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 table.delScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",60, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // compound_statement ::= CURLYL statement_list NT$8 CURLYR 
            {
              CompoundStat RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (CompoundStat) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		StatList slst = (StatList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
			RESULT = new CompoundStat(new DeclList(), slst); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_statement",23, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$9 ::= 
            {
              CompoundStat RESULT =null;
		DeclList dlst = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 table.delScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",61, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // compound_statement ::= CURLYL declaration_list NT$9 CURLYR 
            {
              CompoundStat RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (CompoundStat) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		DeclList dlst = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
			RESULT = new CompoundStat(dlst, new StatList()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_statement",23, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$10 ::= 
            {
              CompoundStat RESULT =null;
 table.delScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10",62, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // compound_statement ::= CURLYL NT$10 CURLYR 
            {
              CompoundStat RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (CompoundStat) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			RESULT = new CompoundStat(new DeclList(), new StatList()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_statement",23, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // selection_statement ::= IF PARAL expression PARAR statement 
            {
              SelectionStat RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Statement iftr = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new SelectionStat(expr, iftr, new ExpressionStat(new EmptyExpr())); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selection_statement",24, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // selection_statement ::= IF PARAL expression PARAR statement ELSE statement 
            {
              SelectionStat RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Statement iftr = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Statement iffl = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new SelectionStat(expr, iftr, iffl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selection_statement",24, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // iteration_statement ::= WHILE PARAL expression PARAR statement 
            {
              IterationStat RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Statement stat = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new IterationStat(new EmptyExpr(), expr, new EmptyExpr(), stat); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",25, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // iteration_statement ::= FOR PARAL expression_statement expression_statement PARAR statement 
            {
              IterationStat RESULT =null;
		ExpressionStat init = (ExpressionStat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		ExpressionStat expr = (ExpressionStat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Statement stat = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new IterationStat(init.expr, expr.expr, new EmptyExpr(), stat); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",25, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // iteration_statement ::= FOR PARAL expression_statement expression_statement expression PARAR statement 
            {
              IterationStat RESULT =null;
		ExpressionStat init = (ExpressionStat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		ExpressionStat expr = (ExpressionStat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Expression inct = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Statement stat = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new IterationStat(init.expr, expr.expr, inct, stat); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",25, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // jump_statement ::= CONTINUE COLON 
            {
              JumpStat RESULT =null;
			RESULT = new ContinueStat(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_statement",26, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // jump_statement ::= BREAK COLON 
            {
              JumpStat RESULT =null;
			RESULT = new BreakStat(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_statement",26, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // jump_statement ::= RETURN COLON 
            {
              JumpStat RESULT =null;
			RESULT = new ReturnStat(new EmptyExpr()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_statement",26, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // jump_statement ::= RETURN expression COLON 
            {
              JumpStat RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			RESULT = new ReturnStat(expr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_statement",26, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expression ::= assignment_expression 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expression ::= expression COMMA assignment_expression 
            {
              Expression RESULT =null;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new BinaryExpr(expr1, Symbols.COMMA, expr2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // assignment_expression ::= logical_or_expression 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",28, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // assignment_expression ::= unary_expression assignment_operator assignment_expression 
            {
              Expression RESULT =null;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new BinaryExpr(expr1, op, expr2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",28, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // assignment_operator ::= ASSIGN 
            {
              Integer RESULT =null;
			RESULT = Symbols.ASSIGN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",45, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // assignment_operator ::= MUL_ASSIGN 
            {
              Integer RESULT =null;
			RESULT = Symbols.MUL_ASSIGN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",45, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // assignment_operator ::= DIV_ASSIGN 
            {
              Integer RESULT =null;
			RESULT = Symbols.DIV_ASSIGN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",45, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // assignment_operator ::= MOD_ASSIGN 
            {
              Integer RESULT =null;
			RESULT = Symbols.MOD_ASSIGN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",45, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // assignment_operator ::= ADD_ASSIGN 
            {
              Integer RESULT =null;
			RESULT = Symbols.ADD_ASSIGN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",45, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // assignment_operator ::= SUB_ASSIGN 
            {
              Integer RESULT =null;
			RESULT = Symbols.SUB_ASSIGN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",45, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // assignment_operator ::= SHL_ASSIGN 
            {
              Integer RESULT =null;
			RESULT = Symbols.SHL_ASSIGN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",45, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // assignment_operator ::= SHR_ASSIGN 
            {
              Integer RESULT =null;
			RESULT = Symbols.SHR_ASSIGN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",45, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // assignment_operator ::= AND_ASSIGN 
            {
              Integer RESULT =null;
			RESULT = Symbols.AND_ASSIGN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",45, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // assignment_operator ::= OR_ASSIGN 
            {
              Integer RESULT =null;
			RESULT = Symbols.OR_ASSIGN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",45, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // assignment_operator ::= XOR_ASSIGN 
            {
              Integer RESULT =null;
			RESULT = Symbols.XOR_ASSIGN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",45, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // constant_expression ::= logical_or_expression 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_expression",29, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // logical_or_expression ::= logical_and_expression 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_or_expression",30, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // logical_or_expression ::= logical_or_expression OR_OP logical_and_expression 
            {
              Expression RESULT =null;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new BinaryExpr(expr1, Symbols.OR_OP, expr2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_or_expression",30, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // logical_and_expression ::= inclusive_or_expression 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_and_expression",31, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // logical_and_expression ::= logical_and_expression AND_OP inclusive_or_expression 
            {
              Expression RESULT =null;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new BinaryExpr(expr1, Symbols.AND_OP, expr2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_and_expression",31, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // inclusive_or_expression ::= exclusive_or_expression 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inclusive_or_expression",32, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // inclusive_or_expression ::= inclusive_or_expression OR exclusive_or_expression 
            {
              Expression RESULT =null;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new BinaryExpr(expr1, Symbols.OR, expr2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inclusive_or_expression",32, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // exclusive_or_expression ::= and_expression 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exclusive_or_expression",33, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // exclusive_or_expression ::= exclusive_or_expression XOR and_expression 
            {
              Expression RESULT =null;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new BinaryExpr(expr1, Symbols.XOR, expr2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exclusive_or_expression",33, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // and_expression ::= equality_expression 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = expr;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("and_expression",34, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // and_expression ::= and_expression ADRESS equality_expression 
            {
              Expression RESULT =null;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new BinaryExpr(expr1, Symbols.ADRESS, expr2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("and_expression",34, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // equality_expression ::= relational_expression 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = expr;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_expression",35, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // equality_expression ::= equality_expression equality_operator relational_expression 
            {
              Expression RESULT =null;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new BinaryExpr(expr1, op, expr2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_expression",35, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // equality_operator ::= EQ_OP 
            {
              Integer RESULT =null;
			RESULT = Symbols.EQ_OP;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_operator",46, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // equality_operator ::= NE_OP 
            {
              Integer RESULT =null;
			RESULT = Symbols.NE_OP;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_operator",46, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // relational_expression ::= shift_expression 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = expr;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expression",36, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // relational_expression ::= relational_expression relational_operator shift_expression 
            {
              Expression RESULT =null;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new BinaryExpr(expr1, op, expr2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expression",36, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // relational_operator ::= LESS 
            {
              Integer RESULT =null;
			RESULT = Symbols.LESS;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator",47, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // relational_operator ::= GREATER 
            {
              Integer RESULT =null;
			RESULT = Symbols.GREATER;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator",47, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // relational_operator ::= LE_OP 
            {
              Integer RESULT =null;
			RESULT = Symbols.LE_OP;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator",47, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // relational_operator ::= GE_OP 
            {
              Integer RESULT =null;
			RESULT = Symbols.GE_OP;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator",47, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // shift_expression ::= additive_expression 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = expr;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shift_expression",37, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // shift_expression ::= shift_expression shift_operator additive_expression 
            {
              Expression RESULT =null;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new BinaryExpr(expr1, op, expr2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shift_expression",37, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // shift_operator ::= SHL_OP 
            {
              Integer RESULT =null;
			RESULT = Symbols.SHL_OP;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shift_operator",48, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // shift_operator ::= SHR_OP 
            {
              Integer RESULT =null;
			RESULT = Symbols.SHR_OP;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shift_operator",48, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // additive_expression ::= multiplicative_expression 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = expr;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_expression",38, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // additive_expression ::= additive_expression additive_operator multiplicative_expression 
            {
              Expression RESULT =null;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new BinaryExpr(expr1, op, expr2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_expression",38, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // additive_operator ::= ADD 
            {
              Integer RESULT =null;
			RESULT = Symbols.ADD;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_operator",49, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // additive_operator ::= SUB 
            {
              Integer RESULT =null;
			RESULT = Symbols.SUB;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_operator",49, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // multiplicative_expression ::= cast_expression 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = expr;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",39, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // multiplicative_expression ::= multiplicative_expression multiplicative_operator cast_expression 
            {
              Expression RESULT =null;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new BinaryExpr(expr1, op, expr2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",39, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // multiplicative_operator ::= MUL 
            {
              Integer RESULT =null;
			RESULT = Symbols.MUL;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_operator",50, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // multiplicative_operator ::= DIV 
            {
              Integer RESULT =null;
			RESULT = Symbols.DIV;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_operator",50, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // multiplicative_operator ::= MOD 
            {
              Integer RESULT =null;
			RESULT = Symbols.MOD;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_operator",50, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // cast_expression ::= unary_expression 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = expr;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cast_expression",40, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // cast_expression ::= PARAL type_name PARAR cast_expression 
            {
              Expression RESULT =null;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new CastExpr(type, expr);	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cast_expression",40, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // type_name ::= type_specifier 
            {
              Type RESULT =null;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_name",18, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // type_name ::= type_name MUL 
            {
              Type RESULT =null;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			RESULT = new PointerType(type); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_name",18, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // unary_expression ::= postfix_expression 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",41, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // unary_expression ::= INC_OP unary_expression 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new UnaryExpr(Symbols.INC_OP, expr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",41, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // unary_expression ::= DEC_OP unary_expression 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new UnaryExpr(Symbols.DEC_OP, expr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",41, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // unary_expression ::= unary_operator cast_expression 
            {
              Expression RESULT =null;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new UnaryExpr(op, expr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",41, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // unary_expression ::= SIZEOF unary_expression 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new UnaryExpr(Symbols.SIZEOF, expr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",41, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // unary_expression ::= SIZEOF PARAL type_name PARAR 
            {
              Expression RESULT =null;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			RESULT = new SizeofExpr(type); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",41, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // unary_operator ::= ADRESS 
            {
              Integer RESULT =null;
			RESULT = Symbols.ADRESS;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",51, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // unary_operator ::= MUL 
            {
              Integer RESULT =null;
			RESULT = Symbols.MUL;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",51, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // unary_operator ::= ADD 
            {
              Integer RESULT =null;
			RESULT = Symbols.ADD;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",51, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // unary_operator ::= SUB 
            {
              Integer RESULT =null;
			RESULT = Symbols.SUB;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",51, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // unary_operator ::= TILDE 
            {
              Integer RESULT =null;
			RESULT = Symbols.TILDE;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",51, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // unary_operator ::= NOT 
            {
              Integer RESULT =null;
			RESULT = Symbols.NOT;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",51, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // postfix_expression ::= primary_expression 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",42, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // postfix_expression ::= postfix_expression SQUARL expression SQUARR 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Expression delta = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			RESULT = new ArrayExpr(expr, delta); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",42, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // postfix_expression ::= postfix_expression PARAL PARAR 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
			RESULT = new FunctionCall(expr, new ArgumentList()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",42, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // postfix_expression ::= postfix_expression PARAL argument_list PARAR 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		ArgumentList argu = (ArgumentList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			RESULT = new FunctionCall(expr, argu); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",42, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // postfix_expression ::= postfix_expression DOT IDENTIFIER 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new RecordAccess(expr, new Symbol(id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",42, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // postfix_expression ::= postfix_expression PTR_OP IDENTIFIER 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new PointerAccess(expr, new Symbol(id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",42, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // postfix_expression ::= postfix_expression DOT TYPENAME 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new RecordAccess(expr, new Symbol(id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",42, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // postfix_expression ::= postfix_expression PTR_OP TYPENAME 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new PointerAccess(expr, new Symbol(id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",42, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // postfix_expression ::= postfix_expression INC_OP 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			RESULT = new PostExpr(expr, Symbols.INC_OP); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",42, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // postfix_expression ::= postfix_expression DEC_OP 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			RESULT = new PostExpr(expr, Symbols.DEC_OP); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",42, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // argument_list ::= assignment_expression 
            {
              ArgumentList RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = (new ArgumentList()).add(expr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument_list",44, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // argument_list ::= argument_list COMMA assignment_expression 
            {
              ArgumentList RESULT =null;
		ArgumentList list = (ArgumentList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = list.add(expr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument_list",44, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // primary_expression ::= IDENTIFIER 
            {
              Expression RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new Variable(new Symbol(id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",43, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // primary_expression ::= INTEGER 
            {
              Expression RESULT =null;
		int it = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new IntConst(it); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",43, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // primary_expression ::= CHARACTER 
            {
              Expression RESULT =null;
		char ch = (char)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new CharConst(ch); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",43, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // primary_expression ::= STRING 
            {
              Expression RESULT =null;
		String st = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new StringConst(st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",43, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // primary_expression ::= PARAL expression PARAR 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",43, RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
