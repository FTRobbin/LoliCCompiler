
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package parser;

import lexer.Yylex;
import java.io.Reader;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symbols.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\225\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\003\003\000\002\003\003\000\002\004\004" +
    "\000\002\004\005\000\002\025\003\000\002\025\004\000" +
    "\002\005\007\000\002\005\010\000\002\006\003\000\002" +
    "\006\005\000\002\007\004\000\002\010\003\000\002\010" +
    "\005\000\002\010\006\000\002\010\004\000\002\011\003" +
    "\000\002\011\005\000\002\012\005\000\002\012\006\000" +
    "\002\013\003\000\002\013\004\000\002\014\003\000\002" +
    "\014\004\000\002\015\003\000\002\015\005\000\002\016" +
    "\003\000\002\016\005\000\002\017\003\000\002\017\005" +
    "\000\002\020\003\000\002\020\005\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\004\000\002" +
    "\021\004\000\002\022\003\000\002\022\003\000\002\023" +
    "\006\000\002\023\005\000\002\024\005\000\002\024\006" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\027\003\000\002" +
    "\027\004\000\002\030\004\000\002\030\003\000\002\031" +
    "\006\000\002\031\005\000\002\031\005\000\002\031\004" +
    "\000\002\032\007\000\002\032\011\000\002\033\007\000" +
    "\002\033\010\000\002\033\011\000\002\034\004\000\002" +
    "\034\004\000\002\034\004\000\002\034\005\000\002\035" +
    "\003\000\002\035\005\000\002\036\003\000\002\036\005" +
    "\000\002\037\003\000\002\037\003\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\040\003\000\002\041\003" +
    "\000\002\041\005\000\002\042\003\000\002\042\005\000" +
    "\002\043\003\000\002\043\005\000\002\044\003\000\002" +
    "\044\005\000\002\045\003\000\002\045\005\000\002\046" +
    "\003\000\002\046\005\000\002\047\003\000\002\047\003" +
    "\000\002\050\003\000\002\050\005\000\002\051\003\000" +
    "\002\051\003\000\002\051\003\000\002\051\003\000\002" +
    "\052\003\000\002\052\005\000\002\053\003\000\002\053" +
    "\003\000\002\054\003\000\002\054\005\000\002\055\003" +
    "\000\002\055\003\000\002\056\003\000\002\056\005\000" +
    "\002\057\003\000\002\057\003\000\002\057\003\000\002" +
    "\060\003\000\002\060\006\000\002\061\003\000\002\061" +
    "\004\000\002\062\003\000\002\062\004\000\002\062\004" +
    "\000\002\062\004\000\002\062\004\000\002\062\006\000" +
    "\002\063\003\000\002\063\003\000\002\063\003\000\002" +
    "\063\003\000\002\063\003\000\002\063\003\000\002\064" +
    "\003\000\002\064\004\000\002\065\005\000\002\065\004" +
    "\000\002\065\005\000\002\065\004\000\002\065\004\000" +
    "\002\065\003\000\002\065\003\000\002\066\003\000\002" +
    "\066\005\000\002\067\003\000\002\067\003\000\002\067" +
    "\003\000\002\067\005\000\002\070\003\000\002\070\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\357\000\014\063\013\064\016\065\004\066\012\067" +
    "\011\001\002\000\012\005\uffde\006\uffde\015\uffde\057\uffde" +
    "\001\002\000\006\011\342\057\343\001\002\000\016\002" +
    "\000\063\000\064\000\065\000\066\000\067\000\001\002" +
    "\000\016\002\ufffe\063\ufffe\064\ufffe\065\ufffe\066\ufffe\067" +
    "\ufffe\001\002\000\016\002\ufffd\063\ufffd\064\ufffd\065\ufffd" +
    "\066\ufffd\067\ufffd\001\002\000\006\011\uffd9\057\uffd9\001" +
    "\002\000\006\011\uffda\057\uffda\001\002\000\012\005\uffdf" +
    "\006\uffdf\015\uffdf\057\uffdf\001\002\000\016\002\340\063" +
    "\013\064\016\065\004\066\012\067\011\001\002\000\010" +
    "\006\025\015\021\057\023\001\002\000\012\005\uffdd\006" +
    "\uffdd\015\uffdd\057\uffdd\001\002\000\006\006\335\007\334" +
    "\001\002\000\010\006\uffe5\007\uffe5\010\323\001\002\000" +
    "\010\005\uffe9\015\uffe9\057\uffe9\001\002\000\006\006\uffe7" +
    "\007\uffe7\001\002\000\016\004\uffeb\005\uffeb\006\uffeb\007" +
    "\uffeb\010\uffeb\013\uffeb\001\002\000\006\015\264\057\322" +
    "\001\002\000\074\002\ufffc\004\ufffc\006\ufffc\011\ufffc\012" +
    "\ufffc\015\ufffc\020\ufffc\023\ufffc\024\ufffc\027\ufffc\030\ufffc" +
    "\042\ufffc\043\ufffc\057\ufffc\060\ufffc\061\ufffc\062\ufffc\063" +
    "\ufffc\064\ufffc\065\ufffc\066\ufffc\067\ufffc\070\ufffc\072\ufffc" +
    "\073\ufffc\074\ufffc\075\ufffc\076\ufffc\077\ufffc\001\002\000" +
    "\014\004\031\006\ufff3\007\ufff3\010\ufff3\013\030\001\002" +
    "\000\014\005\ufff0\006\ufff0\007\ufff0\010\ufff0\013\317\001" +
    "\002\000\036\004\056\015\075\020\104\023\076\024\121" +
    "\027\055\030\061\042\052\043\042\057\123\060\046\061" +
    "\057\062\115\077\062\001\002\000\016\005\034\063\013" +
    "\064\016\065\004\066\012\067\011\001\002\000\006\005" +
    "\ufff6\007\ufff6\001\002\000\006\015\021\057\023\001\002" +
    "\000\012\006\ufff2\007\ufff2\010\ufff2\011\040\001\002\000" +
    "\006\005\037\007\036\001\002\000\014\063\013\064\016" +
    "\065\004\066\012\067\011\001\002\000\012\006\ufff1\007" +
    "\ufff1\010\ufff1\011\040\001\002\000\072\004\056\006\107" +
    "\011\040\012\053\015\075\020\104\023\076\024\121\027" +
    "\055\030\061\042\052\043\042\057\123\060\046\061\057" +
    "\062\115\063\013\064\016\065\004\066\012\067\011\070" +
    "\067\072\112\073\054\074\050\075\101\076\073\077\062" +
    "\001\002\000\016\002\ufff7\063\ufff7\064\ufff7\065\ufff7\066" +
    "\ufff7\067\ufff7\001\002\000\036\004\302\015\075\020\104" +
    "\023\076\024\121\027\055\030\061\042\052\043\042\057" +
    "\123\060\046\061\057\062\115\077\062\001\002\000\072" +
    "\004\056\006\107\011\040\012\304\015\075\020\104\023" +
    "\076\024\121\027\055\030\061\042\052\043\042\057\123" +
    "\060\046\061\057\062\115\063\013\064\016\065\004\066" +
    "\012\067\011\070\067\072\112\073\054\074\050\075\101" +
    "\076\073\077\062\001\002\000\052\005\uff9a\006\uff9a\007" +
    "\uff9a\012\uff9a\014\uff9a\016\uff9a\017\uff9a\020\uff9a\021\uff9a" +
    "\022\uff9a\023\143\024\142\032\uff9a\033\uff9a\034\uff9a\035" +
    "\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a\001\002\000\062" +
    "\004\uffd1\006\uffd1\011\uffd1\012\uffd1\015\uffd1\020\uffd1\023" +
    "\uffd1\024\uffd1\027\uffd1\030\uffd1\042\uffd1\043\uffd1\057\uffd1" +
    "\060\uffd1\061\uffd1\062\uffd1\070\uffd1\071\uffd1\072\uffd1\073" +
    "\uffd1\074\uffd1\075\uffd1\076\uffd1\077\uffd1\001\002\000\122" +
    "\004\uff6e\005\uff6e\006\uff6e\007\uff6e\010\uff6e\012\uff6e\013" +
    "\uff6e\014\uff6e\015\uff6e\016\uff6e\017\uff6e\020\uff6e\021\uff6e" +
    "\022\uff6e\023\uff6e\024\uff6e\025\uff6e\026\uff6e\031\uff6e\032" +
    "\uff6e\033\uff6e\034\uff6e\035\uff6e\036\uff6e\037\uff6e\040\uff6e" +
    "\041\uff6e\042\uff6e\043\uff6e\044\uff6e\045\uff6e\046\uff6e\047" +
    "\uff6e\050\uff6e\051\uff6e\052\uff6e\053\uff6e\054\uff6e\055\uff6e" +
    "\056\uff6e\001\002\000\062\004\uffd0\006\uffd0\011\uffd0\012" +
    "\uffd0\015\uffd0\020\uffd0\023\uffd0\024\uffd0\027\uffd0\030\uffd0" +
    "\042\uffd0\043\uffd0\057\uffd0\060\uffd0\061\uffd0\062\uffd0\070" +
    "\uffd0\071\uffd0\072\uffd0\073\uffd0\074\uffd0\075\uffd0\076\uffd0" +
    "\077\uffd0\001\002\000\004\006\303\001\002\000\062\004" +
    "\uffd3\006\uffd3\011\uffd3\012\uffd3\015\uffd3\020\uffd3\023\uffd3" +
    "\024\uffd3\027\uffd3\030\uffd3\042\uffd3\043\uffd3\057\uffd3\060" +
    "\uffd3\061\uffd3\062\uffd3\070\uffd3\071\uffd3\072\uffd3\073\uffd3" +
    "\074\uffd3\075\uffd3\076\uffd3\077\uffd3\001\002\000\036\004" +
    "\302\015\075\020\104\023\076\024\121\027\055\030\061" +
    "\042\052\043\042\057\123\060\046\061\057\062\115\077" +
    "\062\001\002\000\076\002\uffc8\004\uffc8\006\uffc8\011\uffc8" +
    "\012\uffc8\015\uffc8\020\uffc8\023\uffc8\024\uffc8\027\uffc8\030" +
    "\uffc8\042\uffc8\043\uffc8\057\uffc8\060\uffc8\061\uffc8\062\uffc8" +
    "\063\uffc8\064\uffc8\065\uffc8\066\uffc8\067\uffc8\070\uffc8\071" +
    "\uffc8\072\uffc8\073\uffc8\074\uffc8\075\uffc8\076\uffc8\077\uffc8" +
    "\001\002\000\004\004\271\001\002\000\036\004\uff7f\015" +
    "\uff7f\020\uff7f\023\uff7f\024\uff7f\027\uff7f\030\uff7f\042\uff7f" +
    "\043\uff7f\057\uff7f\060\uff7f\061\uff7f\062\uff7f\077\uff7f\001" +
    "\002\000\050\004\056\015\075\020\104\023\076\024\121" +
    "\027\055\030\061\042\052\043\042\057\123\060\046\061" +
    "\057\062\115\063\013\064\016\065\004\066\012\067\011" +
    "\077\062\001\002\000\122\004\uff6d\005\uff6d\006\uff6d\007" +
    "\uff6d\010\uff6d\012\uff6d\013\uff6d\014\uff6d\015\uff6d\016\uff6d" +
    "\017\uff6d\020\uff6d\021\uff6d\022\uff6d\023\uff6d\024\uff6d\025" +
    "\uff6d\026\uff6d\031\uff6d\032\uff6d\033\uff6d\034\uff6d\035\uff6d" +
    "\036\uff6d\037\uff6d\040\uff6d\041\uff6d\042\uff6d\043\uff6d\044" +
    "\uff6d\045\uff6d\046\uff6d\047\uff6d\050\uff6d\051\uff6d\052\uff6d" +
    "\053\uff6d\054\uff6d\055\uff6d\056\uff6d\001\002\000\122\004" +
    "\uff7d\005\uff7d\006\uff7d\007\uff7d\010\uff7d\012\uff7d\013\uff7d" +
    "\014\uff7d\015\uff7d\016\uff7d\017\uff7d\020\uff7d\021\uff7d\022" +
    "\uff7d\023\uff7d\024\uff7d\025\uff7d\026\uff7d\031\uff7d\032\uff7d" +
    "\033\uff7d\034\uff7d\035\uff7d\036\uff7d\037\uff7d\040\uff7d\041" +
    "\uff7d\042\uff7d\043\uff7d\044\uff7d\045\uff7d\046\uff7d\047\uff7d" +
    "\050\uff7d\051\uff7d\052\uff7d\053\uff7d\054\uff7d\055\uff7d\056" +
    "\uff7d\001\002\000\036\004\uff7e\015\uff7e\020\uff7e\023\uff7e" +
    "\024\uff7e\027\uff7e\030\uff7e\042\uff7e\043\uff7e\057\uff7e\060" +
    "\uff7e\061\uff7e\062\uff7e\077\uff7e\001\002\000\036\004\256" +
    "\015\075\020\104\023\076\024\121\027\055\030\061\042" +
    "\052\043\042\057\123\060\046\061\057\062\115\077\062" +
    "\001\002\000\016\005\uffbc\006\uffbc\007\uffbc\012\uffbc\014" +
    "\uffbc\032\253\001\002\000\032\005\uffa6\006\uffa6\007\uffa6" +
    "\012\uffa6\014\uffa6\016\uffa6\017\uffa6\020\uffa6\032\uffa6\033" +
    "\uffa6\034\167\035\170\001\002\000\024\005\uffaa\006\uffaa" +
    "\007\uffaa\012\uffaa\014\uffaa\016\uffaa\017\163\032\uffaa\033" +
    "\uffaa\001\002\000\060\005\uff92\006\uff92\007\uff92\012\uff92" +
    "\014\uff92\015\uff92\016\uff92\017\uff92\020\uff92\021\uff92\022" +
    "\uff92\023\uff92\024\uff92\025\uff92\026\uff92\032\uff92\033\uff92" +
    "\034\uff92\035\uff92\036\uff92\037\uff92\040\uff92\041\uff92\001" +
    "\002\000\004\004\245\001\002\000\006\006\244\007\155" +
    "\001\002\000\060\004\uffcf\006\uffcf\011\uffcf\012\uffcf\015" +
    "\uffcf\020\uffcf\023\uffcf\024\uffcf\027\uffcf\030\uffcf\042\uffcf" +
    "\043\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf\070\uffcf\072" +
    "\uffcf\073\uffcf\074\uffcf\075\uffcf\076\uffcf\077\uffcf\001\002" +
    "\000\106\005\uff8d\006\uff8d\007\uff8d\010\236\012\uff8d\014" +
    "\uff8d\015\uff8d\016\uff8d\017\uff8d\020\uff8d\021\uff8d\022\uff8d" +
    "\023\uff8d\024\uff8d\025\uff8d\026\uff8d\032\uff8d\033\uff8d\034" +
    "\uff8d\035\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d\045\230" +
    "\046\233\047\240\050\231\051\232\052\242\053\237\054" +
    "\227\055\241\056\234\001\002\000\040\004\056\006\224" +
    "\015\075\020\104\023\076\024\121\027\055\030\061\042" +
    "\052\043\042\057\123\060\046\061\057\062\115\077\062" +
    "\001\002\000\010\006\025\015\021\057\023\001\002\000" +
    "\036\004\uff82\015\uff82\020\uff82\023\uff82\024\uff82\027\uff82" +
    "\030\uff82\042\uff82\043\uff82\057\uff82\060\uff82\061\uff82\062" +
    "\uff82\077\uff82\001\002\000\036\004\uff81\015\uff81\020\uff81" +
    "\023\uff81\024\uff81\027\uff81\030\uff81\042\uff81\043\uff81\057" +
    "\uff81\060\uff81\061\uff81\062\uff81\077\uff81\001\002\000\122" +
    "\004\uff71\005\uff71\006\uff71\007\uff71\010\uff71\012\uff71\013" +
    "\uff71\014\uff71\015\uff71\016\uff71\017\uff71\020\uff71\021\uff71" +
    "\022\uff71\023\uff71\024\uff71\025\uff71\026\uff71\031\uff71\032" +
    "\uff71\033\uff71\034\uff71\035\uff71\036\uff71\037\uff71\040\uff71" +
    "\041\uff71\042\uff71\043\uff71\044\uff71\045\uff71\046\uff71\047" +
    "\uff71\050\uff71\051\uff71\052\uff71\053\uff71\054\uff71\055\uff71" +
    "\056\uff71\001\002\000\062\004\uffd2\006\uffd2\011\uffd2\012" +
    "\uffd2\015\uffd2\020\uffd2\023\uffd2\024\uffd2\027\uffd2\030\uffd2" +
    "\042\uffd2\043\uffd2\057\uffd2\060\uffd2\061\uffd2\062\uffd2\070" +
    "\uffd2\071\uffd2\072\uffd2\073\uffd2\074\uffd2\075\uffd2\076\uffd2" +
    "\077\uffd2\001\002\000\004\006\216\001\002\000\122\004" +
    "\203\005\uff89\006\uff89\007\uff89\010\uff89\012\uff89\013\201" +
    "\014\uff89\015\uff89\016\uff89\017\uff89\020\uff89\021\uff89\022" +
    "\uff89\023\uff89\024\uff89\025\uff89\026\uff89\031\202\032\uff89" +
    "\033\uff89\034\uff89\035\uff89\036\uff89\037\uff89\040\uff89\041" +
    "\uff89\042\175\043\176\044\177\045\uff89\046\uff89\047\uff89" +
    "\050\uff89\051\uff89\052\uff89\053\uff89\054\uff89\055\uff89\056" +
    "\uff89\001\002\000\020\005\uffae\006\uffae\007\uffae\012\uffae" +
    "\014\uffae\032\uffae\033\173\001\002\000\036\004\uff83\015" +
    "\uff83\020\uff83\023\uff83\024\uff83\027\uff83\030\uff83\042\uff83" +
    "\043\uff83\057\uff83\060\uff83\061\uff83\062\uff83\077\uff83\001" +
    "\002\000\046\005\uffa0\006\uffa0\007\uffa0\012\uffa0\014\uffa0" +
    "\016\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0\032\uffa0\033" +
    "\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0\040\137\041\136" +
    "\001\002\000\026\005\uffa8\006\uffa8\007\uffa8\012\uffa8\014" +
    "\uffa8\016\uffa8\017\uffa8\020\165\032\uffa8\033\uffa8\001\002" +
    "\000\064\004\uffcc\005\uffcc\006\uffcc\011\uffcc\012\uffcc\015" +
    "\uffcc\020\uffcc\023\uffcc\024\uffcc\027\uffcc\030\uffcc\042\uffcc" +
    "\043\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc\070\uffcc\071" +
    "\uffcc\072\uffcc\073\uffcc\074\uffcc\075\uffcc\076\uffcc\077\uffcc" +
    "\001\002\000\022\005\uffac\006\uffac\007\uffac\012\uffac\014" +
    "\uffac\016\161\032\uffac\033\uffac\001\002\000\012\005\uffbe" +
    "\006\uffbe\007\uffbe\014\uffbe\001\002\000\004\004\153\001" +
    "\002\000\060\005\uff96\006\uff96\007\uff96\012\uff96\014\uff96" +
    "\015\150\016\uff96\017\uff96\020\uff96\021\uff96\022\uff96\023" +
    "\uff96\024\uff96\025\151\026\146\032\uff96\033\uff96\034\uff96" +
    "\035\uff96\036\uff96\037\uff96\040\uff96\041\uff96\001\002\000" +
    "\062\004\uffd4\006\uffd4\011\uffd4\012\uffd4\015\uffd4\020\uffd4" +
    "\023\uffd4\024\uffd4\027\uffd4\030\uffd4\042\uffd4\043\uffd4\057" +
    "\uffd4\060\uffd4\061\uffd4\062\uffd4\070\uffd4\071\uffd4\072\uffd4" +
    "\073\uffd4\074\uffd4\075\uffd4\076\uffd4\077\uffd4\001\002\000" +
    "\122\004\uff70\005\uff70\006\uff70\007\uff70\010\uff70\012\uff70" +
    "\013\uff70\014\uff70\015\uff70\016\uff70\017\uff70\020\uff70\021" +
    "\uff70\022\uff70\023\uff70\024\uff70\025\uff70\026\uff70\031\uff70" +
    "\032\uff70\033\uff70\034\uff70\035\uff70\036\uff70\037\uff70\040" +
    "\uff70\041\uff70\042\uff70\043\uff70\044\uff70\045\uff70\046\uff70" +
    "\047\uff70\050\uff70\051\uff70\052\uff70\053\uff70\054\uff70\055" +
    "\uff70\056\uff70\001\002\000\072\004\ufffa\006\ufffa\011\ufffa" +
    "\012\ufffa\015\ufffa\020\ufffa\023\ufffa\024\ufffa\027\ufffa\030" +
    "\ufffa\042\ufffa\043\ufffa\057\ufffa\060\ufffa\061\ufffa\062\ufffa" +
    "\063\ufffa\064\ufffa\065\ufffa\066\ufffa\067\ufffa\070\ufffa\072" +
    "\ufffa\073\ufffa\074\ufffa\075\ufffa\076\ufffa\077\ufffa\001\002" +
    "\000\042\005\uffa4\006\uffa4\007\uffa4\012\uffa4\014\uffa4\016" +
    "\uffa4\017\uffa4\020\uffa4\021\134\022\131\032\uffa4\033\uffa4" +
    "\034\uffa4\035\uffa4\036\130\037\132\001\002\000\036\004" +
    "\056\015\075\020\104\023\076\024\121\027\055\030\061" +
    "\042\052\043\042\057\123\060\046\061\057\062\115\077" +
    "\062\001\002\000\036\004\uff80\015\uff80\020\uff80\023\uff80" +
    "\024\uff80\027\uff80\030\uff80\042\uff80\043\uff80\057\uff80\060" +
    "\uff80\061\uff80\062\uff80\077\uff80\001\002\000\060\004\056" +
    "\006\107\011\040\012\124\015\075\020\104\023\076\024" +
    "\121\027\055\030\061\042\052\043\042\057\123\060\046" +
    "\061\057\062\115\070\067\072\112\073\054\074\050\075" +
    "\101\076\073\077\062\001\002\000\122\004\uff72\005\uff72" +
    "\006\uff72\007\uff72\010\uff72\012\uff72\013\uff72\014\uff72\015" +
    "\uff72\016\uff72\017\uff72\020\uff72\021\uff72\022\uff72\023\uff72" +
    "\024\uff72\025\uff72\026\uff72\031\uff72\032\uff72\033\uff72\034" +
    "\uff72\035\uff72\036\uff72\037\uff72\040\uff72\041\uff72\042\uff72" +
    "\043\uff72\044\uff72\045\uff72\046\uff72\047\uff72\050\uff72\051" +
    "\uff72\052\uff72\053\uff72\054\uff72\055\uff72\056\uff72\001\002" +
    "\000\076\002\uffca\004\uffca\006\uffca\011\uffca\012\uffca\015" +
    "\uffca\020\uffca\023\uffca\024\uffca\027\uffca\030\uffca\042\uffca" +
    "\043\uffca\057\uffca\060\uffca\061\uffca\062\uffca\063\uffca\064" +
    "\uffca\065\uffca\066\uffca\067\uffca\070\uffca\071\uffca\072\uffca" +
    "\073\uffca\074\uffca\075\uffca\076\uffca\077\uffca\001\002\000" +
    "\060\004\uffce\006\uffce\011\uffce\012\uffce\015\uffce\020\uffce" +
    "\023\uffce\024\uffce\027\uffce\030\uffce\042\uffce\043\uffce\057" +
    "\uffce\060\uffce\061\uffce\062\uffce\070\uffce\072\uffce\073\uffce" +
    "\074\uffce\075\uffce\076\uffce\077\uffce\001\002\000\106\005" +
    "\uff86\006\uff86\007\uff86\010\uff86\012\uff86\014\uff86\015\uff86" +
    "\016\uff86\017\uff86\020\uff86\021\uff86\022\uff86\023\uff86\024" +
    "\uff86\025\uff86\026\uff86\032\uff86\033\uff86\034\uff86\035\uff86" +
    "\036\uff86\037\uff86\040\uff86\041\uff86\045\uff86\046\uff86\047" +
    "\uff86\050\uff86\051\uff86\052\uff86\053\uff86\054\uff86\055\uff86" +
    "\056\uff86\001\002\000\106\005\uff8d\006\uff8d\007\uff8d\010" +
    "\uff8d\012\uff8d\014\uff8d\015\uff8d\016\uff8d\017\uff8d\020\uff8d" +
    "\021\uff8d\022\uff8d\023\uff8d\024\uff8d\025\uff8d\026\uff8d\032" +
    "\uff8d\033\uff8d\034\uff8d\035\uff8d\036\uff8d\037\uff8d\040\uff8d" +
    "\041\uff8d\045\uff8d\046\uff8d\047\uff8d\050\uff8d\051\uff8d\052" +
    "\uff8d\053\uff8d\054\uff8d\055\uff8d\056\uff8d\001\002\000\036" +
    "\004\uff9c\015\uff9c\020\uff9c\023\uff9c\024\uff9c\027\uff9c\030" +
    "\uff9c\042\uff9c\043\uff9c\057\uff9c\060\uff9c\061\uff9c\062\uff9c" +
    "\077\uff9c\001\002\000\036\004\uff9d\015\uff9d\020\uff9d\023" +
    "\uff9d\024\uff9d\027\uff9d\030\uff9d\042\uff9d\043\uff9d\057\uff9d" +
    "\060\uff9d\061\uff9d\062\uff9d\077\uff9d\001\002\000\036\004" +
    "\uff9b\015\uff9b\020\uff9b\023\uff9b\024\uff9b\027\uff9b\030\uff9b" +
    "\042\uff9b\043\uff9b\057\uff9b\060\uff9b\061\uff9b\062\uff9b\077" +
    "\uff9b\001\002\000\036\004\056\015\075\020\104\023\076" +
    "\024\121\027\055\030\061\042\052\043\042\057\123\060" +
    "\046\061\057\062\115\077\062\001\002\000\036\004\uff9e" +
    "\015\uff9e\020\uff9e\023\uff9e\024\uff9e\027\uff9e\030\uff9e\042" +
    "\uff9e\043\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e\077\uff9e" +
    "\001\002\000\046\005\uff9f\006\uff9f\007\uff9f\012\uff9f\014" +
    "\uff9f\016\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f\032\uff9f" +
    "\033\uff9f\034\uff9f\035\uff9f\036\uff9f\037\uff9f\040\137\041" +
    "\136\001\002\000\036\004\uff97\015\uff97\020\uff97\023\uff97" +
    "\024\uff97\027\uff97\030\uff97\042\uff97\043\uff97\057\uff97\060" +
    "\uff97\061\uff97\062\uff97\077\uff97\001\002\000\036\004\uff98" +
    "\015\uff98\020\uff98\023\uff98\024\uff98\027\uff98\030\uff98\042" +
    "\uff98\043\uff98\057\uff98\060\uff98\061\uff98\062\uff98\077\uff98" +
    "\001\002\000\036\004\056\015\075\020\104\023\076\024" +
    "\121\027\055\030\061\042\052\043\042\057\123\060\046" +
    "\061\057\062\115\077\062\001\002\000\052\005\uff99\006" +
    "\uff99\007\uff99\012\uff99\014\uff99\016\uff99\017\uff99\020\uff99" +
    "\021\uff99\022\uff99\023\143\024\142\032\uff99\033\uff99\034" +
    "\uff99\035\uff99\036\uff99\037\uff99\040\uff99\041\uff99\001\002" +
    "\000\036\004\uff93\015\uff93\020\uff93\023\uff93\024\uff93\027" +
    "\uff93\030\uff93\042\uff93\043\uff93\057\uff93\060\uff93\061\uff93" +
    "\062\uff93\077\uff93\001\002\000\036\004\uff94\015\uff94\020" +
    "\uff94\023\uff94\024\uff94\027\uff94\030\uff94\042\uff94\043\uff94" +
    "\057\uff94\060\uff94\061\uff94\062\uff94\077\uff94\001\002\000" +
    "\036\004\056\015\075\020\104\023\076\024\121\027\055" +
    "\030\061\042\052\043\042\057\123\060\046\061\057\062" +
    "\115\077\062\001\002\000\060\005\uff95\006\uff95\007\uff95" +
    "\012\uff95\014\uff95\015\150\016\uff95\017\uff95\020\uff95\021" +
    "\uff95\022\uff95\023\uff95\024\uff95\025\151\026\146\032\uff95" +
    "\033\uff95\034\uff95\035\uff95\036\uff95\037\uff95\040\uff95\041" +
    "\uff95\001\002\000\036\004\uff8e\015\uff8e\020\uff8e\023\uff8e" +
    "\024\uff8e\027\uff8e\030\uff8e\042\uff8e\043\uff8e\057\uff8e\060" +
    "\uff8e\061\uff8e\062\uff8e\077\uff8e\001\002\000\036\004\056" +
    "\015\075\020\104\023\076\024\121\027\055\030\061\042" +
    "\052\043\042\057\123\060\046\061\057\062\115\077\062" +
    "\001\002\000\036\004\uff90\015\uff90\020\uff90\023\uff90\024" +
    "\uff90\027\uff90\030\uff90\042\uff90\043\uff90\057\uff90\060\uff90" +
    "\061\uff90\062\uff90\077\uff90\001\002\000\036\004\uff8f\015" +
    "\uff8f\020\uff8f\023\uff8f\024\uff8f\027\uff8f\030\uff8f\042\uff8f" +
    "\043\uff8f\057\uff8f\060\uff8f\061\uff8f\062\uff8f\077\uff8f\001" +
    "\002\000\060\005\uff91\006\uff91\007\uff91\012\uff91\014\uff91" +
    "\015\uff91\016\uff91\017\uff91\020\uff91\021\uff91\022\uff91\023" +
    "\uff91\024\uff91\025\uff91\026\uff91\032\uff91\033\uff91\034\uff91" +
    "\035\uff91\036\uff91\037\uff91\040\uff91\041\uff91\001\002\000" +
    "\036\004\056\015\075\020\104\023\076\024\121\027\055" +
    "\030\061\042\052\043\042\057\123\060\046\061\057\062" +
    "\115\077\062\001\002\000\006\005\156\007\155\001\002" +
    "\000\036\004\056\015\075\020\104\023\076\024\121\027" +
    "\055\030\061\042\052\043\042\057\123\060\046\061\057" +
    "\062\115\077\062\001\002\000\056\004\056\006\107\011" +
    "\040\015\075\020\104\023\076\024\121\027\055\030\061" +
    "\042\052\043\042\057\123\060\046\061\057\062\115\070" +
    "\067\072\112\073\054\074\050\075\101\076\073\077\062" +
    "\001\002\000\062\004\uffc5\006\uffc5\011\uffc5\012\uffc5\015" +
    "\uffc5\020\uffc5\023\uffc5\024\uffc5\027\uffc5\030\uffc5\042\uffc5" +
    "\043\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5\070\uffc5\071" +
    "\uffc5\072\uffc5\073\uffc5\074\uffc5\075\uffc5\076\uffc5\077\uffc5" +
    "\001\002\000\012\005\uffbd\006\uffbd\007\uffbd\014\uffbd\001" +
    "\002\000\036\004\056\015\075\020\104\023\076\024\121" +
    "\027\055\030\061\042\052\043\042\057\123\060\046\061" +
    "\057\062\115\077\062\001\002\000\024\005\uffa9\006\uffa9" +
    "\007\uffa9\012\uffa9\014\uffa9\016\uffa9\017\163\032\uffa9\033" +
    "\uffa9\001\002\000\036\004\056\015\075\020\104\023\076" +
    "\024\121\027\055\030\061\042\052\043\042\057\123\060" +
    "\046\061\057\062\115\077\062\001\002\000\026\005\uffa7" +
    "\006\uffa7\007\uffa7\012\uffa7\014\uffa7\016\uffa7\017\uffa7\020" +
    "\165\032\uffa7\033\uffa7\001\002\000\036\004\056\015\075" +
    "\020\104\023\076\024\121\027\055\030\061\042\052\043" +
    "\042\057\123\060\046\061\057\062\115\077\062\001\002" +
    "\000\032\005\uffa5\006\uffa5\007\uffa5\012\uffa5\014\uffa5\016" +
    "\uffa5\017\uffa5\020\uffa5\032\uffa5\033\uffa5\034\167\035\170" +
    "\001\002\000\036\004\uffa2\015\uffa2\020\uffa2\023\uffa2\024" +
    "\uffa2\027\uffa2\030\uffa2\042\uffa2\043\uffa2\057\uffa2\060\uffa2" +
    "\061\uffa2\062\uffa2\077\uffa2\001\002\000\036\004\uffa1\015" +
    "\uffa1\020\uffa1\023\uffa1\024\uffa1\027\uffa1\030\uffa1\042\uffa1" +
    "\043\uffa1\057\uffa1\060\uffa1\061\uffa1\062\uffa1\077\uffa1\001" +
    "\002\000\036\004\056\015\075\020\104\023\076\024\121" +
    "\027\055\030\061\042\052\043\042\057\123\060\046\061" +
    "\057\062\115\077\062\001\002\000\042\005\uffa3\006\uffa3" +
    "\007\uffa3\012\uffa3\014\uffa3\016\uffa3\017\uffa3\020\uffa3\021" +
    "\134\022\131\032\uffa3\033\uffa3\034\uffa3\035\uffa3\036\130" +
    "\037\132\001\002\000\036\004\056\015\075\020\104\023" +
    "\076\024\121\027\055\030\061\042\052\043\042\057\123" +
    "\060\046\061\057\062\115\077\062\001\002\000\022\005" +
    "\uffab\006\uffab\007\uffab\012\uffab\014\uffab\016\161\032\uffab" +
    "\033\uffab\001\002\000\122\004\uff76\005\uff76\006\uff76\007" +
    "\uff76\010\uff76\012\uff76\013\uff76\014\uff76\015\uff76\016\uff76" +
    "\017\uff76\020\uff76\021\uff76\022\uff76\023\uff76\024\uff76\025" +
    "\uff76\026\uff76\031\uff76\032\uff76\033\uff76\034\uff76\035\uff76" +
    "\036\uff76\037\uff76\040\uff76\041\uff76\042\uff76\043\uff76\044" +
    "\uff76\045\uff76\046\uff76\047\uff76\050\uff76\051\uff76\052\uff76" +
    "\053\uff76\054\uff76\055\uff76\056\uff76\001\002\000\122\004" +
    "\uff75\005\uff75\006\uff75\007\uff75\010\uff75\012\uff75\013\uff75" +
    "\014\uff75\015\uff75\016\uff75\017\uff75\020\uff75\021\uff75\022" +
    "\uff75\023\uff75\024\uff75\025\uff75\026\uff75\031\uff75\032\uff75" +
    "\033\uff75\034\uff75\035\uff75\036\uff75\037\uff75\040\uff75\041" +
    "\uff75\042\uff75\043\uff75\044\uff75\045\uff75\046\uff75\047\uff75" +
    "\050\uff75\051\uff75\052\uff75\053\uff75\054\uff75\055\uff75\056" +
    "\uff75\001\002\000\004\057\215\001\002\000\122\004\uff7c" +
    "\005\uff7c\006\uff7c\007\uff7c\010\uff7c\012\uff7c\013\uff7c\014" +
    "\uff7c\015\uff7c\016\uff7c\017\uff7c\020\uff7c\021\uff7c\022\uff7c" +
    "\023\uff7c\024\uff7c\025\uff7c\026\uff7c\031\uff7c\032\uff7c\033" +
    "\uff7c\034\uff7c\035\uff7c\036\uff7c\037\uff7c\040\uff7c\041\uff7c" +
    "\042\uff7c\043\uff7c\044\uff7c\045\uff7c\046\uff7c\047\uff7c\050" +
    "\uff7c\051\uff7c\052\uff7c\053\uff7c\054\uff7c\055\uff7c\056\uff7c" +
    "\001\002\000\036\004\056\015\075\020\104\023\076\024" +
    "\121\027\055\030\061\042\052\043\042\057\123\060\046" +
    "\061\057\062\115\077\062\001\002\000\004\057\212\001" +
    "\002\000\040\004\056\005\205\015\075\020\104\023\076" +
    "\024\121\027\055\030\061\042\052\043\042\057\123\060" +
    "\046\061\057\062\115\077\062\001\002\000\006\005\uff74" +
    "\007\uff74\001\002\000\122\004\uff7a\005\uff7a\006\uff7a\007" +
    "\uff7a\010\uff7a\012\uff7a\013\uff7a\014\uff7a\015\uff7a\016\uff7a" +
    "\017\uff7a\020\uff7a\021\uff7a\022\uff7a\023\uff7a\024\uff7a\025" +
    "\uff7a\026\uff7a\031\uff7a\032\uff7a\033\uff7a\034\uff7a\035\uff7a" +
    "\036\uff7a\037\uff7a\040\uff7a\041\uff7a\042\uff7a\043\uff7a\044" +
    "\uff7a\045\uff7a\046\uff7a\047\uff7a\050\uff7a\051\uff7a\052\uff7a" +
    "\053\uff7a\054\uff7a\055\uff7a\056\uff7a\001\002\000\006\005" +
    "\210\007\207\001\002\000\036\004\056\015\075\020\104" +
    "\023\076\024\121\027\055\030\061\042\052\043\042\057" +
    "\123\060\046\061\057\062\115\077\062\001\002\000\122" +
    "\004\uff79\005\uff79\006\uff79\007\uff79\010\uff79\012\uff79\013" +
    "\uff79\014\uff79\015\uff79\016\uff79\017\uff79\020\uff79\021\uff79" +
    "\022\uff79\023\uff79\024\uff79\025\uff79\026\uff79\031\uff79\032" +
    "\uff79\033\uff79\034\uff79\035\uff79\036\uff79\037\uff79\040\uff79" +
    "\041\uff79\042\uff79\043\uff79\044\uff79\045\uff79\046\uff79\047" +
    "\uff79\050\uff79\051\uff79\052\uff79\053\uff79\054\uff79\055\uff79" +
    "\056\uff79\001\002\000\006\005\uff73\007\uff73\001\002\000" +
    "\122\004\uff78\005\uff78\006\uff78\007\uff78\010\uff78\012\uff78" +
    "\013\uff78\014\uff78\015\uff78\016\uff78\017\uff78\020\uff78\021" +
    "\uff78\022\uff78\023\uff78\024\uff78\025\uff78\026\uff78\031\uff78" +
    "\032\uff78\033\uff78\034\uff78\035\uff78\036\uff78\037\uff78\040" +
    "\uff78\041\uff78\042\uff78\043\uff78\044\uff78\045\uff78\046\uff78" +
    "\047\uff78\050\uff78\051\uff78\052\uff78\053\uff78\054\uff78\055" +
    "\uff78\056\uff78\001\002\000\006\007\155\014\214\001\002" +
    "\000\122\004\uff7b\005\uff7b\006\uff7b\007\uff7b\010\uff7b\012" +
    "\uff7b\013\uff7b\014\uff7b\015\uff7b\016\uff7b\017\uff7b\020\uff7b" +
    "\021\uff7b\022\uff7b\023\uff7b\024\uff7b\025\uff7b\026\uff7b\031" +
    "\uff7b\032\uff7b\033\uff7b\034\uff7b\035\uff7b\036\uff7b\037\uff7b" +
    "\040\uff7b\041\uff7b\042\uff7b\043\uff7b\044\uff7b\045\uff7b\046" +
    "\uff7b\047\uff7b\050\uff7b\051\uff7b\052\uff7b\053\uff7b\054\uff7b" +
    "\055\uff7b\056\uff7b\001\002\000\122\004\uff77\005\uff77\006" +
    "\uff77\007\uff77\010\uff77\012\uff77\013\uff77\014\uff77\015\uff77" +
    "\016\uff77\017\uff77\020\uff77\021\uff77\022\uff77\023\uff77\024" +
    "\uff77\025\uff77\026\uff77\031\uff77\032\uff77\033\uff77\034\uff77" +
    "\035\uff77\036\uff77\037\uff77\040\uff77\041\uff77\042\uff77\043" +
    "\uff77\044\uff77\045\uff77\046\uff77\047\uff77\050\uff77\051\uff77" +
    "\052\uff77\053\uff77\054\uff77\055\uff77\056\uff77\001\002\000" +
    "\062\004\uffc1\006\uffc1\011\uffc1\012\uffc1\015\uffc1\020\uffc1" +
    "\023\uffc1\024\uffc1\027\uffc1\030\uffc1\042\uffc1\043\uffc1\057" +
    "\uffc1\060\uffc1\061\uffc1\062\uffc1\070\uffc1\071\uffc1\072\uffc1" +
    "\073\uffc1\074\uffc1\075\uffc1\076\uffc1\077\uffc1\001\002\000" +
    "\016\004\220\005\ufff3\006\ufff3\007\ufff3\010\ufff3\013\030" +
    "\001\002\000\016\005\221\063\013\064\016\065\004\066" +
    "\012\067\011\001\002\000\012\005\ufff2\006\ufff2\007\ufff2" +
    "\010\ufff2\001\002\000\006\005\223\007\036\001\002\000" +
    "\012\005\ufff1\006\ufff1\007\ufff1\010\ufff1\001\002\000\062" +
    "\004\uffc0\006\uffc0\011\uffc0\012\uffc0\015\uffc0\020\uffc0\023" +
    "\uffc0\024\uffc0\027\uffc0\030\uffc0\042\uffc0\043\uffc0\057\uffc0" +
    "\060\uffc0\061\uffc0\062\uffc0\070\uffc0\071\uffc0\072\uffc0\073" +
    "\uffc0\074\uffc0\075\uffc0\076\uffc0\077\uffc0\001\002\000\006" +
    "\006\226\007\155\001\002\000\062\004\uffbf\006\uffbf\011" +
    "\uffbf\012\uffbf\015\uffbf\020\uffbf\023\uffbf\024\uffbf\027\uffbf" +
    "\030\uffbf\042\uffbf\043\uffbf\057\uffbf\060\uffbf\061\uffbf\062" +
    "\uffbf\070\uffbf\071\uffbf\072\uffbf\073\uffbf\074\uffbf\075\uffbf" +
    "\076\uffbf\077\uffbf\001\002\000\036\004\uffb0\015\uffb0\020" +
    "\uffb0\023\uffb0\024\uffb0\027\uffb0\030\uffb0\042\uffb0\043\uffb0" +
    "\057\uffb0\060\uffb0\061\uffb0\062\uffb0\077\uffb0\001\002\000" +
    "\036\004\uffb9\015\uffb9\020\uffb9\023\uffb9\024\uffb9\027\uffb9" +
    "\030\uffb9\042\uffb9\043\uffb9\057\uffb9\060\uffb9\061\uffb9\062" +
    "\uffb9\077\uffb9\001\002\000\036\004\uffb6\015\uffb6\020\uffb6" +
    "\023\uffb6\024\uffb6\027\uffb6\030\uffb6\042\uffb6\043\uffb6\057" +
    "\uffb6\060\uffb6\061\uffb6\062\uffb6\077\uffb6\001\002\000\036" +
    "\004\uffb5\015\uffb5\020\uffb5\023\uffb5\024\uffb5\027\uffb5\030" +
    "\uffb5\042\uffb5\043\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5" +
    "\077\uffb5\001\002\000\036\004\uffb8\015\uffb8\020\uffb8\023" +
    "\uffb8\024\uffb8\027\uffb8\030\uffb8\042\uffb8\043\uffb8\057\uffb8" +
    "\060\uffb8\061\uffb8\062\uffb8\077\uffb8\001\002\000\036\004" +
    "\uffb2\015\uffb2\020\uffb2\023\uffb2\024\uffb2\027\uffb2\030\uffb2" +
    "\042\uffb2\043\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2\077" +
    "\uffb2\001\002\000\036\004\056\015\075\020\104\023\076" +
    "\024\121\027\055\030\061\042\052\043\042\057\123\060" +
    "\046\061\057\062\115\077\062\001\002\000\036\004\uffba" +
    "\015\uffba\020\uffba\023\uffba\024\uffba\027\uffba\030\uffba\042" +
    "\uffba\043\uffba\057\uffba\060\uffba\061\uffba\062\uffba\077\uffba" +
    "\001\002\000\036\004\uffb3\015\uffb3\020\uffb3\023\uffb3\024" +
    "\uffb3\027\uffb3\030\uffb3\042\uffb3\043\uffb3\057\uffb3\060\uffb3" +
    "\061\uffb3\062\uffb3\077\uffb3\001\002\000\036\004\uffb7\015" +
    "\uffb7\020\uffb7\023\uffb7\024\uffb7\027\uffb7\030\uffb7\042\uffb7" +
    "\043\uffb7\057\uffb7\060\uffb7\061\uffb7\062\uffb7\077\uffb7\001" +
    "\002\000\036\004\uffb1\015\uffb1\020\uffb1\023\uffb1\024\uffb1" +
    "\027\uffb1\030\uffb1\042\uffb1\043\uffb1\057\uffb1\060\uffb1\061" +
    "\uffb1\062\uffb1\077\uffb1\001\002\000\036\004\uffb4\015\uffb4" +
    "\020\uffb4\023\uffb4\024\uffb4\027\uffb4\030\uffb4\042\uffb4\043" +
    "\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4\077\uffb4\001\002" +
    "\000\014\005\uffbb\006\uffbb\007\uffbb\012\uffbb\014\uffbb\001" +
    "\002\000\064\004\uffcd\005\uffcd\006\uffcd\011\uffcd\012\uffcd" +
    "\015\uffcd\020\uffcd\023\uffcd\024\uffcd\027\uffcd\030\uffcd\042" +
    "\uffcd\043\uffcd\057\uffcd\060\uffcd\061\uffcd\062\uffcd\070\uffcd" +
    "\071\uffcd\072\uffcd\073\uffcd\074\uffcd\075\uffcd\076\uffcd\077" +
    "\uffcd\001\002\000\036\004\056\015\075\020\104\023\076" +
    "\024\121\027\055\030\061\042\052\043\042\057\123\060" +
    "\046\061\057\062\115\077\062\001\002\000\006\005\247" +
    "\007\155\001\002\000\056\004\056\006\107\011\040\015" +
    "\075\020\104\023\076\024\121\027\055\030\061\042\052" +
    "\043\042\057\123\060\046\061\057\062\115\070\067\072" +
    "\112\073\054\074\050\075\101\076\073\077\062\001\002" +
    "\000\062\004\uffc7\006\uffc7\011\uffc7\012\uffc7\015\uffc7\020" +
    "\uffc7\023\uffc7\024\uffc7\027\uffc7\030\uffc7\042\uffc7\043\uffc7" +
    "\057\uffc7\060\uffc7\061\uffc7\062\uffc7\070\uffc7\071\251\072" +
    "\uffc7\073\uffc7\074\uffc7\075\uffc7\076\uffc7\077\uffc7\001\002" +
    "\000\056\004\056\006\107\011\040\015\075\020\104\023" +
    "\076\024\121\027\055\030\061\042\052\043\042\057\123" +
    "\060\046\061\057\062\115\070\067\072\112\073\054\074" +
    "\050\075\101\076\073\077\062\001\002\000\062\004\uffc6" +
    "\006\uffc6\011\uffc6\012\uffc6\015\uffc6\020\uffc6\023\uffc6\024" +
    "\uffc6\027\uffc6\030\uffc6\042\uffc6\043\uffc6\057\uffc6\060\uffc6" +
    "\061\uffc6\062\uffc6\070\uffc6\071\uffc6\072\uffc6\073\uffc6\074" +
    "\uffc6\075\uffc6\076\uffc6\077\uffc6\001\002\000\036\004\056" +
    "\015\075\020\104\023\076\024\121\027\055\030\061\042" +
    "\052\043\042\057\123\060\046\061\057\062\115\077\062" +
    "\001\002\000\020\005\uffad\006\uffad\007\uffad\012\uffad\014" +
    "\uffad\032\uffad\033\173\001\002\000\106\005\uff85\006\uff85" +
    "\007\uff85\010\uff85\012\uff85\014\uff85\015\uff85\016\uff85\017" +
    "\uff85\020\uff85\021\uff85\022\uff85\023\uff85\024\uff85\025\uff85" +
    "\026\uff85\032\uff85\033\uff85\034\uff85\035\uff85\036\uff85\037" +
    "\uff85\040\uff85\041\uff85\045\uff85\046\uff85\047\uff85\050\uff85" +
    "\051\uff85\052\uff85\053\uff85\054\uff85\055\uff85\056\uff85\001" +
    "\002\000\050\004\056\015\075\020\104\023\076\024\121" +
    "\027\055\030\061\042\052\043\042\057\123\060\046\061" +
    "\057\062\115\063\013\064\016\065\004\066\012\067\011" +
    "\077\062\001\002\000\006\005\265\007\155\001\002\000" +
    "\006\005\uff8b\015\021\001\002\000\004\005\262\001\002" +
    "\000\106\005\uff84\006\uff84\007\uff84\010\uff84\012\uff84\014" +
    "\uff84\015\uff84\016\uff84\017\uff84\020\uff84\021\uff84\022\uff84" +
    "\023\uff84\024\uff84\025\uff84\026\uff84\032\uff84\033\uff84\034" +
    "\uff84\035\uff84\036\uff84\037\uff84\040\uff84\041\uff84\045\uff84" +
    "\046\uff84\047\uff84\050\uff84\051\uff84\052\uff84\053\uff84\054" +
    "\uff84\055\uff84\056\uff84\001\002\000\006\005\uff8a\015\264" +
    "\001\002\000\010\005\uffe8\015\uffe8\057\uffe8\001\002\000" +
    "\122\004\uff6f\005\uff6f\006\uff6f\007\uff6f\010\uff6f\012\uff6f" +
    "\013\uff6f\014\uff6f\015\uff6f\016\uff6f\017\uff6f\020\uff6f\021" +
    "\uff6f\022\uff6f\023\uff6f\024\uff6f\025\uff6f\026\uff6f\031\uff6f" +
    "\032\uff6f\033\uff6f\034\uff6f\035\uff6f\036\uff6f\037\uff6f\040" +
    "\uff6f\041\uff6f\042\uff6f\043\uff6f\044\uff6f\045\uff6f\046\uff6f" +
    "\047\uff6f\050\uff6f\051\uff6f\052\uff6f\053\uff6f\054\uff6f\055" +
    "\uff6f\056\uff6f\001\002\000\004\005\267\001\002\000\036" +
    "\004\056\015\075\020\104\023\076\024\121\027\055\030" +
    "\061\042\052\043\042\057\123\060\046\061\057\062\115" +
    "\077\062\001\002\000\106\005\uff8c\006\uff8c\007\uff8c\010" +
    "\uff8c\012\uff8c\014\uff8c\015\uff8c\016\uff8c\017\uff8c\020\uff8c" +
    "\021\uff8c\022\uff8c\023\uff8c\024\uff8c\025\uff8c\026\uff8c\032" +
    "\uff8c\033\uff8c\034\uff8c\035\uff8c\036\uff8c\037\uff8c\040\uff8c" +
    "\041\uff8c\045\uff8c\046\uff8c\047\uff8c\050\uff8c\051\uff8c\052" +
    "\uff8c\053\uff8c\054\uff8c\055\uff8c\056\uff8c\001\002\000\040" +
    "\004\056\006\107\015\075\020\104\023\076\024\121\027" +
    "\055\030\061\042\052\043\042\057\123\060\046\061\057" +
    "\062\115\077\062\001\002\000\040\004\056\006\107\015" +
    "\075\020\104\023\076\024\121\027\055\030\061\042\052" +
    "\043\042\057\123\060\046\061\057\062\115\077\062\001" +
    "\002\000\040\004\056\005\275\015\075\020\104\023\076" +
    "\024\121\027\055\030\061\042\052\043\042\057\123\060" +
    "\046\061\057\062\115\077\062\001\002\000\006\005\277" +
    "\007\155\001\002\000\056\004\056\006\107\011\040\015" +
    "\075\020\104\023\076\024\121\027\055\030\061\042\052" +
    "\043\042\057\123\060\046\061\057\062\115\070\067\072" +
    "\112\073\054\074\050\075\101\076\073\077\062\001\002" +
    "\000\062\004\uffc4\006\uffc4\011\uffc4\012\uffc4\015\uffc4\020" +
    "\uffc4\023\uffc4\024\uffc4\027\uffc4\030\uffc4\042\uffc4\043\uffc4" +
    "\057\uffc4\060\uffc4\061\uffc4\062\uffc4\070\uffc4\071\uffc4\072" +
    "\uffc4\073\uffc4\074\uffc4\075\uffc4\076\uffc4\077\uffc4\001\002" +
    "\000\056\004\056\006\107\011\040\015\075\020\104\023" +
    "\076\024\121\027\055\030\061\042\052\043\042\057\123" +
    "\060\046\061\057\062\115\070\067\072\112\073\054\074" +
    "\050\075\101\076\073\077\062\001\002\000\062\004\uffc3" +
    "\006\uffc3\011\uffc3\012\uffc3\015\uffc3\020\uffc3\023\uffc3\024" +
    "\uffc3\027\uffc3\030\uffc3\042\uffc3\043\uffc3\057\uffc3\060\uffc3" +
    "\061\uffc3\062\uffc3\070\uffc3\071\uffc3\072\uffc3\073\uffc3\074" +
    "\uffc3\075\uffc3\076\uffc3\077\uffc3\001\002\000\106\005\uff88" +
    "\006\uff88\007\uff88\010\uff88\012\uff88\014\uff88\015\uff88\016" +
    "\uff88\017\uff88\020\uff88\021\uff88\022\uff88\023\uff88\024\uff88" +
    "\025\uff88\026\uff88\032\uff88\033\uff88\034\uff88\035\uff88\036" +
    "\uff88\037\uff88\040\uff88\041\uff88\045\uff88\046\uff88\047\uff88" +
    "\050\uff88\051\uff88\052\uff88\053\uff88\054\uff88\055\uff88\056" +
    "\uff88\001\002\000\036\004\056\015\075\020\104\023\076" +
    "\024\121\027\055\030\061\042\052\043\042\057\123\060" +
    "\046\061\057\062\115\077\062\001\002\000\062\004\uffc2" +
    "\006\uffc2\011\uffc2\012\uffc2\015\uffc2\020\uffc2\023\uffc2\024" +
    "\uffc2\027\uffc2\030\uffc2\042\uffc2\043\uffc2\057\uffc2\060\uffc2" +
    "\061\uffc2\062\uffc2\070\uffc2\071\uffc2\072\uffc2\073\uffc2\074" +
    "\uffc2\075\uffc2\076\uffc2\077\uffc2\001\002\000\076\002\uffc9" +
    "\004\uffc9\006\uffc9\011\uffc9\012\uffc9\015\uffc9\020\uffc9\023" +
    "\uffc9\024\uffc9\027\uffc9\030\uffc9\042\uffc9\043\uffc9\057\uffc9" +
    "\060\uffc9\061\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9\066" +
    "\uffc9\067\uffc9\070\uffc9\071\uffc9\072\uffc9\073\uffc9\074\uffc9" +
    "\075\uffc9\076\uffc9\077\uffc9\001\002\000\072\004\ufff9\006" +
    "\ufff9\011\ufff9\012\ufff9\015\ufff9\020\ufff9\023\ufff9\024\ufff9" +
    "\027\ufff9\030\ufff9\042\ufff9\043\ufff9\057\ufff9\060\ufff9\061" +
    "\ufff9\062\ufff9\063\ufff9\064\ufff9\065\ufff9\066\ufff9\067\ufff9" +
    "\070\ufff9\072\ufff9\073\ufff9\074\ufff9\075\ufff9\076\ufff9\077" +
    "\ufff9\001\002\000\060\004\056\006\107\011\040\012\307" +
    "\015\075\020\104\023\076\024\121\027\055\030\061\042" +
    "\052\043\042\057\123\060\046\061\057\062\115\070\067" +
    "\072\112\073\054\074\050\075\101\076\073\077\062\001" +
    "\002\000\076\002\uffcb\004\uffcb\006\uffcb\011\uffcb\012\uffcb" +
    "\015\uffcb\020\uffcb\023\uffcb\024\uffcb\027\uffcb\030\uffcb\042" +
    "\uffcb\043\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb\063\uffcb" +
    "\064\uffcb\065\uffcb\066\uffcb\067\uffcb\070\uffcb\071\uffcb\072" +
    "\uffcb\073\uffcb\074\uffcb\075\uffcb\076\uffcb\077\uffcb\001\002" +
    "\000\106\005\uff87\006\uff87\007\uff87\010\uff87\012\uff87\014" +
    "\uff87\015\uff87\016\uff87\017\uff87\020\uff87\021\uff87\022\uff87" +
    "\023\uff87\024\uff87\025\uff87\026\uff87\032\uff87\033\uff87\034" +
    "\uff87\035\uff87\036\uff87\037\uff87\040\uff87\041\uff87\045\uff87" +
    "\046\uff87\047\uff87\050\uff87\051\uff87\052\uff87\053\uff87\054" +
    "\uff87\055\uff87\056\uff87\001\002\000\006\005\ufff5\007\ufff5" +
    "\001\002\000\016\002\ufff8\063\ufff8\064\ufff8\065\ufff8\066" +
    "\ufff8\067\ufff8\001\002\000\006\005\ufff4\007\ufff4\001\002" +
    "\000\006\014\uffaf\032\253\001\002\000\004\014\316\001" +
    "\002\000\014\005\uffed\006\uffed\007\uffed\010\uffed\013\uffed" +
    "\001\002\000\036\004\056\015\075\020\104\023\076\024" +
    "\121\027\055\030\061\042\052\043\042\057\123\060\046" +
    "\061\057\062\115\077\062\001\002\000\004\014\321\001" +
    "\002\000\014\005\uffec\006\uffec\007\uffec\010\uffec\013\uffec" +
    "\001\002\000\016\004\uffea\005\uffea\006\uffea\007\uffea\010" +
    "\uffea\013\uffea\001\002\000\040\004\056\011\326\015\075" +
    "\020\104\023\076\024\121\027\055\030\061\042\052\043" +
    "\042\057\123\060\046\061\057\062\115\077\062\001\002" +
    "\000\010\006\uffe3\007\uffe3\012\uffe3\001\002\000\006\006" +
    "\uffe4\007\uffe4\001\002\000\040\004\056\011\326\015\075" +
    "\020\104\023\076\024\121\027\055\030\061\042\052\043" +
    "\042\057\123\060\046\061\057\062\115\077\062\001\002" +
    "\000\006\007\331\012\332\001\002\000\006\007\uffe1\012" +
    "\uffe1\001\002\000\040\004\056\011\326\015\075\020\104" +
    "\023\076\024\121\027\055\030\061\042\052\043\042\057" +
    "\123\060\046\061\057\062\115\077\062\001\002\000\010" +
    "\006\uffe2\007\uffe2\012\uffe2\001\002\000\006\007\uffe0\012" +
    "\uffe0\001\002\000\006\015\021\057\023\001\002\000\074" +
    "\002\ufffb\004\ufffb\006\ufffb\011\ufffb\012\ufffb\015\ufffb\020" +
    "\ufffb\023\ufffb\024\ufffb\027\ufffb\030\ufffb\042\ufffb\043\ufffb" +
    "\057\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb\064\ufffb\065" +
    "\ufffb\066\ufffb\067\ufffb\070\ufffb\072\ufffb\073\ufffb\074\ufffb" +
    "\075\ufffb\076\ufffb\077\ufffb\001\002\000\006\006\uffe6\007" +
    "\uffe6\001\002\000\016\002\uffff\063\uffff\064\uffff\065\uffff" +
    "\066\uffff\067\uffff\001\002\000\004\002\001\001\002\000" +
    "\012\005\uffdb\006\uffdb\015\uffdb\057\uffdb\001\002\000\014" +
    "\063\013\064\016\065\004\066\012\067\011\001\002\000" +
    "\014\005\uffdc\006\uffdc\011\344\015\uffdc\057\uffdc\001\002" +
    "\000\014\063\013\064\016\065\004\066\012\067\011\001" +
    "\002\000\006\015\021\057\023\001\002\000\016\012\350" +
    "\063\013\064\016\065\004\066\012\067\011\001\002\000" +
    "\006\015\021\057\023\001\002\000\012\005\uffd8\006\uffd8" +
    "\015\uffd8\057\uffd8\001\002\000\006\006\uffef\007\uffef\001" +
    "\002\000\006\006\354\007\353\001\002\000\006\015\021" +
    "\057\023\001\002\000\016\012\uffd5\063\uffd5\064\uffd5\065" +
    "\uffd5\066\uffd5\067\uffd5\001\002\000\006\006\uffee\007\uffee" +
    "\001\002\000\006\006\357\007\353\001\002\000\016\012" +
    "\uffd6\063\uffd6\064\uffd6\065\uffd6\066\uffd6\067\uffd6\001\002" +
    "\000\016\012\361\063\013\064\016\065\004\066\012\067" +
    "\011\001\002\000\012\005\uffd7\006\uffd7\015\uffd7\057\uffd7" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\357\000\016\002\013\003\005\004\006\005\007\021" +
    "\014\022\004\001\001\000\002\001\001\000\004\023\340" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\336\004\006\005\007\021\014\022\004\001" +
    "\001\000\014\010\017\013\025\014\023\015\016\016\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\026\001" +
    "\001\000\002\001\001\000\044\040\314\041\313\042\102" +
    "\043\107\044\064\045\105\046\063\050\116\052\104\054" +
    "\043\056\112\060\065\062\126\063\117\064\101\067\057" +
    "\070\076\001\001\000\012\006\034\007\031\021\032\022" +
    "\004\001\001\000\002\001\001\000\010\010\312\013\216" +
    "\014\023\001\001\000\004\031\311\001\001\000\002\001" +
    "\001\000\010\007\310\021\032\022\004\001\001\000\004" +
    "\031\040\001\001\000\074\004\115\021\073\022\004\025" +
    "\042\026\070\027\121\030\113\031\050\032\077\033\044" +
    "\034\046\035\067\036\110\041\062\042\102\043\107\044" +
    "\064\045\105\046\063\050\116\052\104\054\043\056\112" +
    "\060\065\062\071\063\117\064\101\067\057\070\076\001" +
    "\001\000\002\001\001\000\014\062\307\063\117\064\101" +
    "\067\057\070\076\001\001\000\072\004\304\021\073\022" +
    "\004\026\070\027\305\030\113\031\050\032\077\033\044" +
    "\034\046\035\067\036\110\041\062\042\102\043\107\044" +
    "\064\045\105\046\063\050\116\052\104\054\043\056\112" +
    "\060\065\062\071\063\117\064\101\067\057\070\076\001" +
    "\001\000\004\055\143\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\062\300\063\117\064\101\067\057\070\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\054\021\257\022\004\035\256\036\110\041\062" +
    "\042\102\043\107\044\064\045\105\046\063\050\116\052" +
    "\104\054\043\056\112\060\065\061\265\062\071\063\117" +
    "\064\101\067\057\070\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\062\254\063\117" +
    "\064\101\067\057\070\076\001\001\000\002\001\001\000" +
    "\004\047\170\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\037\234\001\001\000\046\035\224\036\110\041\062" +
    "\042\102\043\107\044\064\045\105\046\063\050\116\052" +
    "\104\054\043\056\112\060\065\062\071\063\117\064\101" +
    "\067\057\070\076\001\001\000\014\010\017\013\216\014" +
    "\023\015\016\016\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\065\177\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\053\137\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\057\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\051\132\001\001" +
    "\000\016\060\125\062\126\063\117\064\101\067\057\070" +
    "\076\001\001\000\002\001\001\000\062\026\124\030\113" +
    "\031\050\032\077\033\044\034\046\035\067\036\110\041" +
    "\062\042\102\043\107\044\064\045\105\046\063\050\116" +
    "\052\104\054\043\056\112\060\065\062\071\063\117\064" +
    "\101\067\057\070\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\052\134\054\043\056\112\060\065\062\126\063" +
    "\117\064\101\067\057\070\076\001\001\000\002\001\001" +
    "\000\004\053\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\054\140\056\112\060\065\062\126\063\117" +
    "\064\101\067\057\070\076\001\001\000\004\055\143\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\056\144" +
    "\060\065\062\126\063\117\064\101\067\057\070\076\001" +
    "\001\000\004\057\146\001\001\000\002\001\001\000\016" +
    "\060\151\062\126\063\117\064\101\067\057\070\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\035\153\036\110\041\062\042\102\043\107\044" +
    "\064\045\105\046\063\050\116\052\104\054\043\056\112" +
    "\060\065\062\071\063\117\064\101\067\057\070\076\001" +
    "\001\000\002\001\001\000\044\036\157\041\062\042\102" +
    "\043\107\044\064\045\105\046\063\050\116\052\104\054" +
    "\043\056\112\060\065\062\071\063\117\064\101\067\057" +
    "\070\076\001\001\000\062\026\156\030\113\031\050\032" +
    "\077\033\044\034\046\035\067\036\110\041\062\042\102" +
    "\043\107\044\064\045\105\046\063\050\116\052\104\054" +
    "\043\056\112\060\065\062\071\063\117\064\101\067\057" +
    "\070\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\044\161\045\105\046\063\050\116\052\104\054\043" +
    "\056\112\060\065\062\126\063\117\064\101\067\057\070" +
    "\076\001\001\000\002\001\001\000\032\045\163\046\063" +
    "\050\116\052\104\054\043\056\112\060\065\062\126\063" +
    "\117\064\101\067\057\070\076\001\001\000\002\001\001" +
    "\000\030\046\165\050\116\052\104\054\043\056\112\060" +
    "\065\062\126\063\117\064\101\067\057\070\076\001\001" +
    "\000\004\047\170\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\050\171\052\104\054\043\056\112\060\065" +
    "\062\126\063\117\064\101\067\057\070\076\001\001\000" +
    "\004\051\132\001\001\000\036\043\173\044\064\045\105" +
    "\046\063\050\116\052\104\054\043\056\112\060\065\062" +
    "\126\063\117\064\101\067\057\070\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\035\212\036\110\041\062" +
    "\042\102\043\107\044\064\045\105\046\063\050\116\052" +
    "\104\054\043\056\112\060\065\062\071\063\117\064\101" +
    "\067\057\070\076\001\001\000\002\001\001\000\046\036" +
    "\203\041\062\042\102\043\107\044\064\045\105\046\063" +
    "\050\116\052\104\054\043\056\112\060\065\062\071\063" +
    "\117\064\101\066\205\067\057\070\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\036" +
    "\210\041\062\042\102\043\107\044\064\045\105\046\063" +
    "\050\116\052\104\054\043\056\112\060\065\062\071\063" +
    "\117\064\101\067\057\070\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\026\001\001\000\012\006\221\007\031\021\032\022" +
    "\004\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\036\242\041\062\042\102\043\107\044\064\045\105" +
    "\046\063\050\116\052\104\054\043\056\112\060\065\062" +
    "\071\063\117\064\101\067\057\070\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\035\245\036\110\041\062\042\102\043\107\044" +
    "\064\045\105\046\063\050\116\052\104\054\043\056\112" +
    "\060\065\062\071\063\117\064\101\067\057\070\076\001" +
    "\001\000\002\001\001\000\062\026\247\030\113\031\050" +
    "\032\077\033\044\034\046\035\067\036\110\041\062\042" +
    "\102\043\107\044\064\045\105\046\063\050\116\052\104" +
    "\054\043\056\112\060\065\062\071\063\117\064\101\067" +
    "\057\070\076\001\001\000\002\001\001\000\062\026\251" +
    "\030\113\031\050\032\077\033\044\034\046\035\067\036" +
    "\110\041\062\042\102\043\107\044\064\045\105\046\063" +
    "\050\116\052\104\054\043\056\112\060\065\062\071\063" +
    "\117\064\101\067\057\070\076\001\001\000\002\001\001" +
    "\000\040\042\253\043\107\044\064\045\105\046\063\050" +
    "\116\052\104\054\043\056\112\060\065\062\126\063\117" +
    "\064\101\067\057\070\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\054\021\257\022\004\035\256\036\110" +
    "\041\062\042\102\043\107\044\064\045\105\046\063\050" +
    "\116\052\104\054\043\056\112\060\065\061\260\062\071" +
    "\063\117\064\101\067\057\070\076\001\001\000\002\001" +
    "\001\000\004\014\262\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\060\267\062\126\063\117" +
    "\064\101\067\057\070\076\001\001\000\002\001\001\000" +
    "\050\030\271\035\067\036\110\041\062\042\102\043\107" +
    "\044\064\045\105\046\063\050\116\052\104\054\043\056" +
    "\112\060\065\062\071\063\117\064\101\067\057\070\076" +
    "\001\001\000\050\030\272\035\067\036\110\041\062\042" +
    "\102\043\107\044\064\045\105\046\063\050\116\052\104" +
    "\054\043\056\112\060\065\062\071\063\117\064\101\067" +
    "\057\070\076\001\001\000\046\035\273\036\110\041\062" +
    "\042\102\043\107\044\064\045\105\046\063\050\116\052" +
    "\104\054\043\056\112\060\065\062\071\063\117\064\101" +
    "\067\057\070\076\001\001\000\002\001\001\000\062\026" +
    "\275\030\113\031\050\032\077\033\044\034\046\035\067" +
    "\036\110\041\062\042\102\043\107\044\064\045\105\046" +
    "\063\050\116\052\104\054\043\056\112\060\065\062\071" +
    "\063\117\064\101\067\057\070\076\001\001\000\002\001" +
    "\001\000\062\026\277\030\113\031\050\032\077\033\044" +
    "\034\046\035\067\036\110\041\062\042\102\043\107\044" +
    "\064\045\105\046\063\050\116\052\104\054\043\056\112" +
    "\060\065\062\071\063\117\064\101\067\057\070\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\035\256" +
    "\036\110\041\062\042\102\043\107\044\064\045\105\046" +
    "\063\050\116\052\104\054\043\056\112\060\065\062\071" +
    "\063\117\064\101\067\057\070\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\026\124" +
    "\030\113\031\050\032\077\033\044\034\046\035\067\036" +
    "\110\041\062\042\102\043\107\044\064\045\105\046\063" +
    "\050\116\052\104\054\043\056\112\060\065\062\071\063" +
    "\117\064\101\067\057\070\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\040\317\041\313\042\102\043\107\044" +
    "\064\045\105\046\063\050\116\052\104\054\043\056\112" +
    "\060\065\062\126\063\117\064\101\067\057\070\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\017\324\036\323\041\062\042\102\043\107\044" +
    "\064\045\105\046\063\050\116\052\104\054\043\056\112" +
    "\060\065\062\071\063\117\064\101\067\057\070\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\017\327" +
    "\020\326\036\323\041\062\042\102\043\107\044\064\045" +
    "\105\046\063\050\116\052\104\054\043\056\112\060\065" +
    "\062\071\063\117\064\101\067\057\070\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\017\332\036\323" +
    "\041\062\042\102\043\107\044\064\045\105\046\063\050" +
    "\116\052\104\054\043\056\112\060\065\062\071\063\117" +
    "\064\101\067\057\070\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\010\017\013\216\014\023\016\335" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\021\344" +
    "\022\004\024\357\001\001\000\002\001\001\000\010\021" +
    "\344\022\004\024\345\001\001\000\012\010\350\011\355" +
    "\013\216\014\023\001\001\000\006\021\346\022\004\001" +
    "\001\000\012\010\350\011\351\013\216\014\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\354\013\216\014\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\021\346\022\004\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer("\tParsing error");
    	if (info instanceof java_cup.runtime.Symbol) {
    		java_cup.runtime.Symbol s = (java_cup.runtime.Symbol) info;

   			if (s.left >= 0) {
   				m.append(" in line " + (s.left +1 ));
   				if (s.right >= 0) { m.append(", column " + (s.right + 1));
   				}
   			}
   		}
   		m.append(" : " + message);
   		System.err.println(m);
   	}

   	public Parser(Reader input) {
   		this(new Yylex(input));
   	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= external_definition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= program external_definition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // external_definition ::= declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("external_definition",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // external_definition ::= function_definition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("external_definition",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= type_specifier COLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= type_specifier init_declarator_list COLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration_list ::= declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration_list ::= declaration_list declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // function_definition ::= type_specifier plain_declarator PARAL PARAR compound_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_definition",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // function_definition ::= type_specifier plain_declarator PARAL parameter_list PARAR compound_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_definition",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // parameter_list ::= plain_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parameter_list ::= parameter_list COMMA plain_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // plain_declaration ::= type_specifier declarator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plain_declaration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declarator ::= plain_declarator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declarator ::= plain_declarator PARAL PARAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declarator ::= plain_declarator PARAL parameter_list PARAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declarator ::= plain_declarator array_dimensions 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declarator_list ::= declarator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declarator_list ::= declarator_list COMMA declarator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // array_dimensions ::= SQUARL constant_expression SQUARR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_dimensions",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // array_dimensions ::= array_dimensions SQUARL constant_expression SQUARR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_dimensions",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // plain_declarator ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plain_declarator",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // plain_declarator ::= asterisks IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plain_declarator",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // asterisks ::= MUL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asterisks",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // asterisks ::= asterisks MUL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asterisks",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // init_declarator_list ::= init_declarator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_declarator_list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // init_declarator_list ::= init_declarator_list COMMA init_declarator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_declarator_list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // init_declarator ::= declarator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_declarator",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // init_declarator ::= declarator ASSIGN initializer 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_declarator",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // initializer ::= assignment_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializer",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // initializer ::= CURLYL initializer_list CURLYR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializer",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // initializer_list ::= initializer 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializer_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // initializer_list ::= initializer_list COMMA initializer 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializer_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type_specifier ::= VOID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // type_specifier ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // type_specifier ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // type_specifier ::= struct_or_union IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // type_specifier ::= struct_or_union struct_or_union_definition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // struct_or_union ::= STRUCT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_or_union",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // struct_or_union ::= UNION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_or_union",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // struct_or_union_definition ::= IDENTIFIER CURLYL field_list CURLYR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_or_union_definition",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // struct_or_union_definition ::= CURLYL field_list CURLYR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_or_union_definition",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // field_list ::= type_specifier declarator_list COLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // field_list ::= field_list type_specifier declarator_list COLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement ::= expression_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statement ::= compound_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement ::= selection_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement ::= iteration_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // statement ::= jump_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // statement_list ::= statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // statement_list ::= statement_list statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression_statement ::= expression COLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_statement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression_statement ::= COLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_statement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // compound_statement ::= CURLYL declaration_list statement_list CURLYR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_statement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // compound_statement ::= CURLYL statement_list CURLYR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_statement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // compound_statement ::= CURLYL declaration_list CURLYR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_statement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // compound_statement ::= CURLYL CURLYR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_statement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // selection_statement ::= IF PARAL expression PARAR statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selection_statement",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // selection_statement ::= IF PARAL expression PARAR statement ELSE statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selection_statement",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // iteration_statement ::= WHILE PARAL expression PARAR statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // iteration_statement ::= FOR PARAL expression_statement expression_statement PARAR statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // iteration_statement ::= FOR PARAL expression_statement expression_statement expression PARAR statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // jump_statement ::= CONTINUE COLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // jump_statement ::= BREAK COLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // jump_statement ::= RETURN COLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // jump_statement ::= RETURN expression COLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expression ::= assignment_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression ::= expression COMMA assignment_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // assignment_expression ::= logical_or_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // assignment_expression ::= unary_expression assignment_operator assignment_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // assignment_operator ::= ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // assignment_operator ::= MUL_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // assignment_operator ::= DIV_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // assignment_operator ::= MOD_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // assignment_operator ::= ADD_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // assignment_operator ::= SUB_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // assignment_operator ::= SHL_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // assignment_operator ::= SHR_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // assignment_operator ::= AND_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // assignment_operator ::= OR_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // assignment_operator ::= XOR_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // constant_expression ::= logical_or_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_expression",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // logical_or_expression ::= logical_and_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_or_expression",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // logical_or_expression ::= logical_or_expression OR_OP logical_and_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_or_expression",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // logical_and_expression ::= inclusive_or_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_and_expression",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // logical_and_expression ::= logical_and_expression AND_OP inclusive_or_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_and_expression",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // inclusive_or_expression ::= exclusive_or_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inclusive_or_expression",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // inclusive_or_expression ::= inclusive_or_expression OR exclusive_or_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inclusive_or_expression",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // exclusive_or_expression ::= and_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exclusive_or_expression",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // exclusive_or_expression ::= exclusive_or_expression XOR and_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exclusive_or_expression",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // and_expression ::= equality_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("and_expression",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // and_expression ::= and_expression ADRESS equality_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("and_expression",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // equality_expression ::= relational_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_expression",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // equality_expression ::= equality_expression equality_operator relational_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_expression",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // equality_operator ::= EQ_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_operator",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // equality_operator ::= NE_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_operator",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // relational_expression ::= shift_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expression",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // relational_expression ::= relational_expression relational_operator shift_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expression",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // relational_operator ::= LESS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // relational_operator ::= GREATER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // relational_operator ::= LE_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // relational_operator ::= GE_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // shift_expression ::= additive_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shift_expression",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // shift_expression ::= shift_expression shift_operator additive_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shift_expression",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // shift_operator ::= SHL_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shift_operator",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // shift_operator ::= SHR_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shift_operator",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // additive_expression ::= multiplicative_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_expression",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // additive_expression ::= additive_expression additive_operator multiplicative_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_expression",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // additive_operator ::= ADD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_operator",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // additive_operator ::= SUB 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_operator",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // multiplicative_expression ::= cast_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // multiplicative_expression ::= multiplicative_expression multiplicative_operator cast_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // multiplicative_operator ::= MUL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_operator",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // multiplicative_operator ::= DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_operator",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // multiplicative_operator ::= MOD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_operator",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // cast_expression ::= unary_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cast_expression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // cast_expression ::= PARAL type_name PARAR cast_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cast_expression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // type_name ::= type_specifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_name",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // type_name ::= type_specifier asterisks 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_name",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // unary_expression ::= postfix_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // unary_expression ::= INC_OP unary_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // unary_expression ::= DEC_OP unary_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // unary_expression ::= unary_operator cast_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // unary_expression ::= SIZEOF unary_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // unary_expression ::= SIZEOF PARAL type_name PARAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // unary_operator ::= ADRESS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // unary_operator ::= MUL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // unary_operator ::= ADD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // unary_operator ::= SUB 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // unary_operator ::= TILDE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // unary_operator ::= NOT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // postfix_expression ::= primary_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // postfix_expression ::= postfix_expression postfix 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // postfix ::= SQUARL expression SQUARR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // postfix ::= PARAL PARAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // postfix ::= PARAL argument_list PARAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // postfix ::= DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // postfix ::= PTR_OP IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // postfix ::= INC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // postfix ::= DEC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // argument_list ::= assignment_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument_list",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // argument_list ::= argument_list COMMA assignment_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument_list",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // primary_expression ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // primary_expression ::= constant 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // primary_expression ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // primary_expression ::= PARAL expression PARAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // constant ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // constant ::= CHARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
