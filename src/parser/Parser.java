
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package parser;

import lexer.Yylex;
import java.util.*;
import java.io.Reader;
import ast.nodes.*;
import ast.nodes.declaration.*;
import ast.nodes.statment.*;
import ast.nodes.type.*;
import ast.nodes.initialization.*;
import ast.nodes.expression.*;
import exception.SyntacticError;
import table.SyntacticTable;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symbols.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\270\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\003\003\000\002\003\003\000\002\071\002" +
    "\000\002\022\006\000\002\005\003\000\002\005\004\000" +
    "\002\005\003\000\002\005\004\000\002\004\004\000\002" +
    "\004\005\000\002\004\005\000\002\072\002\000\002\004" +
    "\007\000\002\007\004\000\002\007\004\000\002\014\003" +
    "\000\002\014\004\000\002\015\003\000\002\015\003\000" +
    "\002\015\005\000\002\073\002\000\002\015\006\000\002" +
    "\074\002\000\002\075\002\000\002\015\010\000\002\015" +
    "\006\000\002\015\005\000\002\017\002\000\002\017\006" +
    "\000\002\017\005\000\002\016\003\000\002\016\004\000" +
    "\002\011\003\000\002\011\005\000\002\010\003\000\002" +
    "\010\005\000\002\006\003\000\002\006\005\000\002\013" +
    "\003\000\002\013\005\000\002\023\003\000\002\023\005" +
    "\000\002\024\003\000\002\024\005\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\004\000\002" +
    "\025\007\000\002\025\006\000\002\025\004\000\002\025" +
    "\007\000\002\025\006\000\002\025\003\000\002\027\005" +
    "\000\002\027\006\000\002\020\003\000\002\020\004\000" +
    "\002\021\003\000\002\021\003\000\002\021\005\000\002" +
    "\076\002\000\002\021\006\000\002\077\002\000\002\100" +
    "\002\000\002\021\010\000\002\021\006\000\002\021\005" +
    "\000\002\012\003\000\002\012\005\000\002\030\003\000" +
    "\002\101\002\000\002\030\004\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\031\003\000\002\031" +
    "\004\000\002\032\004\000\002\032\003\000\002\102\002" +
    "\000\002\033\007\000\002\103\002\000\002\033\006\000" +
    "\002\104\002\000\002\033\006\000\002\105\002\000\002" +
    "\033\005\000\002\034\007\000\002\034\011\000\002\035" +
    "\007\000\002\035\010\000\002\035\011\000\002\036\004" +
    "\000\002\036\004\000\002\036\004\000\002\036\005\000" +
    "\002\037\003\000\002\037\005\000\002\040\003\000\002" +
    "\040\005\000\002\061\003\000\002\061\003\000\002\061" +
    "\003\000\002\061\003\000\002\061\003\000\002\061\003" +
    "\000\002\061\003\000\002\061\003\000\002\061\003\000" +
    "\002\061\003\000\002\061\003\000\002\041\003\000\002" +
    "\042\003\000\002\042\005\000\002\043\003\000\002\043" +
    "\005\000\002\044\003\000\002\044\005\000\002\045\003" +
    "\000\002\045\005\000\002\046\003\000\002\046\005\000" +
    "\002\047\003\000\002\047\005\000\002\062\003\000\002" +
    "\062\003\000\002\050\003\000\002\050\005\000\002\063" +
    "\003\000\002\063\003\000\002\063\003\000\002\063\003" +
    "\000\002\051\003\000\002\051\005\000\002\064\003\000" +
    "\002\064\003\000\002\052\003\000\002\052\005\000\002" +
    "\065\003\000\002\065\003\000\002\053\003\000\002\053" +
    "\005\000\002\066\003\000\002\066\003\000\002\066\003" +
    "\000\002\054\003\000\002\054\006\000\002\026\003\000" +
    "\002\026\004\000\002\055\003\000\002\055\004\000\002" +
    "\055\004\000\002\055\006\000\002\067\003\000\002\067" +
    "\003\000\002\067\003\000\002\067\003\000\002\067\003" +
    "\000\002\067\003\000\002\067\003\000\002\067\003\000" +
    "\002\056\003\000\002\056\006\000\002\056\005\000\002" +
    "\056\006\000\002\056\005\000\002\056\005\000\002\056" +
    "\005\000\002\056\005\000\002\056\004\000\002\056\004" +
    "\000\002\060\003\000\002\060\005\000\002\057\003\000" +
    "\002\057\003\000\002\057\003\000\002\057\003\000\002" +
    "\057\005\000\002\070\003\000\002\070\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011c\000\020\060\016\064\012\065\017\066\004\067" +
    "\011\070\010\101\014\001\002\000\022\004\uffd1\005\uffd1" +
    "\006\uffd1\007\uffd1\013\uffd1\015\uffd1\057\uffd1\060\uffd1\001" +
    "\002\000\022\002\000\060\000\064\000\065\000\066\000" +
    "\067\000\070\000\101\000\001\002\000\022\002\ufffe\060" +
    "\ufffe\064\ufffe\065\ufffe\066\ufffe\067\ufffe\070\ufffe\101\ufffe" +
    "\001\002\000\022\002\ufffd\060\ufffd\064\ufffd\065\ufffd\066" +
    "\ufffd\067\ufffd\070\ufffd\101\ufffd\001\002\000\006\011\u0118" +
    "\057\u0119\001\002\000\006\011\365\057\366\001\002\000" +
    "\022\004\uffd2\005\uffd2\006\uffd2\007\uffd2\013\uffd2\015\uffd2" +
    "\057\uffd2\060\uffd2\001\002\000\022\002\364\060\016\064" +
    "\012\065\017\066\004\067\011\070\010\101\014\001\002" +
    "\000\016\060\016\064\012\065\017\066\004\067\011\070" +
    "\010\001\002\000\014\004\027\006\020\015\025\057\023" +
    "\060\024\001\002\000\022\004\uffc9\005\uffc9\006\uffc9\007" +
    "\uffc9\013\uffc9\015\uffc9\057\uffc9\060\uffc9\001\002\000\022" +
    "\004\uffd0\005\uffd0\006\uffd0\007\uffd0\013\uffd0\015\uffd0\057" +
    "\uffd0\060\uffd0\001\002\000\100\002\ufff6\004\ufff6\006\ufff6" +
    "\011\ufff6\012\ufff6\015\ufff6\020\ufff6\023\ufff6\024\ufff6\027" +
    "\ufff6\030\ufff6\042\ufff6\043\ufff6\057\ufff6\060\ufff6\061\ufff6" +
    "\062\ufff6\063\ufff6\064\ufff6\065\ufff6\066\ufff6\067\ufff6\070" +
    "\ufff6\071\ufff6\073\ufff6\074\ufff6\075\ufff6\076\ufff6\077\ufff6" +
    "\100\ufff6\101\ufff6\001\002\000\006\006\350\007\347\001" +
    "\002\000\020\004\317\005\uffef\006\uffef\007\uffef\010\uffef" +
    "\011\uffef\013\316\001\002\000\020\004\uffed\005\uffed\006" +
    "\uffed\007\uffed\010\uffed\011\uffed\013\uffed\001\002\000\020" +
    "\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec\013" +
    "\uffec\001\002\000\012\004\027\015\025\057\023\060\024" +
    "\001\002\000\012\006\uffd8\007\uffd8\010\034\011\ufffc\001" +
    "\002\000\012\004\027\015\025\057\023\060\024\001\002" +
    "\000\006\006\uffda\007\uffda\001\002\000\004\005\032\001" +
    "\002\000\020\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb" +
    "\011\uffeb\013\uffeb\001\002\000\004\011\224\001\002\000" +
    "\040\004\072\011\074\015\071\020\037\023\064\024\052" +
    "\027\051\030\043\042\061\043\075\057\045\061\067\062" +
    "\042\063\054\100\035\001\002\000\036\004\221\015\071" +
    "\020\037\023\064\024\052\027\051\030\043\042\061\043" +
    "\075\057\045\061\067\062\042\063\054\100\035\001\002" +
    "\000\122\004\uff5c\005\uff5c\006\uff5c\007\uff5c\010\uff5c\012" +
    "\uff5c\013\uff5c\014\uff5c\015\uff5c\016\uff5c\017\uff5c\020\uff5c" +
    "\021\uff5c\022\uff5c\023\uff5c\024\uff5c\025\uff5c\026\uff5c\031" +
    "\uff5c\032\uff5c\033\uff5c\034\uff5c\035\uff5c\036\uff5c\037\uff5c" +
    "\040\uff5c\041\uff5c\042\uff5c\043\uff5c\044\uff5c\045\uff5c\046" +
    "\uff5c\047\uff5c\050\uff5c\051\uff5c\052\uff5c\053\uff5c\054\uff5c" +
    "\055\uff5c\056\uff5c\001\002\000\036\004\uff64\015\uff64\020" +
    "\uff64\023\uff64\024\uff64\027\uff64\030\uff64\042\uff64\043\uff64" +
    "\057\uff64\061\uff64\062\uff64\063\uff64\100\uff64\001\002\000" +
    "\010\006\uffd6\007\uffd6\012\uffd6\001\002\000\060\005\uff71" +
    "\006\uff71\007\uff71\012\uff71\014\uff71\015\uff71\016\uff71\017" +
    "\uff71\020\uff71\021\uff71\022\uff71\023\uff71\024\uff71\025\uff71" +
    "\026\uff71\032\uff71\033\uff71\034\uff71\035\uff71\036\uff71\037" +
    "\uff71\040\uff71\041\uff71\001\002\000\122\004\uff4e\005\uff4e" +
    "\006\uff4e\007\uff4e\010\uff4e\012\uff4e\013\uff4e\014\uff4e\015" +
    "\uff4e\016\uff4e\017\uff4e\020\uff4e\021\uff4e\022\uff4e\023\uff4e" +
    "\024\uff4e\025\uff4e\026\uff4e\031\uff4e\032\uff4e\033\uff4e\034" +
    "\uff4e\035\uff4e\036\uff4e\037\uff4e\040\uff4e\041\uff4e\042\uff4e" +
    "\043\uff4e\044\uff4e\045\uff4e\046\uff4e\047\uff4e\050\uff4e\051" +
    "\uff4e\052\uff4e\053\uff4e\054\uff4e\055\uff4e\056\uff4e\001\002" +
    "\000\036\004\uff5f\015\uff5f\020\uff5f\023\uff5f\024\uff5f\027" +
    "\uff5f\030\uff5f\042\uff5f\043\uff5f\057\uff5f\061\uff5f\062\uff5f" +
    "\063\uff5f\100\uff5f\001\002\000\124\004\uff4d\005\uff4d\006" +
    "\uff4d\007\uff4d\010\uff4d\012\uff4d\013\uff4d\014\uff4d\015\uff4d" +
    "\016\uff4d\017\uff4d\020\uff4d\021\uff4d\022\uff4d\023\uff4d\024" +
    "\uff4d\025\uff4d\026\uff4d\031\uff4d\032\uff4d\033\uff4d\034\uff4d" +
    "\035\uff4d\036\uff4d\037\uff4d\040\uff4d\041\uff4d\042\uff4d\043" +
    "\uff4d\044\uff4d\045\uff4d\046\uff4d\047\uff4d\050\uff4d\051\uff4d" +
    "\052\uff4d\053\uff4d\054\uff4d\055\uff4d\056\uff4d\063\217\001" +
    "\002\000\122\004\uff50\005\uff50\006\uff50\007\uff50\010\uff50" +
    "\012\uff50\013\uff50\014\uff50\015\uff50\016\uff50\017\uff50\020" +
    "\uff50\021\uff50\022\uff50\023\uff50\024\uff50\025\uff50\026\uff50" +
    "\031\uff50\032\uff50\033\uff50\034\uff50\035\uff50\036\uff50\037" +
    "\uff50\040\uff50\041\uff50\042\uff50\043\uff50\044\uff50\045\uff50" +
    "\046\uff50\047\uff50\050\uff50\051\uff50\052\uff50\053\uff50\054" +
    "\uff50\055\uff50\056\uff50\001\002\000\106\005\uff6c\006\uff6c" +
    "\007\uff6c\010\211\012\uff6c\014\uff6c\015\uff6c\016\uff6c\017" +
    "\uff6c\020\uff6c\021\uff6c\022\uff6c\023\uff6c\024\uff6c\025\uff6c" +
    "\026\uff6c\032\uff6c\033\uff6c\034\uff6c\035\uff6c\036\uff6c\037" +
    "\uff6c\040\uff6c\041\uff6c\045\203\046\206\047\212\050\204" +
    "\051\205\052\215\053\214\054\202\055\213\056\207\001" +
    "\002\000\026\005\uff87\006\uff87\007\uff87\012\uff87\014\uff87" +
    "\016\uff87\017\uff87\020\134\032\uff87\033\uff87\001\002\000" +
    "\046\005\uff7f\006\uff7f\007\uff7f\012\uff7f\014\uff7f\016\uff7f" +
    "\017\uff7f\020\uff7f\021\uff7f\022\uff7f\032\uff7f\033\uff7f\034" +
    "\uff7f\035\uff7f\036\uff7f\037\uff7f\040\151\041\150\001\002" +
    "\000\036\004\uff60\015\uff60\020\uff60\023\uff60\024\uff60\027" +
    "\uff60\030\uff60\042\uff60\043\uff60\057\uff60\061\uff60\062\uff60" +
    "\063\uff60\100\uff60\001\002\000\036\004\uff61\015\uff61\020" +
    "\uff61\023\uff61\024\uff61\027\uff61\030\uff61\042\uff61\043\uff61" +
    "\057\uff61\061\uff61\062\uff61\063\uff61\100\uff61\001\002\000" +
    "\122\004\163\005\uff68\006\uff68\007\uff68\010\uff68\012\uff68" +
    "\013\164\014\uff68\015\uff68\016\uff68\017\uff68\020\uff68\021" +
    "\uff68\022\uff68\023\uff68\024\uff68\025\uff68\026\uff68\031\165" +
    "\032\uff68\033\uff68\034\uff68\035\uff68\036\uff68\037\uff68\040" +
    "\uff68\041\uff68\042\160\043\161\044\162\045\uff68\046\uff68" +
    "\047\uff68\050\uff68\051\uff68\052\uff68\053\uff68\054\uff68\055" +
    "\uff68\056\uff68\001\002\000\124\004\uff4b\005\uff4b\006\uff4b" +
    "\007\uff4b\010\uff4b\012\uff4b\013\uff4b\014\uff4b\015\uff4b\016" +
    "\uff4b\017\uff4b\020\uff4b\021\uff4b\022\uff4b\023\uff4b\024\uff4b" +
    "\025\uff4b\026\uff4b\031\uff4b\032\uff4b\033\uff4b\034\uff4b\035" +
    "\uff4b\036\uff4b\037\uff4b\040\uff4b\041\uff4b\042\uff4b\043\uff4b" +
    "\044\uff4b\045\uff4b\046\uff4b\047\uff4b\050\uff4b\051\uff4b\052" +
    "\uff4b\053\uff4b\054\uff4b\055\uff4b\056\uff4b\063\uff4b\001\002" +
    "\000\024\005\uff89\006\uff89\007\uff89\012\uff89\014\uff89\016" +
    "\uff89\017\132\032\uff89\033\uff89\001\002\000\022\005\uff8b" +
    "\006\uff8b\007\uff8b\012\uff8b\014\uff8b\016\130\032\uff8b\033" +
    "\uff8b\001\002\000\052\005\uff79\006\uff79\007\uff79\012\uff79" +
    "\014\uff79\016\uff79\017\uff79\020\uff79\021\uff79\022\uff79\023" +
    "\155\024\154\032\uff79\033\uff79\034\uff79\035\uff79\036\uff79" +
    "\037\uff79\040\uff79\041\uff79\001\002\000\042\005\uff83\006" +
    "\uff83\007\uff83\012\uff83\014\uff83\016\uff83\017\uff83\020\uff83" +
    "\021\146\022\143\032\uff83\033\uff83\034\uff83\035\uff83\036" +
    "\142\037\144\001\002\000\036\004\uff5e\015\uff5e\020\uff5e" +
    "\023\uff5e\024\uff5e\027\uff5e\030\uff5e\042\uff5e\043\uff5e\057" +
    "\uff5e\061\uff5e\062\uff5e\063\uff5e\100\uff5e\001\002\000\032" +
    "\005\uff85\006\uff85\007\uff85\012\uff85\014\uff85\016\uff85\017" +
    "\uff85\020\uff85\032\uff85\033\uff85\034\136\035\137\001\002" +
    "\000\020\005\uff8d\006\uff8d\007\uff8d\012\uff8d\014\uff8d\032" +
    "\uff8d\033\126\001\002\000\036\004\uff62\015\uff62\020\uff62" +
    "\023\uff62\024\uff62\027\uff62\030\uff62\042\uff62\043\uff62\057" +
    "\uff62\061\uff62\062\uff62\063\uff62\100\uff62\001\002\000\016" +
    "\005\uff9b\006\uff9b\007\uff9b\012\uff9b\014\uff9b\032\124\001" +
    "\002\000\060\005\uff75\006\uff75\007\uff75\012\uff75\014\uff75" +
    "\015\121\016\uff75\017\uff75\020\uff75\021\uff75\022\uff75\023" +
    "\uff75\024\uff75\025\122\026\117\032\uff75\033\uff75\034\uff75" +
    "\035\uff75\036\uff75\037\uff75\040\uff75\041\uff75\001\002\000" +
    "\122\004\uff4f\005\uff4f\006\uff4f\007\uff4f\010\uff4f\012\uff4f" +
    "\013\uff4f\014\uff4f\015\uff4f\016\uff4f\017\uff4f\020\uff4f\021" +
    "\uff4f\022\uff4f\023\uff4f\024\uff4f\025\uff4f\026\uff4f\031\uff4f" +
    "\032\uff4f\033\uff4f\034\uff4f\035\uff4f\036\uff4f\037\uff4f\040" +
    "\uff4f\041\uff4f\042\uff4f\043\uff4f\044\uff4f\045\uff4f\046\uff4f" +
    "\047\uff4f\050\uff4f\051\uff4f\052\uff4f\053\uff4f\054\uff4f\055" +
    "\uff4f\056\uff4f\001\002\000\036\004\072\015\071\020\037" +
    "\023\064\024\052\027\051\030\043\042\061\043\075\057" +
    "\045\061\067\062\042\063\054\100\035\001\002\000\036" +
    "\004\uff63\015\uff63\020\uff63\023\uff63\024\uff63\027\uff63\030" +
    "\uff63\042\uff63\043\uff63\057\uff63\061\uff63\062\uff63\063\uff63" +
    "\100\uff63\001\002\000\052\004\072\015\071\020\037\023" +
    "\064\024\052\027\051\030\043\042\061\043\075\057\045" +
    "\060\016\061\067\062\042\063\054\064\012\065\017\066" +
    "\004\067\011\070\010\100\035\001\002\000\006\006\uffd7" +
    "\007\uffd7\001\002\000\040\004\072\011\074\015\071\020" +
    "\037\023\064\024\052\027\051\030\043\042\061\043\075" +
    "\057\045\061\067\062\042\063\054\100\035\001\002\000" +
    "\036\004\uff5d\015\uff5d\020\uff5d\023\uff5d\024\uff5d\027\uff5d" +
    "\030\uff5d\042\uff5d\043\uff5d\057\uff5d\061\uff5d\062\uff5d\063" +
    "\uff5d\100\uff5d\001\002\000\006\007\100\012\101\001\002" +
    "\000\006\007\uffd4\012\uffd4\001\002\000\040\004\072\011" +
    "\074\015\071\020\037\023\064\024\052\027\051\030\043" +
    "\042\061\043\075\057\045\061\067\062\042\063\054\100" +
    "\035\001\002\000\010\006\uffd5\007\uffd5\012\uffd5\001\002" +
    "\000\006\007\uffd3\012\uffd3\001\002\000\006\005\114\007" +
    "\113\001\002\000\006\005\uff6a\015\uff6a\001\002\000\006" +
    "\005\107\015\110\001\002\000\012\005\uff9d\006\uff9d\007" +
    "\uff9d\014\uff9d\001\002\000\036\004\072\015\071\020\037" +
    "\023\064\024\052\027\051\030\043\042\061\043\075\057" +
    "\045\061\067\062\042\063\054\100\035\001\002\000\006" +
    "\005\uff69\015\uff69\001\002\000\106\005\uff6b\006\uff6b\007" +
    "\uff6b\010\uff6b\012\uff6b\014\uff6b\015\uff6b\016\uff6b\017\uff6b" +
    "\020\uff6b\021\uff6b\022\uff6b\023\uff6b\024\uff6b\025\uff6b\026" +
    "\uff6b\032\uff6b\033\uff6b\034\uff6b\035\uff6b\036\uff6b\037\uff6b" +
    "\040\uff6b\041\uff6b\045\uff6b\046\uff6b\047\uff6b\050\uff6b\051" +
    "\uff6b\052\uff6b\053\uff6b\054\uff6b\055\uff6b\056\uff6b\001\002" +
    "\000\106\005\uff6c\006\uff6c\007\uff6c\010\uff6c\012\uff6c\014" +
    "\uff6c\015\uff6c\016\uff6c\017\uff6c\020\uff6c\021\uff6c\022\uff6c" +
    "\023\uff6c\024\uff6c\025\uff6c\026\uff6c\032\uff6c\033\uff6c\034" +
    "\uff6c\035\uff6c\036\uff6c\037\uff6c\040\uff6c\041\uff6c\045\uff6c" +
    "\046\uff6c\047\uff6c\050\uff6c\051\uff6c\052\uff6c\053\uff6c\054" +
    "\uff6c\055\uff6c\056\uff6c\001\002\000\036\004\072\015\071" +
    "\020\037\023\064\024\052\027\051\030\043\042\061\043" +
    "\075\057\045\061\067\062\042\063\054\100\035\001\002" +
    "\000\122\004\uff4c\005\uff4c\006\uff4c\007\uff4c\010\uff4c\012" +
    "\uff4c\013\uff4c\014\uff4c\015\uff4c\016\uff4c\017\uff4c\020\uff4c" +
    "\021\uff4c\022\uff4c\023\uff4c\024\uff4c\025\uff4c\026\uff4c\031" +
    "\uff4c\032\uff4c\033\uff4c\034\uff4c\035\uff4c\036\uff4c\037\uff4c" +
    "\040\uff4c\041\uff4c\042\uff4c\043\uff4c\044\uff4c\045\uff4c\046" +
    "\uff4c\047\uff4c\050\uff4c\051\uff4c\052\uff4c\053\uff4c\054\uff4c" +
    "\055\uff4c\056\uff4c\001\002\000\012\005\uff9c\006\uff9c\007" +
    "\uff9c\014\uff9c\001\002\000\106\005\uff67\006\uff67\007\uff67" +
    "\010\uff67\012\uff67\014\uff67\015\uff67\016\uff67\017\uff67\020" +
    "\uff67\021\uff67\022\uff67\023\uff67\024\uff67\025\uff67\026\uff67" +
    "\032\uff67\033\uff67\034\uff67\035\uff67\036\uff67\037\uff67\040" +
    "\uff67\041\uff67\045\uff67\046\uff67\047\uff67\050\uff67\051\uff67" +
    "\052\uff67\053\uff67\054\uff67\055\uff67\056\uff67\001\002\000" +
    "\036\004\uff6d\015\uff6d\020\uff6d\023\uff6d\024\uff6d\027\uff6d" +
    "\030\uff6d\042\uff6d\043\uff6d\057\uff6d\061\uff6d\062\uff6d\063" +
    "\uff6d\100\uff6d\001\002\000\036\004\072\015\071\020\037" +
    "\023\064\024\052\027\051\030\043\042\061\043\075\057" +
    "\045\061\067\062\042\063\054\100\035\001\002\000\036" +
    "\004\uff6f\015\uff6f\020\uff6f\023\uff6f\024\uff6f\027\uff6f\030" +
    "\uff6f\042\uff6f\043\uff6f\057\uff6f\061\uff6f\062\uff6f\063\uff6f" +
    "\100\uff6f\001\002\000\036\004\uff6e\015\uff6e\020\uff6e\023" +
    "\uff6e\024\uff6e\027\uff6e\030\uff6e\042\uff6e\043\uff6e\057\uff6e" +
    "\061\uff6e\062\uff6e\063\uff6e\100\uff6e\001\002\000\060\005" +
    "\uff70\006\uff70\007\uff70\012\uff70\014\uff70\015\uff70\016\uff70" +
    "\017\uff70\020\uff70\021\uff70\022\uff70\023\uff70\024\uff70\025" +
    "\uff70\026\uff70\032\uff70\033\uff70\034\uff70\035\uff70\036\uff70" +
    "\037\uff70\040\uff70\041\uff70\001\002\000\036\004\072\015" +
    "\071\020\037\023\064\024\052\027\051\030\043\042\061" +
    "\043\075\057\045\061\067\062\042\063\054\100\035\001" +
    "\002\000\020\005\uff8c\006\uff8c\007\uff8c\012\uff8c\014\uff8c" +
    "\032\uff8c\033\126\001\002\000\036\004\072\015\071\020" +
    "\037\023\064\024\052\027\051\030\043\042\061\043\075" +
    "\057\045\061\067\062\042\063\054\100\035\001\002\000" +
    "\022\005\uff8a\006\uff8a\007\uff8a\012\uff8a\014\uff8a\016\130" +
    "\032\uff8a\033\uff8a\001\002\000\036\004\072\015\071\020" +
    "\037\023\064\024\052\027\051\030\043\042\061\043\075" +
    "\057\045\061\067\062\042\063\054\100\035\001\002\000" +
    "\024\005\uff88\006\uff88\007\uff88\012\uff88\014\uff88\016\uff88" +
    "\017\132\032\uff88\033\uff88\001\002\000\036\004\072\015" +
    "\071\020\037\023\064\024\052\027\051\030\043\042\061" +
    "\043\075\057\045\061\067\062\042\063\054\100\035\001" +
    "\002\000\026\005\uff86\006\uff86\007\uff86\012\uff86\014\uff86" +
    "\016\uff86\017\uff86\020\134\032\uff86\033\uff86\001\002\000" +
    "\036\004\072\015\071\020\037\023\064\024\052\027\051" +
    "\030\043\042\061\043\075\057\045\061\067\062\042\063" +
    "\054\100\035\001\002\000\032\005\uff84\006\uff84\007\uff84" +
    "\012\uff84\014\uff84\016\uff84\017\uff84\020\uff84\032\uff84\033" +
    "\uff84\034\136\035\137\001\002\000\036\004\uff81\015\uff81" +
    "\020\uff81\023\uff81\024\uff81\027\uff81\030\uff81\042\uff81\043" +
    "\uff81\057\uff81\061\uff81\062\uff81\063\uff81\100\uff81\001\002" +
    "\000\036\004\uff80\015\uff80\020\uff80\023\uff80\024\uff80\027" +
    "\uff80\030\uff80\042\uff80\043\uff80\057\uff80\061\uff80\062\uff80" +
    "\063\uff80\100\uff80\001\002\000\036\004\072\015\071\020" +
    "\037\023\064\024\052\027\051\030\043\042\061\043\075" +
    "\057\045\061\067\062\042\063\054\100\035\001\002\000" +
    "\042\005\uff82\006\uff82\007\uff82\012\uff82\014\uff82\016\uff82" +
    "\017\uff82\020\uff82\021\146\022\143\032\uff82\033\uff82\034" +
    "\uff82\035\uff82\036\142\037\144\001\002\000\036\004\uff7b" +
    "\015\uff7b\020\uff7b\023\uff7b\024\uff7b\027\uff7b\030\uff7b\042" +
    "\uff7b\043\uff7b\057\uff7b\061\uff7b\062\uff7b\063\uff7b\100\uff7b" +
    "\001\002\000\036\004\uff7c\015\uff7c\020\uff7c\023\uff7c\024" +
    "\uff7c\027\uff7c\030\uff7c\042\uff7c\043\uff7c\057\uff7c\061\uff7c" +
    "\062\uff7c\063\uff7c\100\uff7c\001\002\000\036\004\uff7a\015" +
    "\uff7a\020\uff7a\023\uff7a\024\uff7a\027\uff7a\030\uff7a\042\uff7a" +
    "\043\uff7a\057\uff7a\061\uff7a\062\uff7a\063\uff7a\100\uff7a\001" +
    "\002\000\036\004\072\015\071\020\037\023\064\024\052" +
    "\027\051\030\043\042\061\043\075\057\045\061\067\062" +
    "\042\063\054\100\035\001\002\000\036\004\uff7d\015\uff7d" +
    "\020\uff7d\023\uff7d\024\uff7d\027\uff7d\030\uff7d\042\uff7d\043" +
    "\uff7d\057\uff7d\061\uff7d\062\uff7d\063\uff7d\100\uff7d\001\002" +
    "\000\046\005\uff7e\006\uff7e\007\uff7e\012\uff7e\014\uff7e\016" +
    "\uff7e\017\uff7e\020\uff7e\021\uff7e\022\uff7e\032\uff7e\033\uff7e" +
    "\034\uff7e\035\uff7e\036\uff7e\037\uff7e\040\151\041\150\001" +
    "\002\000\036\004\uff76\015\uff76\020\uff76\023\uff76\024\uff76" +
    "\027\uff76\030\uff76\042\uff76\043\uff76\057\uff76\061\uff76\062" +
    "\uff76\063\uff76\100\uff76\001\002\000\036\004\uff77\015\uff77" +
    "\020\uff77\023\uff77\024\uff77\027\uff77\030\uff77\042\uff77\043" +
    "\uff77\057\uff77\061\uff77\062\uff77\063\uff77\100\uff77\001\002" +
    "\000\036\004\072\015\071\020\037\023\064\024\052\027" +
    "\051\030\043\042\061\043\075\057\045\061\067\062\042" +
    "\063\054\100\035\001\002\000\052\005\uff78\006\uff78\007" +
    "\uff78\012\uff78\014\uff78\016\uff78\017\uff78\020\uff78\021\uff78" +
    "\022\uff78\023\155\024\154\032\uff78\033\uff78\034\uff78\035" +
    "\uff78\036\uff78\037\uff78\040\uff78\041\uff78\001\002\000\036" +
    "\004\uff72\015\uff72\020\uff72\023\uff72\024\uff72\027\uff72\030" +
    "\uff72\042\uff72\043\uff72\057\uff72\061\uff72\062\uff72\063\uff72" +
    "\100\uff72\001\002\000\036\004\uff73\015\uff73\020\uff73\023" +
    "\uff73\024\uff73\027\uff73\030\uff73\042\uff73\043\uff73\057\uff73" +
    "\061\uff73\062\uff73\063\uff73\100\uff73\001\002\000\036\004" +
    "\072\015\071\020\037\023\064\024\052\027\051\030\043" +
    "\042\061\043\075\057\045\061\067\062\042\063\054\100" +
    "\035\001\002\000\060\005\uff74\006\uff74\007\uff74\012\uff74" +
    "\014\uff74\015\121\016\uff74\017\uff74\020\uff74\021\uff74\022" +
    "\uff74\023\uff74\024\uff74\025\122\026\117\032\uff74\033\uff74" +
    "\034\uff74\035\uff74\036\uff74\037\uff74\040\uff74\041\uff74\001" +
    "\002\000\122\004\uff54\005\uff54\006\uff54\007\uff54\010\uff54" +
    "\012\uff54\013\uff54\014\uff54\015\uff54\016\uff54\017\uff54\020" +
    "\uff54\021\uff54\022\uff54\023\uff54\024\uff54\025\uff54\026\uff54" +
    "\031\uff54\032\uff54\033\uff54\034\uff54\035\uff54\036\uff54\037" +
    "\uff54\040\uff54\041\uff54\042\uff54\043\uff54\044\uff54\045\uff54" +
    "\046\uff54\047\uff54\050\uff54\051\uff54\052\uff54\053\uff54\054" +
    "\uff54\055\uff54\056\uff54\001\002\000\122\004\uff53\005\uff53" +
    "\006\uff53\007\uff53\010\uff53\012\uff53\013\uff53\014\uff53\015" +
    "\uff53\016\uff53\017\uff53\020\uff53\021\uff53\022\uff53\023\uff53" +
    "\024\uff53\025\uff53\026\uff53\031\uff53\032\uff53\033\uff53\034" +
    "\uff53\035\uff53\036\uff53\037\uff53\040\uff53\041\uff53\042\uff53" +
    "\043\uff53\044\uff53\045\uff53\046\uff53\047\uff53\050\uff53\051" +
    "\uff53\052\uff53\053\uff53\054\uff53\055\uff53\056\uff53\001\002" +
    "\000\006\057\201\060\200\001\002\000\040\004\072\005" +
    "\173\015\071\020\037\023\064\024\052\027\051\030\043" +
    "\042\061\043\075\057\045\061\067\062\042\063\054\100" +
    "\035\001\002\000\036\004\072\015\071\020\037\023\064" +
    "\024\052\027\051\030\043\042\061\043\075\057\045\061" +
    "\067\062\042\063\054\100\035\001\002\000\006\057\167" +
    "\060\166\001\002\000\122\004\uff56\005\uff56\006\uff56\007" +
    "\uff56\010\uff56\012\uff56\013\uff56\014\uff56\015\uff56\016\uff56" +
    "\017\uff56\020\uff56\021\uff56\022\uff56\023\uff56\024\uff56\025" +
    "\uff56\026\uff56\031\uff56\032\uff56\033\uff56\034\uff56\035\uff56" +
    "\036\uff56\037\uff56\040\uff56\041\uff56\042\uff56\043\uff56\044" +
    "\uff56\045\uff56\046\uff56\047\uff56\050\uff56\051\uff56\052\uff56" +
    "\053\uff56\054\uff56\055\uff56\056\uff56\001\002\000\122\004" +
    "\uff58\005\uff58\006\uff58\007\uff58\010\uff58\012\uff58\013\uff58" +
    "\014\uff58\015\uff58\016\uff58\017\uff58\020\uff58\021\uff58\022" +
    "\uff58\023\uff58\024\uff58\025\uff58\026\uff58\031\uff58\032\uff58" +
    "\033\uff58\034\uff58\035\uff58\036\uff58\037\uff58\040\uff58\041" +
    "\uff58\042\uff58\043\uff58\044\uff58\045\uff58\046\uff58\047\uff58" +
    "\050\uff58\051\uff58\052\uff58\053\uff58\054\uff58\055\uff58\056" +
    "\uff58\001\002\000\006\007\113\014\171\001\002\000\122" +
    "\004\uff5b\005\uff5b\006\uff5b\007\uff5b\010\uff5b\012\uff5b\013" +
    "\uff5b\014\uff5b\015\uff5b\016\uff5b\017\uff5b\020\uff5b\021\uff5b" +
    "\022\uff5b\023\uff5b\024\uff5b\025\uff5b\026\uff5b\031\uff5b\032" +
    "\uff5b\033\uff5b\034\uff5b\035\uff5b\036\uff5b\037\uff5b\040\uff5b" +
    "\041\uff5b\042\uff5b\043\uff5b\044\uff5b\045\uff5b\046\uff5b\047" +
    "\uff5b\050\uff5b\051\uff5b\052\uff5b\053\uff5b\054\uff5b\055\uff5b" +
    "\056\uff5b\001\002\000\006\005\uff52\007\uff52\001\002\000" +
    "\122\004\uff5a\005\uff5a\006\uff5a\007\uff5a\010\uff5a\012\uff5a" +
    "\013\uff5a\014\uff5a\015\uff5a\016\uff5a\017\uff5a\020\uff5a\021" +
    "\uff5a\022\uff5a\023\uff5a\024\uff5a\025\uff5a\026\uff5a\031\uff5a" +
    "\032\uff5a\033\uff5a\034\uff5a\035\uff5a\036\uff5a\037\uff5a\040" +
    "\uff5a\041\uff5a\042\uff5a\043\uff5a\044\uff5a\045\uff5a\046\uff5a" +
    "\047\uff5a\050\uff5a\051\uff5a\052\uff5a\053\uff5a\054\uff5a\055" +
    "\uff5a\056\uff5a\001\002\000\006\005\176\007\175\001\002" +
    "\000\036\004\072\015\071\020\037\023\064\024\052\027" +
    "\051\030\043\042\061\043\075\057\045\061\067\062\042" +
    "\063\054\100\035\001\002\000\122\004\uff59\005\uff59\006" +
    "\uff59\007\uff59\010\uff59\012\uff59\013\uff59\014\uff59\015\uff59" +
    "\016\uff59\017\uff59\020\uff59\021\uff59\022\uff59\023\uff59\024" +
    "\uff59\025\uff59\026\uff59\031\uff59\032\uff59\033\uff59\034\uff59" +
    "\035\uff59\036\uff59\037\uff59\040\uff59\041\uff59\042\uff59\043" +
    "\uff59\044\uff59\045\uff59\046\uff59\047\uff59\050\uff59\051\uff59" +
    "\052\uff59\053\uff59\054\uff59\055\uff59\056\uff59\001\002\000" +
    "\006\005\uff51\007\uff51\001\002\000\122\004\uff55\005\uff55" +
    "\006\uff55\007\uff55\010\uff55\012\uff55\013\uff55\014\uff55\015" +
    "\uff55\016\uff55\017\uff55\020\uff55\021\uff55\022\uff55\023\uff55" +
    "\024\uff55\025\uff55\026\uff55\031\uff55\032\uff55\033\uff55\034" +
    "\uff55\035\uff55\036\uff55\037\uff55\040\uff55\041\uff55\042\uff55" +
    "\043\uff55\044\uff55\045\uff55\046\uff55\047\uff55\050\uff55\051" +
    "\uff55\052\uff55\053\uff55\054\uff55\055\uff55\056\uff55\001\002" +
    "\000\122\004\uff57\005\uff57\006\uff57\007\uff57\010\uff57\012" +
    "\uff57\013\uff57\014\uff57\015\uff57\016\uff57\017\uff57\020\uff57" +
    "\021\uff57\022\uff57\023\uff57\024\uff57\025\uff57\026\uff57\031" +
    "\uff57\032\uff57\033\uff57\034\uff57\035\uff57\036\uff57\037\uff57" +
    "\040\uff57\041\uff57\042\uff57\043\uff57\044\uff57\045\uff57\046" +
    "\uff57\047\uff57\050\uff57\051\uff57\052\uff57\053\uff57\054\uff57" +
    "\055\uff57\056\uff57\001\002\000\036\004\uff8f\015\uff8f\020" +
    "\uff8f\023\uff8f\024\uff8f\027\uff8f\030\uff8f\042\uff8f\043\uff8f" +
    "\057\uff8f\061\uff8f\062\uff8f\063\uff8f\100\uff8f\001\002\000" +
    "\036\004\uff98\015\uff98\020\uff98\023\uff98\024\uff98\027\uff98" +
    "\030\uff98\042\uff98\043\uff98\057\uff98\061\uff98\062\uff98\063" +
    "\uff98\100\uff98\001\002\000\036\004\uff95\015\uff95\020\uff95" +
    "\023\uff95\024\uff95\027\uff95\030\uff95\042\uff95\043\uff95\057" +
    "\uff95\061\uff95\062\uff95\063\uff95\100\uff95\001\002\000\036" +
    "\004\uff94\015\uff94\020\uff94\023\uff94\024\uff94\027\uff94\030" +
    "\uff94\042\uff94\043\uff94\057\uff94\061\uff94\062\uff94\063\uff94" +
    "\100\uff94\001\002\000\036\004\uff97\015\uff97\020\uff97\023" +
    "\uff97\024\uff97\027\uff97\030\uff97\042\uff97\043\uff97\057\uff97" +
    "\061\uff97\062\uff97\063\uff97\100\uff97\001\002\000\036\004" +
    "\uff91\015\uff91\020\uff91\023\uff91\024\uff91\027\uff91\030\uff91" +
    "\042\uff91\043\uff91\057\uff91\061\uff91\062\uff91\063\uff91\100" +
    "\uff91\001\002\000\036\004\072\015\071\020\037\023\064" +
    "\024\052\027\051\030\043\042\061\043\075\057\045\061" +
    "\067\062\042\063\054\100\035\001\002\000\036\004\uff99" +
    "\015\uff99\020\uff99\023\uff99\024\uff99\027\uff99\030\uff99\042" +
    "\uff99\043\uff99\057\uff99\061\uff99\062\uff99\063\uff99\100\uff99" +
    "\001\002\000\036\004\uff96\015\uff96\020\uff96\023\uff96\024" +
    "\uff96\027\uff96\030\uff96\042\uff96\043\uff96\057\uff96\061\uff96" +
    "\062\uff96\063\uff96\100\uff96\001\002\000\036\004\uff90\015" +
    "\uff90\020\uff90\023\uff90\024\uff90\027\uff90\030\uff90\042\uff90" +
    "\043\uff90\057\uff90\061\uff90\062\uff90\063\uff90\100\uff90\001" +
    "\002\000\036\004\uff92\015\uff92\020\uff92\023\uff92\024\uff92" +
    "\027\uff92\030\uff92\042\uff92\043\uff92\057\uff92\061\uff92\062" +
    "\uff92\063\uff92\100\uff92\001\002\000\036\004\uff93\015\uff93" +
    "\020\uff93\023\uff93\024\uff93\027\uff93\030\uff93\042\uff93\043" +
    "\uff93\057\uff93\061\uff93\062\uff93\063\uff93\100\uff93\001\002" +
    "\000\014\005\uff9a\006\uff9a\007\uff9a\012\uff9a\014\uff9a\001" +
    "\002\000\124\004\uff4a\005\uff4a\006\uff4a\007\uff4a\010\uff4a" +
    "\012\uff4a\013\uff4a\014\uff4a\015\uff4a\016\uff4a\017\uff4a\020" +
    "\uff4a\021\uff4a\022\uff4a\023\uff4a\024\uff4a\025\uff4a\026\uff4a" +
    "\031\uff4a\032\uff4a\033\uff4a\034\uff4a\035\uff4a\036\uff4a\037" +
    "\uff4a\040\uff4a\041\uff4a\042\uff4a\043\uff4a\044\uff4a\045\uff4a" +
    "\046\uff4a\047\uff4a\050\uff4a\051\uff4a\052\uff4a\053\uff4a\054" +
    "\uff4a\055\uff4a\056\uff4a\063\uff4a\001\002\000\106\005\uff66" +
    "\006\uff66\007\uff66\010\uff66\012\uff66\014\uff66\015\uff66\016" +
    "\uff66\017\uff66\020\uff66\021\uff66\022\uff66\023\uff66\024\uff66" +
    "\025\uff66\026\uff66\032\uff66\033\uff66\034\uff66\035\uff66\036" +
    "\uff66\037\uff66\040\uff66\041\uff66\045\uff66\046\uff66\047\uff66" +
    "\050\uff66\051\uff66\052\uff66\053\uff66\054\uff66\055\uff66\056" +
    "\uff66\001\002\000\052\004\072\015\071\020\037\023\064" +
    "\024\052\027\051\030\043\042\061\043\075\057\045\060" +
    "\016\061\067\062\042\063\054\064\012\065\017\066\004" +
    "\067\011\070\010\100\035\001\002\000\006\005\223\015" +
    "\110\001\002\000\106\005\uff65\006\uff65\007\uff65\010\uff65" +
    "\012\uff65\014\uff65\015\uff65\016\uff65\017\uff65\020\uff65\021" +
    "\uff65\022\uff65\023\uff65\024\uff65\025\uff65\026\uff65\032\uff65" +
    "\033\uff65\034\uff65\035\uff65\036\uff65\037\uff65\040\uff65\041" +
    "\uff65\045\uff65\046\uff65\047\uff65\050\uff65\051\uff65\052\uff65" +
    "\053\uff65\054\uff65\055\uff65\056\uff65\001\002\000\076\004" +
    "\072\006\243\011\uffb7\012\uffa8\015\071\020\037\023\064" +
    "\024\052\027\051\030\043\042\061\043\075\057\045\060" +
    "\016\061\067\062\042\063\054\064\012\065\017\066\004" +
    "\067\011\070\010\071\234\073\244\074\233\075\231\076" +
    "\242\077\240\100\035\101\014\001\002\000\100\002\ufffb" +
    "\004\ufffb\006\ufffb\011\ufffb\012\ufffb\015\ufffb\020\ufffb\023" +
    "\ufffb\024\ufffb\027\ufffb\030\ufffb\042\ufffb\043\ufffb\057\ufffb" +
    "\060\ufffb\061\ufffb\062\ufffb\063\ufffb\064\ufffb\065\ufffb\066" +
    "\ufffb\067\ufffb\070\ufffb\071\ufffb\073\ufffb\074\ufffb\075\ufffb" +
    "\076\ufffb\077\ufffb\100\ufffb\101\ufffb\001\002\000\076\004" +
    "\072\006\243\011\uffb7\012\uffaa\015\071\020\037\023\064" +
    "\024\052\027\051\030\043\042\061\043\075\057\045\060" +
    "\016\061\067\062\042\063\054\064\012\065\017\066\004" +
    "\067\011\070\010\071\234\073\244\074\233\075\231\076" +
    "\242\077\240\100\035\101\014\001\002\000\062\004\uffb4" +
    "\006\uffb4\011\uffb4\012\uffb4\015\uffb4\020\uffb4\023\uffb4\024" +
    "\uffb4\027\uffb4\030\uffb4\042\uffb4\043\uffb4\057\uffb4\061\uffb4" +
    "\062\uffb4\063\uffb4\071\uffb4\072\uffb4\073\uffb4\074\uffb4\075" +
    "\uffb4\076\uffb4\077\uffb4\100\uffb4\001\002\000\062\004\uffb3" +
    "\006\uffb3\011\uffb3\012\uffb3\015\uffb3\020\uffb3\023\uffb3\024" +
    "\uffb3\027\uffb3\030\uffb3\042\uffb3\043\uffb3\057\uffb3\061\uffb3" +
    "\062\uffb3\063\uffb3\071\uffb3\072\uffb3\073\uffb3\074\uffb3\075" +
    "\uffb3\076\uffb3\077\uffb3\100\uffb3\001\002\000\004\006\305" +
    "\001\002\000\076\004\ufff8\006\ufff8\011\ufff8\012\ufff8\015" +
    "\ufff8\020\ufff8\023\ufff8\024\ufff8\027\ufff8\030\ufff8\042\ufff8" +
    "\043\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8\063\ufff8\064" +
    "\ufff8\065\ufff8\066\ufff8\067\ufff8\070\ufff8\071\ufff8\073\ufff8" +
    "\074\ufff8\075\ufff8\076\ufff8\077\ufff8\100\ufff8\101\ufff8\001" +
    "\002\000\004\004\275\001\002\000\004\004\267\001\002" +
    "\000\004\012\266\001\002\000\006\006\265\007\113\001" +
    "\002\000\060\004\uffb2\006\uffb2\011\uffb2\012\uffb2\015\uffb2" +
    "\020\uffb2\023\uffb2\024\uffb2\027\uffb2\030\uffb2\042\uffb2\043" +
    "\uffb2\057\uffb2\061\uffb2\062\uffb2\063\uffb2\071\uffb2\073\uffb2" +
    "\074\uffb2\075\uffb2\076\uffb2\077\uffb2\100\uffb2\001\002\000" +
    "\040\004\072\006\262\015\071\020\037\023\064\024\052" +
    "\027\051\030\043\042\061\043\075\057\045\061\067\062" +
    "\042\063\054\100\035\001\002\000\062\004\uffb5\006\uffb5" +
    "\011\uffb5\012\uffb5\015\uffb5\020\uffb5\023\uffb5\024\uffb5\027" +
    "\uffb5\030\uffb5\042\uffb5\043\uffb5\057\uffb5\061\uffb5\062\uffb5" +
    "\063\uffb5\071\uffb5\072\uffb5\073\uffb5\074\uffb5\075\uffb5\076" +
    "\uffb5\077\uffb5\100\uffb5\001\002\000\004\006\261\001\002" +
    "\000\064\004\uffaf\005\uffaf\006\uffaf\011\uffaf\012\uffaf\015" +
    "\uffaf\020\uffaf\023\uffaf\024\uffaf\027\uffaf\030\uffaf\042\uffaf" +
    "\043\uffaf\057\uffaf\061\uffaf\062\uffaf\063\uffaf\071\uffaf\072" +
    "\uffaf\073\uffaf\074\uffaf\075\uffaf\076\uffaf\077\uffaf\100\uffaf" +
    "\001\002\000\004\004\255\001\002\000\062\004\uffb8\006" +
    "\uffb8\011\uffb8\012\uffb8\015\uffb8\020\uffb8\023\uffb8\024\uffb8" +
    "\027\uffb8\030\uffb8\042\uffb8\043\uffb8\057\uffb8\061\uffb8\062" +
    "\uffb8\063\uffb8\071\uffb8\072\uffb8\073\uffb8\074\uffb8\075\uffb8" +
    "\076\uffb8\077\uffb8\100\uffb8\001\002\000\076\004\ufffa\006" +
    "\ufffa\011\ufffa\012\ufffa\015\ufffa\020\ufffa\023\ufffa\024\ufffa" +
    "\027\ufffa\030\ufffa\042\ufffa\043\ufffa\057\ufffa\060\ufffa\061" +
    "\ufffa\062\ufffa\063\ufffa\064\ufffa\065\ufffa\066\ufffa\067\ufffa" +
    "\070\ufffa\071\ufffa\073\ufffa\074\ufffa\075\ufffa\076\ufffa\077" +
    "\ufffa\100\ufffa\101\ufffa\001\002\000\004\011\224\001\002" +
    "\000\060\004\072\006\243\011\uffb7\012\uffac\015\071\020" +
    "\037\023\064\024\052\027\051\030\043\042\061\043\075" +
    "\057\045\061\067\062\042\063\054\071\234\073\244\074" +
    "\233\075\231\076\242\077\240\100\035\001\002\000\004" +
    "\012\253\001\002\000\060\004\uffb1\006\uffb1\011\uffb1\012" +
    "\uffb1\015\uffb1\020\uffb1\023\uffb1\024\uffb1\027\uffb1\030\uffb1" +
    "\042\uffb1\043\uffb1\057\uffb1\061\uffb1\062\uffb1\063\uffb1\071" +
    "\uffb1\073\uffb1\074\uffb1\075\uffb1\076\uffb1\077\uffb1\100\uffb1" +
    "\001\002\000\102\002\uffab\004\uffab\006\uffab\011\uffab\012" +
    "\uffab\015\uffab\020\uffab\023\uffab\024\uffab\027\uffab\030\uffab" +
    "\042\uffab\043\uffab\057\uffab\060\uffab\061\uffab\062\uffab\063" +
    "\uffab\064\uffab\065\uffab\066\uffab\067\uffab\070\uffab\071\uffab" +
    "\072\uffab\073\uffab\074\uffab\075\uffab\076\uffab\077\uffab\100" +
    "\uffab\101\uffab\001\002\000\062\004\uffb6\006\uffb6\011\uffb6" +
    "\012\uffb6\015\uffb6\020\uffb6\023\uffb6\024\uffb6\027\uffb6\030" +
    "\uffb6\042\uffb6\043\uffb6\057\uffb6\061\uffb6\062\uffb6\063\uffb6" +
    "\071\uffb6\072\uffb6\073\uffb6\074\uffb6\075\uffb6\076\uffb6\077" +
    "\uffb6\100\uffb6\001\002\000\036\004\072\015\071\020\037" +
    "\023\064\024\052\027\051\030\043\042\061\043\075\057" +
    "\045\061\067\062\042\063\054\100\035\001\002\000\006" +
    "\005\257\007\113\001\002\000\056\004\072\006\243\011" +
    "\uffb7\015\071\020\037\023\064\024\052\027\051\030\043" +
    "\042\061\043\075\057\045\061\067\062\042\063\054\071" +
    "\234\073\244\074\233\075\231\076\242\077\240\100\035" +
    "\001\002\000\062\004\uffa4\006\uffa4\011\uffa4\012\uffa4\015" +
    "\uffa4\020\uffa4\023\uffa4\024\uffa4\027\uffa4\030\uffa4\042\uffa4" +
    "\043\uffa4\057\uffa4\061\uffa4\062\uffa4\063\uffa4\071\uffa4\072" +
    "\uffa4\073\uffa4\074\uffa4\075\uffa4\076\uffa4\077\uffa4\100\uffa4" +
    "\001\002\000\062\004\uffa0\006\uffa0\011\uffa0\012\uffa0\015" +
    "\uffa0\020\uffa0\023\uffa0\024\uffa0\027\uffa0\030\uffa0\042\uffa0" +
    "\043\uffa0\057\uffa0\061\uffa0\062\uffa0\063\uffa0\071\uffa0\072" +
    "\uffa0\073\uffa0\074\uffa0\075\uffa0\076\uffa0\077\uffa0\100\uffa0" +
    "\001\002\000\062\004\uff9f\006\uff9f\011\uff9f\012\uff9f\015" +
    "\uff9f\020\uff9f\023\uff9f\024\uff9f\027\uff9f\030\uff9f\042\uff9f" +
    "\043\uff9f\057\uff9f\061\uff9f\062\uff9f\063\uff9f\071\uff9f\072" +
    "\uff9f\073\uff9f\074\uff9f\075\uff9f\076\uff9f\077\uff9f\100\uff9f" +
    "\001\002\000\006\006\264\007\113\001\002\000\062\004" +
    "\uff9e\006\uff9e\011\uff9e\012\uff9e\015\uff9e\020\uff9e\023\uff9e" +
    "\024\uff9e\027\uff9e\030\uff9e\042\uff9e\043\uff9e\057\uff9e\061" +
    "\uff9e\062\uff9e\063\uff9e\071\uff9e\072\uff9e\073\uff9e\074\uff9e" +
    "\075\uff9e\076\uff9e\077\uff9e\100\uff9e\001\002\000\064\004" +
    "\uffb0\005\uffb0\006\uffb0\011\uffb0\012\uffb0\015\uffb0\020\uffb0" +
    "\023\uffb0\024\uffb0\027\uffb0\030\uffb0\042\uffb0\043\uffb0\057" +
    "\uffb0\061\uffb0\062\uffb0\063\uffb0\071\uffb0\072\uffb0\073\uffb0" +
    "\074\uffb0\075\uffb0\076\uffb0\077\uffb0\100\uffb0\001\002\000" +
    "\102\002\uffa7\004\uffa7\006\uffa7\011\uffa7\012\uffa7\015\uffa7" +
    "\020\uffa7\023\uffa7\024\uffa7\027\uffa7\030\uffa7\042\uffa7\043" +
    "\uffa7\057\uffa7\060\uffa7\061\uffa7\062\uffa7\063\uffa7\064\uffa7" +
    "\065\uffa7\066\uffa7\067\uffa7\070\uffa7\071\uffa7\072\uffa7\073" +
    "\uffa7\074\uffa7\075\uffa7\076\uffa7\077\uffa7\100\uffa7\101\uffa7" +
    "\001\002\000\036\004\072\015\071\020\037\023\064\024" +
    "\052\027\051\030\043\042\061\043\075\057\045\061\067" +
    "\062\042\063\054\100\035\001\002\000\006\005\271\007" +
    "\113\001\002\000\056\004\072\006\243\011\uffb7\015\071" +
    "\020\037\023\064\024\052\027\051\030\043\042\061\043" +
    "\075\057\045\061\067\062\042\063\054\071\234\073\244" +
    "\074\233\075\231\076\242\077\240\100\035\001\002\000" +
    "\062\004\uffa6\006\uffa6\011\uffa6\012\uffa6\015\uffa6\020\uffa6" +
    "\023\uffa6\024\uffa6\027\uffa6\030\uffa6\042\uffa6\043\uffa6\057" +
    "\uffa6\061\uffa6\062\uffa6\063\uffa6\071\uffa6\072\273\073\uffa6" +
    "\074\uffa6\075\uffa6\076\uffa6\077\uffa6\100\uffa6\001\002\000" +
    "\056\004\072\006\243\011\uffb7\015\071\020\037\023\064" +
    "\024\052\027\051\030\043\042\061\043\075\057\045\061" +
    "\067\062\042\063\054\071\234\073\244\074\233\075\231" +
    "\076\242\077\240\100\035\001\002\000\062\004\uffa5\006" +
    "\uffa5\011\uffa5\012\uffa5\015\uffa5\020\uffa5\023\uffa5\024\uffa5" +
    "\027\uffa5\030\uffa5\042\uffa5\043\uffa5\057\uffa5\061\uffa5\062" +
    "\uffa5\063\uffa5\071\uffa5\072\uffa5\073\uffa5\074\uffa5\075\uffa5" +
    "\076\uffa5\077\uffa5\100\uffa5\001\002\000\040\004\072\006" +
    "\243\015\071\020\037\023\064\024\052\027\051\030\043" +
    "\042\061\043\075\057\045\061\067\062\042\063\054\100" +
    "\035\001\002\000\040\004\072\006\243\015\071\020\037" +
    "\023\064\024\052\027\051\030\043\042\061\043\075\057" +
    "\045\061\067\062\042\063\054\100\035\001\002\000\040" +
    "\004\072\005\301\015\071\020\037\023\064\024\052\027" +
    "\051\030\043\042\061\043\075\057\045\061\067\062\042" +
    "\063\054\100\035\001\002\000\006\005\303\007\113\001" +
    "\002\000\056\004\072\006\243\011\uffb7\015\071\020\037" +
    "\023\064\024\052\027\051\030\043\042\061\043\075\057" +
    "\045\061\067\062\042\063\054\071\234\073\244\074\233" +
    "\075\231\076\242\077\240\100\035\001\002\000\062\004" +
    "\uffa3\006\uffa3\011\uffa3\012\uffa3\015\uffa3\020\uffa3\023\uffa3" +
    "\024\uffa3\027\uffa3\030\uffa3\042\uffa3\043\uffa3\057\uffa3\061" +
    "\uffa3\062\uffa3\063\uffa3\071\uffa3\072\uffa3\073\uffa3\074\uffa3" +
    "\075\uffa3\076\uffa3\077\uffa3\100\uffa3\001\002\000\056\004" +
    "\072\006\243\011\uffb7\015\071\020\037\023\064\024\052" +
    "\027\051\030\043\042\061\043\075\057\045\061\067\062" +
    "\042\063\054\071\234\073\244\074\233\075\231\076\242" +
    "\077\240\100\035\001\002\000\062\004\uffa2\006\uffa2\011" +
    "\uffa2\012\uffa2\015\uffa2\020\uffa2\023\uffa2\024\uffa2\027\uffa2" +
    "\030\uffa2\042\uffa2\043\uffa2\057\uffa2\061\uffa2\062\uffa2\063" +
    "\uffa2\071\uffa2\072\uffa2\073\uffa2\074\uffa2\075\uffa2\076\uffa2" +
    "\077\uffa2\100\uffa2\001\002\000\062\004\uffa1\006\uffa1\011" +
    "\uffa1\012\uffa1\015\uffa1\020\uffa1\023\uffa1\024\uffa1\027\uffa1" +
    "\030\uffa1\042\uffa1\043\uffa1\057\uffa1\061\uffa1\062\uffa1\063" +
    "\uffa1\071\uffa1\072\uffa1\073\uffa1\074\uffa1\075\uffa1\076\uffa1" +
    "\077\uffa1\100\uffa1\001\002\000\076\004\ufff7\006\ufff7\011" +
    "\ufff7\012\ufff7\015\ufff7\020\ufff7\023\ufff7\024\ufff7\027\ufff7" +
    "\030\ufff7\042\ufff7\043\ufff7\057\ufff7\060\ufff7\061\ufff7\062" +
    "\ufff7\063\ufff7\064\ufff7\065\ufff7\066\ufff7\067\ufff7\070\ufff7" +
    "\071\ufff7\073\ufff7\074\ufff7\075\ufff7\076\ufff7\077\ufff7\100" +
    "\ufff7\101\ufff7\001\002\000\004\012\314\001\002\000\076" +
    "\004\ufff9\006\ufff9\011\ufff9\012\ufff9\015\ufff9\020\ufff9\023" +
    "\ufff9\024\ufff9\027\ufff9\030\ufff9\042\ufff9\043\ufff9\057\ufff9" +
    "\060\ufff9\061\ufff9\062\ufff9\063\ufff9\064\ufff9\065\ufff9\066" +
    "\ufff9\067\ufff9\070\ufff9\071\ufff9\073\ufff9\074\ufff9\075\ufff9" +
    "\076\ufff9\077\ufff9\100\ufff9\101\ufff9\001\002\000\060\004" +
    "\072\006\243\011\uffb7\012\uffae\015\071\020\037\023\064" +
    "\024\052\027\051\030\043\042\061\043\075\057\045\061" +
    "\067\062\042\063\054\071\234\073\244\074\233\075\231" +
    "\076\242\077\240\100\035\001\002\000\004\012\313\001" +
    "\002\000\102\002\uffad\004\uffad\006\uffad\011\uffad\012\uffad" +
    "\015\uffad\020\uffad\023\uffad\024\uffad\027\uffad\030\uffad\042" +
    "\uffad\043\uffad\057\uffad\060\uffad\061\uffad\062\uffad\063\uffad" +
    "\064\uffad\065\uffad\066\uffad\067\uffad\070\uffad\071\uffad\072" +
    "\uffad\073\uffad\074\uffad\075\uffad\076\uffad\077\uffad\100\uffad" +
    "\101\uffad\001\002\000\102\002\uffa9\004\uffa9\006\uffa9\011" +
    "\uffa9\012\uffa9\015\uffa9\020\uffa9\023\uffa9\024\uffa9\027\uffa9" +
    "\030\uffa9\042\uffa9\043\uffa9\057\uffa9\060\uffa9\061\uffa9\062" +
    "\uffa9\063\uffa9\064\uffa9\065\uffa9\066\uffa9\067\uffa9\070\uffa9" +
    "\071\uffa9\072\uffa9\073\uffa9\074\uffa9\075\uffa9\076\uffa9\077" +
    "\uffa9\100\uffa9\101\uffa9\001\002\000\014\005\uffee\006\uffee" +
    "\007\uffee\010\uffee\011\uffee\001\002\000\040\004\072\014" +
    "\345\015\071\020\037\023\064\024\052\027\051\030\043" +
    "\042\061\043\075\057\045\061\067\062\042\063\054\100" +
    "\035\001\002\000\020\005\uffea\060\uffe8\064\uffe8\065\uffe8" +
    "\066\uffe8\067\uffe8\070\uffe8\001\002\000\016\060\016\064" +
    "\012\065\017\066\004\067\011\070\010\001\002\000\004" +
    "\005\322\001\002\000\020\004\uffe9\005\uffe9\006\uffe9\007" +
    "\uffe9\010\uffe9\011\uffe9\013\uffe9\001\002\000\006\005\uffdc" +
    "\007\uffdc\001\002\000\020\004\027\005\uffe3\007\uffe3\013" +
    "\uffe3\015\333\057\023\060\024\001\002\000\006\005\uffe7" +
    "\007\326\001\002\000\016\060\016\064\012\065\017\066" +
    "\004\067\011\070\010\001\002\000\004\005\330\001\002" +
    "\000\020\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011" +
    "\uffe6\013\uffe6\001\002\000\006\005\uffdb\007\uffdb\001\002" +
    "\000\006\005\ufff1\007\ufff1\001\002\000\020\004\027\005" +
    "\uffe3\007\uffe3\013\uffe3\015\333\057\023\060\024\001\002" +
    "\000\010\005\uffe0\007\uffe0\013\336\001\002\000\006\005" +
    "\ufff0\007\ufff0\001\002\000\040\004\072\014\341\015\071" +
    "\020\037\023\064\024\052\027\051\030\043\042\061\043" +
    "\075\057\045\061\067\062\042\063\054\100\035\001\002" +
    "\000\006\014\uff8e\032\124\001\002\000\004\014\342\001" +
    "\002\000\010\005\uffe1\007\uffe1\013\uffe1\001\002\000\010" +
    "\005\uffe2\007\uffe2\013\uffe2\001\002\000\006\005\uffdf\007" +
    "\uffdf\001\002\000\004\014\346\001\002\000\020\004\uffe4" +
    "\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\013\uffe4\001" +
    "\002\000\020\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5" +
    "\011\uffe5\013\uffe5\001\002\000\012\004\027\015\025\057" +
    "\023\060\024\001\002\000\100\002\ufff5\004\ufff5\006\ufff5" +
    "\011\ufff5\012\ufff5\015\ufff5\020\ufff5\023\ufff5\024\ufff5\027" +
    "\ufff5\030\ufff5\042\ufff5\043\ufff5\057\ufff5\060\ufff5\061\ufff5" +
    "\062\ufff5\063\ufff5\064\ufff5\065\ufff5\066\ufff5\067\ufff5\070" +
    "\ufff5\071\ufff5\073\ufff5\074\ufff5\075\ufff5\076\ufff5\077\ufff5" +
    "\100\ufff5\101\ufff5\001\002\000\010\006\uffd8\007\uffd8\010" +
    "\034\001\002\000\006\006\uffd9\007\uffd9\001\002\000\014" +
    "\004\027\006\356\015\025\057\023\060\024\001\002\000" +
    "\006\006\uffde\007\361\001\002\000\004\006\ufff3\001\002" +
    "\000\100\002\ufff4\004\ufff4\006\ufff4\011\ufff4\012\ufff4\015" +
    "\ufff4\020\ufff4\023\ufff4\024\ufff4\027\ufff4\030\ufff4\042\ufff4" +
    "\043\ufff4\057\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4\064" +
    "\ufff4\065\ufff4\066\ufff4\067\ufff4\070\ufff4\071\ufff4\073\ufff4" +
    "\074\ufff4\075\ufff4\076\ufff4\077\ufff4\100\ufff4\101\ufff4\001" +
    "\002\000\004\006\360\001\002\000\100\002\ufff2\004\ufff2" +
    "\006\ufff2\011\ufff2\012\ufff2\015\ufff2\020\ufff2\023\ufff2\024" +
    "\ufff2\027\ufff2\030\ufff2\042\ufff2\043\ufff2\057\ufff2\060\ufff2" +
    "\061\ufff2\062\ufff2\063\ufff2\064\ufff2\065\ufff2\066\ufff2\067" +
    "\ufff2\070\ufff2\071\ufff2\073\ufff2\074\ufff2\075\ufff2\076\ufff2" +
    "\077\ufff2\100\ufff2\101\ufff2\001\002\000\012\004\027\015" +
    "\025\057\023\060\024\001\002\000\004\006\uffdd\001\002" +
    "\000\022\002\uffff\060\uffff\064\uffff\065\uffff\066\uffff\067" +
    "\uffff\070\uffff\101\uffff\001\002\000\004\002\001\001\002" +
    "\000\016\060\016\064\012\065\017\066\004\067\011\070" +
    "\010\001\002\000\024\004\uffcf\005\uffcf\006\uffcf\007\uffcf" +
    "\011\367\013\uffcf\015\uffcf\057\uffcf\060\uffcf\001\002\000" +
    "\016\060\016\064\012\065\017\066\004\067\011\070\010" +
    "\001\002\000\012\004\u0102\015\377\057\u0100\060\375\001" +
    "\002\000\020\012\373\060\016\064\012\065\017\066\004" +
    "\067\011\070\010\001\002\000\012\004\u0102\015\377\057" +
    "\u0100\060\375\001\002\000\022\004\uffce\005\uffce\006\uffce" +
    "\007\uffce\013\uffce\015\uffce\057\uffce\060\uffce\001\002\000" +
    "\006\006\u0112\007\u0111\001\002\000\014\004\uffc3\005\uffc3" +
    "\006\uffc3\007\uffc3\013\uffc3\001\002\000\014\004\u0107\005" +
    "\uffc6\006\uffc6\007\uffc6\013\u0106\001\002\000\012\004\u0102" +
    "\015\377\057\u0100\060\375\001\002\000\014\004\uffc4\005" +
    "\uffc4\006\uffc4\007\uffc4\013\uffc4\001\002\000\006\006\uffba" +
    "\007\uffba\001\002\000\012\004\u0102\015\377\057\u0100\060" +
    "\375\001\002\000\004\005\u0104\001\002\000\014\004\uffc2" +
    "\005\uffc2\006\uffc2\007\uffc2\013\uffc2\001\002\000\010\005" +
    "\uffc5\006\uffc5\007\uffc5\001\002\000\040\004\072\014\u010f" +
    "\015\071\020\037\023\064\024\052\027\051\030\043\042" +
    "\061\043\075\057\045\061\067\062\042\063\054\100\035" +
    "\001\002\000\020\005\uffc1\060\uffbf\064\uffbf\065\uffbf\066" +
    "\uffbf\067\uffbf\070\uffbf\001\002\000\016\060\016\064\012" +
    "\065\017\066\004\067\011\070\010\001\002\000\004\005" +
    "\u010a\001\002\000\014\004\uffc0\005\uffc0\006\uffc0\007\uffc0" +
    "\013\uffc0\001\002\000\006\005\uffbe\007\326\001\002\000" +
    "\004\005\u010d\001\002\000\014\004\uffbd\005\uffbd\006\uffbd" +
    "\007\uffbd\013\uffbd\001\002\000\004\014\u0110\001\002\000" +
    "\014\004\uffbb\005\uffbb\006\uffbb\007\uffbb\013\uffbb\001\002" +
    "\000\014\004\uffbc\005\uffbc\006\uffbc\007\uffbc\013\uffbc\001" +
    "\002\000\012\004\u0102\015\377\057\u0100\060\375\001\002" +
    "\000\020\012\uffc7\060\uffc7\064\uffc7\065\uffc7\066\uffc7\067" +
    "\uffc7\070\uffc7\001\002\000\006\006\uffb9\007\uffb9\001\002" +
    "\000\006\006\u0115\007\u0111\001\002\000\020\012\uffc8\060" +
    "\uffc8\064\uffc8\065\uffc8\066\uffc8\067\uffc8\070\uffc8\001\002" +
    "\000\020\012\u0117\060\016\064\012\065\017\066\004\067" +
    "\011\070\010\001\002\000\022\004\uffcd\005\uffcd\006\uffcd" +
    "\007\uffcd\013\uffcd\015\uffcd\057\uffcd\060\uffcd\001\002\000" +
    "\016\060\016\064\012\065\017\066\004\067\011\070\010" +
    "\001\002\000\024\004\uffcc\005\uffcc\006\uffcc\007\uffcc\011" +
    "\u011a\013\uffcc\015\uffcc\057\uffcc\060\uffcc\001\002\000\016" +
    "\060\016\064\012\065\017\066\004\067\011\070\010\001" +
    "\002\000\020\012\u011c\060\016\064\012\065\017\066\004" +
    "\067\011\070\010\001\002\000\022\004\uffcb\005\uffcb\006" +
    "\uffcb\007\uffcb\013\uffcb\015\uffcb\057\uffcb\060\uffcb\001\002" +
    "\000\020\012\u011e\060\016\064\012\065\017\066\004\067" +
    "\011\070\010\001\002\000\022\004\uffca\005\uffca\006\uffca" +
    "\007\uffca\013\uffca\015\uffca\057\uffca\060\uffca\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011c\000\014\002\012\003\004\004\005\022\006\025" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\362\004\005\022\006" +
    "\025\014\001\001\000\004\025\352\001\001\000\012\006" +
    "\020\013\027\014\025\015\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\314\015\021\001\001\000\004\071\032\001\001\000" +
    "\006\014\030\015\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\224\001\001\000" +
    "\046\023\072\040\037\042\064\043\062\044\055\045\054" +
    "\046\046\047\061\050\057\051\047\052\056\053\065\054" +
    "\040\055\045\056\052\057\035\067\067\070\043\001\001" +
    "\000\014\055\217\056\052\057\035\067\067\070\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\061\207\001\001" +
    "\000\002\001\001\000\004\064\151\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\065\155\001" +
    "\001\000\004\063\144\001\001\000\002\001\001\000\004" +
    "\062\137\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\066\117\001\001\000\002\001\001" +
    "\000\016\054\115\055\111\056\052\057\035\067\067\070" +
    "\043\001\001\000\002\001\001\000\052\025\103\026\104" +
    "\037\102\040\105\042\064\043\062\044\055\045\054\046" +
    "\046\047\061\050\057\051\047\052\056\053\065\054\040" +
    "\055\045\056\052\057\035\067\067\070\043\001\001\000" +
    "\002\001\001\000\050\023\076\024\075\040\037\042\064" +
    "\043\062\044\055\045\054\046\046\047\061\050\057\051" +
    "\047\052\056\053\065\054\040\055\045\056\052\057\035" +
    "\067\067\070\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\023\101\040\037\042\064" +
    "\043\062\044\055\045\054\046\046\047\061\050\057\051" +
    "\047\052\056\053\065\054\040\055\045\056\052\057\035" +
    "\067\067\070\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\054\110\055\111\056\052\057" +
    "\035\067\067\070\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\040\114\042\064\043" +
    "\062\044\055\045\054\046\046\047\061\050\057\051\047" +
    "\052\056\053\065\054\040\055\045\056\052\057\035\067" +
    "\067\070\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\054\122\055" +
    "\111\056\052\057\035\067\067\070\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\043" +
    "\124\044\055\045\054\046\046\047\061\050\057\051\047" +
    "\052\056\053\065\054\040\055\111\056\052\057\035\067" +
    "\067\070\043\001\001\000\002\001\001\000\036\044\126" +
    "\045\054\046\046\047\061\050\057\051\047\052\056\053" +
    "\065\054\040\055\111\056\052\057\035\067\067\070\043" +
    "\001\001\000\002\001\001\000\034\045\130\046\046\047" +
    "\061\050\057\051\047\052\056\053\065\054\040\055\111" +
    "\056\052\057\035\067\067\070\043\001\001\000\002\001" +
    "\001\000\032\046\132\047\061\050\057\051\047\052\056" +
    "\053\065\054\040\055\111\056\052\057\035\067\067\070" +
    "\043\001\001\000\002\001\001\000\030\047\134\050\057" +
    "\051\047\052\056\053\065\054\040\055\111\056\052\057" +
    "\035\067\067\070\043\001\001\000\004\062\137\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\050\140\051" +
    "\047\052\056\053\065\054\040\055\111\056\052\057\035" +
    "\067\067\070\043\001\001\000\004\063\144\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\051\146\052\056\053\065\054\040\055\111\056\052\057" +
    "\035\067\067\070\043\001\001\000\002\001\001\000\004" +
    "\064\151\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\052\152\053\065\054\040\055\111\056\052\057\035" +
    "\067\067\070\043\001\001\000\004\065\155\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\053\156\054\040" +
    "\055\111\056\052\057\035\067\067\070\043\001\001\000" +
    "\004\066\117\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\040\171\042\064\043\062\044" +
    "\055\045\054\046\046\047\061\050\057\051\047\052\056" +
    "\053\065\054\040\055\045\056\052\057\035\060\173\067" +
    "\067\070\043\001\001\000\046\037\167\040\105\042\064" +
    "\043\062\044\055\045\054\046\046\047\061\050\057\051" +
    "\047\052\056\053\065\054\040\055\045\056\052\057\035" +
    "\067\067\070\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\040\176\042\064\043\062\044\055\045\054\046\046" +
    "\047\061\050\057\051\047\052\056\053\065\054\040\055" +
    "\045\056\052\057\035\067\067\070\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\040\215\042\064\043\062\044\055\045\054\046\046" +
    "\047\061\050\057\051\047\052\056\053\065\054\040\055" +
    "\045\056\052\057\035\067\067\070\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\025\103\026\221\037\102\040" +
    "\105\042\064\043\062\044\055\045\054\046\046\047\061" +
    "\050\057\051\047\052\056\053\065\054\040\055\045\056" +
    "\052\057\035\067\067\070\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\076\004\245\005\225\022\231\025" +
    "\014\030\236\031\247\032\244\034\240\035\226\036\227" +
    "\037\235\040\105\042\064\043\062\044\055\045\054\046" +
    "\046\047\061\050\057\051\047\052\056\053\065\054\040" +
    "\055\045\056\052\057\035\067\067\070\043\101\246\105" +
    "\234\001\001\000\002\001\001\000\074\004\307\022\305" +
    "\025\014\030\236\031\310\032\244\034\240\035\226\036" +
    "\227\037\235\040\105\042\064\043\062\044\055\045\054" +
    "\046\046\047\061\050\057\051\047\052\056\053\065\054" +
    "\040\055\045\056\052\057\035\067\067\070\043\101\246" +
    "\104\306\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\037\262\040\105\042\064\043\062\044\055" +
    "\045\054\046\046\047\061\050\057\051\047\052\056\053" +
    "\065\054\040\055\045\056\052\057\035\067\067\070\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\253\001\001\000\064\030\251\032\244\034" +
    "\240\035\226\036\227\037\235\040\105\042\064\043\062" +
    "\044\055\045\054\046\046\047\061\050\057\051\047\052" +
    "\056\053\065\054\040\055\045\056\052\057\035\067\067" +
    "\070\043\101\246\103\250\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\037\255\040\105\042\064\043\062\044\055\045\054\046" +
    "\046\047\061\050\057\051\047\052\056\053\065\054\040" +
    "\055\045\056\052\057\035\067\067\070\043\001\001\000" +
    "\002\001\001\000\062\030\257\032\244\034\240\035\226" +
    "\036\227\037\235\040\105\042\064\043\062\044\055\045" +
    "\054\046\046\047\061\050\057\051\047\052\056\053\065" +
    "\054\040\055\045\056\052\057\035\067\067\070\043\101" +
    "\246\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\037\267\040\105\042\064" +
    "\043\062\044\055\045\054\046\046\047\061\050\057\051" +
    "\047\052\056\053\065\054\040\055\045\056\052\057\035" +
    "\067\067\070\043\001\001\000\002\001\001\000\062\030" +
    "\271\032\244\034\240\035\226\036\227\037\235\040\105" +
    "\042\064\043\062\044\055\045\054\046\046\047\061\050" +
    "\057\051\047\052\056\053\065\054\040\055\045\056\052" +
    "\057\035\067\067\070\043\101\246\001\001\000\002\001" +
    "\001\000\062\030\273\032\244\034\240\035\226\036\227" +
    "\037\235\040\105\042\064\043\062\044\055\045\054\046" +
    "\046\047\061\050\057\051\047\052\056\053\065\054\040" +
    "\055\045\056\052\057\035\067\067\070\043\101\246\001" +
    "\001\000\002\001\001\000\050\032\275\037\235\040\105" +
    "\042\064\043\062\044\055\045\054\046\046\047\061\050" +
    "\057\051\047\052\056\053\065\054\040\055\045\056\052" +
    "\057\035\067\067\070\043\001\001\000\050\032\276\037" +
    "\235\040\105\042\064\043\062\044\055\045\054\046\046" +
    "\047\061\050\057\051\047\052\056\053\065\054\040\055" +
    "\045\056\052\057\035\067\067\070\043\001\001\000\046" +
    "\037\277\040\105\042\064\043\062\044\055\045\054\046" +
    "\046\047\061\050\057\051\047\052\056\053\065\054\040" +
    "\055\045\056\052\057\035\067\067\070\043\001\001\000" +
    "\002\001\001\000\062\030\301\032\244\034\240\035\226" +
    "\036\227\037\235\040\105\042\064\043\062\044\055\045" +
    "\054\046\046\047\061\050\057\051\047\052\056\053\065" +
    "\054\040\055\045\056\052\057\035\067\067\070\043\101" +
    "\246\001\001\000\002\001\001\000\062\030\303\032\244" +
    "\034\240\035\226\036\227\037\235\040\105\042\064\043" +
    "\062\044\055\045\054\046\046\047\061\050\057\051\047" +
    "\052\056\053\065\054\040\055\045\056\052\057\035\067" +
    "\067\070\043\101\246\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\064\030\251\032\244\034\240\035\226\036\227" +
    "\037\235\040\105\042\064\043\062\044\055\045\054\046" +
    "\046\047\061\050\057\051\047\052\056\053\065\054\040" +
    "\055\045\056\052\057\035\067\067\070\043\101\246\102" +
    "\311\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\041\343\042\336\043" +
    "\062\044\055\045\054\046\046\047\061\050\057\051\047" +
    "\052\056\053\065\054\040\055\111\056\052\057\035\067" +
    "\067\070\043\001\001\000\006\073\320\074\317\001\001" +
    "\000\010\007\322\010\324\025\323\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\014\331" +
    "\015\021\016\334\017\333\001\001\000\004\075\326\001" +
    "\001\000\006\007\330\025\323\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\014\314\015\021\016\342\017\333\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\041\337\042\336\043" +
    "\062\044\055\045\054\046\046\047\061\050\057\051\047" +
    "\052\056\053\065\054\040\055\111\056\052\057\035\067" +
    "\067\070\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\013\351\014\350\015\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\011\354\014\353" +
    "\015\021\001\001\000\002\001\001\000\004\072\356\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\011\361\014\353\015\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\025\367" +
    "\027\u0115\001\001\000\002\001\001\000\006\025\367\027" +
    "\370\001\001\000\010\012\u0113\020\u0100\021\375\001\001" +
    "\000\004\025\371\001\001\000\010\012\373\020\u0100\021" +
    "\375\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\u0104\021\375\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\u0102" +
    "\021\375\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\041\u010d\042\336\043\062\044\055" +
    "\045\054\046\046\047\061\050\057\051\047\052\056\053" +
    "\065\054\040\055\111\056\052\057\035\067\067\070\043" +
    "\001\001\000\006\076\u0108\077\u0107\001\001\000\010\007" +
    "\322\010\u010a\025\323\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\100\u010b\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\020\u0112\021\375\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\371\001\001\000\002\001\001\000\006\025" +
    "\367\027\u011c\001\001\000\002\001\001\000\006\025\367" +
    "\027\u011a\001\001\000\004\025\371\001\001\000\002\001" +
    "\001\000\004\025\371\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 ((Yylex)getScanner()).setTable(this.table = new SyntacticTable()); 
    }



	SyntacticTable table;

    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer("Parsing error");
    	if (info instanceof java_cup.runtime.Symbol) {
    		java_cup.runtime.Symbol s = (java_cup.runtime.Symbol) info;

   			if (s.left >= 0) {
   				m.append(" in line " + (s.left +1 ));
   				if (s.right >= 0) { m.append(", column " + (s.right + 1));
   				}
   			}
   		}
   		m.append(" : " + message);
   		throw new SyntacticError(m.toString());
   	}

   	public Parser(Reader input) {
   		this(new Yylex(input));
   	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= external_definition 
            {
              Program RESULT =null;
		Program decl = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = decl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= program external_definition 
            {
              Program RESULT =null;
		Program prog = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Program decl = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (new Program()).add(prog).add(decl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // external_definition ::= declaration 
            {
              Program RESULT =null;
		DeclList decl = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (new Program()).add(decl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("external_definition",1, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // external_definition ::= function_definition 
            {
              Program RESULT =null;
		FunctionDefi func = (FunctionDefi)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (new Program()).add(func); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("external_definition",1, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              FunctionDefi RESULT =null;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 table.retrive(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",55, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // function_definition ::= type_specifier declarator NT$0 compound_statement 
            {
              FunctionDefi RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (FunctionDefi) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		CompoundStat stat = (CompoundStat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							FunctionType tmp = (FunctionType)(dect.type);
							if (tmp.returnType == null) {
								tmp.returnType = type;
							} else {
								tmp.returnType.encore(type);
							}
							if (((FunctionDecl)dect).para.isAnonymous()) {
   								throw new SyntacticError("Parameter name omitted.\n");
							}
							RESULT = new FunctionDefi(tmp, dect.name, ((FunctionDecl)dect).para, stat); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_definition",16, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration_list ::= declaration 
            {
              DeclList RESULT =null;
		DeclList decl = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (new DeclList()).add(decl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list",3, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration_list ::= declaration_list declaration 
            {
              DeclList RESULT =null;
		DeclList list = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		DeclList decl = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = list.add(decl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list",3, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaration_list ::= function_definition 
            {
              DeclList RESULT =null;
		FunctionDefi func = (FunctionDefi)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = (new DeclList()).add(func); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list",3, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaration_list ::= declaration_list function_definition 
            {
              DeclList RESULT =null;
		DeclList list = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		FunctionDefi func = (FunctionDefi)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = list.add(func); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list",3, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaration ::= type_specifier COLON 
            {
              DeclList RESULT =null;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = (new DeclList()).add(new TypeDecl(type)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaration ::= type_specifier init_declarator_list COLON 
            {
              DeclList RESULT =null;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		DeclList init = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					boolean first = true;
					for (Declaration dect : init.list) {
						dect.specifier = first;
						if (dect.type == null) {
							dect.type = type;
						} else {
							dect.type.encore(type);
						}
						if (first) {
							type = type.clone();
						}
						first = false;
					}
					RESULT = init;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaration ::= TYPEDEF type_specifier COLON 
            {
              DeclList RESULT =null;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = (new DeclList()).add(new TypeDecl(type)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$1 ::= 
            {
              DeclList RESULT =null;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		DeclList init = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

					RESULT = new DeclList();
					boolean first = true;
					for (Declaration dect : init.list) {
						if (dect.type == null) {
							dect.type = type;
						} else {
							dect.type.encore(type);
						}
						table.addEntry(dect.name.toString(), Symbols.TYPENAME);
						Declaration temp = new TypeDef(dect.type, dect.name);
						temp.specifier = first;
						RESULT.add(temp);
						if (first) {
							type = type.clone();
						}
						first = false;
					}
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",56, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaration ::= TYPEDEF type_specifier declarator_list NT$1 COLON 
            {
              DeclList RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (DeclList) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		DeclList init = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // plain_declaration ::= type_specifier declarator 
            {
              DeclList RESULT =null;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							if (dect.type == null) {
								dect.type = type;
							} else {
								dect.type.encore(type);
							}
							dect.specifier = true;
							RESULT = (new DeclList()).add(dect);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plain_declaration",5, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // plain_declaration ::= type_specifier anonymous_declarator 
            {
              DeclList RESULT =null;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							if (dect.type == null) {
								dect.type = type;
							} else {
								dect.type.encore(type);
							}
							dect.specifier = true;
							RESULT = (new DeclList()).add(dect);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plain_declaration",5, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declarator ::= direct_declarator 
            {
              Declaration RESULT =null;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = dect;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator",10, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declarator ::= MUL declarator 
            {
              Declaration RESULT =null;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					if (dect.type == null) {
						dect.type = new PointerType(null);
					} else {
						dect.type = dect.type.encore(new PointerType(null));
					}
					RESULT = dect;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator",10, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // direct_declarator ::= IDENTIFIER 
            {
              Declaration RESULT =null;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new VariableDecl(null, new Symbol(name), null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_declarator",11, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // direct_declarator ::= TYPENAME 
            {
              Declaration RESULT =null;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			table.addEntry(name, Symbols.IDENTIFIER);
						RESULT = new VariableDecl(null, new Symbol(name), null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_declarator",11, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // direct_declarator ::= PARAL declarator PARAR 
            {
              Declaration RESULT =null;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = dect; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_declarator",11, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$2 ::= 
            {
              Declaration RESULT =null;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
 table.addScope(); table.delScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",57, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // direct_declarator ::= direct_declarator PARAL NT$2 PARAR 
            {
              Declaration RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Declaration) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
						if (dect.type == null) {
							RESULT = new FunctionDecl(new FunctionType(null, new DeclList()), dect.name, new DeclList());
						} else {
							dect.type = dect.type.encore(new FunctionType(null, new DeclList()));
							RESULT = dect;
						}
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_declarator",11, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$3 ::= 
            {
              Declaration RESULT =null;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
 table.addScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",58, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$4 ::= 
            {
              Declaration RESULT =(Declaration) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		DeclList para = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 table.delScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",59, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // direct_declarator ::= direct_declarator PARAL NT$3 parameter_list NT$4 PARAR 
            {
              Declaration RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Declaration) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		DeclList para = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
						if (dect.type == null) {
							RESULT = new FunctionDecl(new FunctionType(null, para), dect.name, para);
						} else {
							dect.type = dect.type.encore(new FunctionType(null, para));
							RESULT = dect;
						}
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_declarator",11, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // direct_declarator ::= direct_declarator SQUARL constant_expression SQUARR 
            {
              Declaration RESULT =null;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
						if (dect.type == null) {
							dect.type = new ArrayType(null, expr);
						} else {
							dect.type = dect.type.encore(new ArrayType(null, expr));
						}
						RESULT = dect; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_declarator",11, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // direct_declarator ::= direct_declarator SQUARL SQUARR 
            {
              Declaration RESULT =null;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
						if (dect.type == null) {
							dect.type = new ArrayType(null, null);
						} else {
							dect.type = dect.type.encore(new ArrayType(null, null));
						}
						RESULT = dect; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_declarator",11, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // anonymous_direct_declarator ::= 
            {
              Declaration RESULT =null;
			RESULT = new VariableDecl(null, null, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("anonymous_direct_declarator",13, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // anonymous_direct_declarator ::= anonymous_direct_declarator SQUARL constant_expression SQUARR 
            {
              Declaration RESULT =null;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
						if (dect.type == null) {
							dect.type = new ArrayType(null, expr);
						} else {
							dect.type = dect.type.encore(new ArrayType(null, expr));
						}
						RESULT = dect; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("anonymous_direct_declarator",13, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // anonymous_direct_declarator ::= anonymous_direct_declarator SQUARL SQUARR 
            {
              Declaration RESULT =null;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
						if (dect.type == null) {
							dect.type = new ArrayType(null, null);
						} else {
							dect.type = dect.type.encore(new ArrayType(null, null));
						}
						RESULT = dect; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("anonymous_direct_declarator",13, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // anonymous_declarator ::= anonymous_direct_declarator 
            {
              Declaration RESULT =null;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = dect;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("anonymous_declarator",12, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // anonymous_declarator ::= MUL anonymous_declarator 
            {
              Declaration RESULT =null;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					if (dect.type == null) {
						dect.type = new PointerType(null);
					} else {
						dect.type = dect.type.encore(new PointerType(null));
					}
					RESULT = dect;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("anonymous_declarator",12, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declarator_list ::= declarator 
            {
              DeclList RESULT =null;
		Declaration decl = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = (new DeclList()).add(decl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator_list",7, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declarator_list ::= declarator COMMA declarator_list 
            {
              DeclList RESULT =null;
		Declaration decl = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		DeclList list = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = list.add(decl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator_list",7, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // parameter_list ::= plain_declaration 
            {
              DeclList RESULT =null;
		DeclList decl = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = (new ParaList()).add(decl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",6, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parameter_list ::= parameter_list COMMA plain_declaration 
            {
              DeclList RESULT =null;
		DeclList list = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		DeclList decl = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = list.add(decl);	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",6, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // init_declarator_list ::= init_declarator 
            {
              DeclList RESULT =null;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = (new DeclList()).add(dect); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_declarator_list",4, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // init_declarator_list ::= init_declarator_list COMMA init_declarator 
            {
              DeclList RESULT =null;
		DeclList list = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = list.add(dect); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_declarator_list",4, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // init_declarator ::= declarator 
            {
              Declaration RESULT =null;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = dect; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_declarator",9, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // init_declarator ::= declarator ASSIGN initializer 
            {
              Declaration RESULT =null;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Initializer init = (Initializer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			dect.init = init;
						RESULT = dect; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_declarator",9, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // initializer ::= assignment_expression 
            {
              Initializer RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new InitValue(expr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializer",17, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // initializer ::= CURLYL initializer_list CURLYR 
            {
              Initializer RESULT =null;
		InitList list = (InitList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			RESULT = list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializer",17, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // initializer_list ::= initializer 
            {
              InitList RESULT =null;
		Initializer init = (Initializer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = (new InitList()).add(init); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializer_list",18, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // initializer_list ::= initializer_list COMMA initializer 
            {
              InitList RESULT =null;
		InitList list = (InitList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Initializer init = (Initializer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = list.add(init); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializer_list",18, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // type_specifier ::= VOID 
            {
              Type RESULT =null;
			RESULT = new VoidType(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",19, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // type_specifier ::= INT 
            {
              Type RESULT =null;
			RESULT = new IntType(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",19, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // type_specifier ::= CHAR 
            {
              Type RESULT =null;
			RESULT = new CharType(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",19, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // type_specifier ::= STRUCT IDENTIFIER 
            {
              Type RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new StructType(new Symbol(id), null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",19, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // type_specifier ::= STRUCT IDENTIFIER CURLYL field_list CURLYR 
            {
              Type RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		DeclList list = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			RESULT = new StructType(new Symbol(id), list); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",19, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // type_specifier ::= STRUCT CURLYL field_list CURLYR 
            {
              Type RESULT =null;
		DeclList list = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			RESULT = new StructType(new Symbol(""), list); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",19, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // type_specifier ::= UNION IDENTIFIER 
            {
              Type RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new UnionType(new Symbol(id), null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",19, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // type_specifier ::= UNION IDENTIFIER CURLYL field_list CURLYR 
            {
              Type RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		DeclList list = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			RESULT = new UnionType(new Symbol(id), list); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",19, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // type_specifier ::= UNION CURLYL field_list CURLYR 
            {
              Type RESULT =null;
		DeclList list = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			RESULT = new UnionType(new Symbol(""), list); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",19, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // type_specifier ::= TYPENAME 
            {
              Type RESULT =null;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new DefinedType(new Symbol(name)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",19, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // field_list ::= type_specifier struct_declarator_list COLON 
            {
              DeclList RESULT =null;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		DeclList list = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			boolean first = true;
					for (Declaration decl : list.list) {
						if (decl.type == null) {
							decl.type = type;
						} else {
							decl.type.encore(type);
						}
						decl.specifier = first;
						if (first) {
							type = type.clone();
						}
						first = false;
					}
					RESULT = list;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list",21, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // field_list ::= field_list type_specifier struct_declarator_list COLON 
            {
              DeclList RESULT =null;
		DeclList list = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		DeclList list2 = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					boolean first = true;
					for (Declaration decl : list2.list) {
						if (decl.type == null) {
							decl.type = type;
						} else {
							decl.type.encore(type);
						}
						decl.specifier = first;
						if (first) {
							type = type.clone();
						}
						first = false;
					}
					list = list.add(list2);
					RESULT = list;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list",21, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // struct_declarator ::= struct_direct_declarator 
            {
              Declaration RESULT =null;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = dect;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_declarator",14, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // struct_declarator ::= MUL struct_declarator 
            {
              Declaration RESULT =null;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							if (dect.type == null) {
								dect.type = new PointerType(null);
							} else {
								dect.type = dect.type.encore(new PointerType(null));
							}
							RESULT = dect;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_declarator",14, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // struct_direct_declarator ::= IDENTIFIER 
            {
              Declaration RESULT =null;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new VariableDecl(null, new Symbol(name), null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_direct_declarator",15, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // struct_direct_declarator ::= TYPENAME 
            {
              Declaration RESULT =null;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new VariableDecl(null, new Symbol(name), null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_direct_declarator",15, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // struct_direct_declarator ::= PARAL struct_declarator PARAR 
            {
              Declaration RESULT =null;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = dect; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_direct_declarator",15, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$5 ::= 
            {
              Declaration RESULT =null;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
 table.addScope(); table.delScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",60, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // struct_direct_declarator ::= struct_direct_declarator PARAL NT$5 PARAR 
            {
              Declaration RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Declaration) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
								if (dect.type == null) {
									throw new SyntacticError("Function Declaration is not allowed in structure or union.");
								} else {
									dect.type = dect.type.encore(new FunctionType(null, new DeclList()));
									RESULT = dect;
								}
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_direct_declarator",15, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$6 ::= 
            {
              Declaration RESULT =null;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
 table.addScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",61, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$7 ::= 
            {
              Declaration RESULT =(Declaration) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		DeclList para = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 table.delScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",62, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // struct_direct_declarator ::= struct_direct_declarator PARAL NT$6 parameter_list NT$7 PARAR 
            {
              Declaration RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Declaration) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		DeclList para = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
								if (dect.type == null) {
									throw new SyntacticError("Function Declaration is not allowed in structure or union.");
								} else {
									dect.type = dect.type.encore(new FunctionType(null, para));
									RESULT = dect;
								}
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_direct_declarator",15, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // struct_direct_declarator ::= struct_direct_declarator SQUARL constant_expression SQUARR 
            {
              Declaration RESULT =null;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
								if (dect.type == null) {
									dect.type = new ArrayType(null, expr);
								} else {
									dect.type = dect.type.encore(new ArrayType(null, expr));
								}
								RESULT = dect; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_direct_declarator",15, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // struct_direct_declarator ::= struct_direct_declarator SQUARL SQUARR 
            {
              Declaration RESULT =null;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
								if (dect.type == null) {
									dect.type = new ArrayType(null, null);
								} else {
									dect.type = dect.type.encore(new ArrayType(null, null));
								}
								RESULT = dect; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_direct_declarator",15, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // struct_declarator_list ::= struct_declarator 
            {
              DeclList RESULT =null;
		Declaration decl = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = (new DeclList()).add(decl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_declarator_list",8, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // struct_declarator_list ::= struct_declarator_list COMMA struct_declarator 
            {
              DeclList RESULT =null;
		DeclList list = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Declaration decl = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = list.add(decl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_declarator_list",8, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // statement ::= expression_statement 
            {
              Statement RESULT =null;
		ExpressionStat stat = (ExpressionStat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = stat; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",22, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$8 ::= 
            {
              Statement RESULT =null;
 table.addScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",63, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // statement ::= NT$8 compound_statement 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		CompoundStat stat = (CompoundStat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = stat; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",22, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // statement ::= selection_statement 
            {
              Statement RESULT =null;
		SelectionStat stat = (SelectionStat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = stat; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",22, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // statement ::= iteration_statement 
            {
              Statement RESULT =null;
		IterationStat stat = (IterationStat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = stat; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",22, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // statement ::= jump_statement 
            {
              Statement RESULT =null;
		JumpStat stat = (JumpStat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = stat; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",22, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // statement_list ::= statement 
            {
              StatList RESULT =null;
		Statement stat = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = (new StatList()).add(stat); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",23, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // statement_list ::= statement_list statement 
            {
              StatList RESULT =null;
		StatList list = (StatList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Statement stat = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = list.add(stat); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",23, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expression_statement ::= expression COLON 
            {
              ExpressionStat RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			RESULT = new ExpressionStat(expr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_statement",24, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expression_statement ::= COLON 
            {
              ExpressionStat RESULT =null;
			RESULT = new ExpressionStat(new EmptyExpr()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_statement",24, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$9 ::= 
            {
              CompoundStat RESULT =null;
		DeclList dlst = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		StatList slst = (StatList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 table.delScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",64, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // compound_statement ::= CURLYL declaration_list statement_list NT$9 CURLYR 
            {
              CompoundStat RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (CompoundStat) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		DeclList dlst = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		StatList slst = (StatList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
			RESULT = new CompoundStat(dlst, slst); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_statement",25, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$10 ::= 
            {
              CompoundStat RESULT =null;
		StatList slst = (StatList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 table.delScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10",65, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // compound_statement ::= CURLYL statement_list NT$10 CURLYR 
            {
              CompoundStat RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (CompoundStat) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		StatList slst = (StatList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
			RESULT = new CompoundStat(new DeclList(), slst); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_statement",25, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$11 ::= 
            {
              CompoundStat RESULT =null;
		DeclList dlst = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 table.delScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$11",66, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // compound_statement ::= CURLYL declaration_list NT$11 CURLYR 
            {
              CompoundStat RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (CompoundStat) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		DeclList dlst = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
			RESULT = new CompoundStat(dlst, new StatList()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_statement",25, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$12 ::= 
            {
              CompoundStat RESULT =null;
 table.delScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$12",67, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // compound_statement ::= CURLYL NT$12 CURLYR 
            {
              CompoundStat RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (CompoundStat) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			RESULT = new CompoundStat(new DeclList(), new StatList()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_statement",25, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // selection_statement ::= IF PARAL expression PARAR statement 
            {
              SelectionStat RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Statement iftr = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new SelectionStat(expr, iftr, new ExpressionStat(new EmptyExpr())); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selection_statement",26, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // selection_statement ::= IF PARAL expression PARAR statement ELSE statement 
            {
              SelectionStat RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Statement iftr = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Statement iffl = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new SelectionStat(expr, iftr, iffl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selection_statement",26, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // iteration_statement ::= WHILE PARAL expression PARAR statement 
            {
              IterationStat RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Statement stat = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new IterationStat(new EmptyExpr(), expr, new EmptyExpr(), stat); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",27, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // iteration_statement ::= FOR PARAL expression_statement expression_statement PARAR statement 
            {
              IterationStat RESULT =null;
		ExpressionStat init = (ExpressionStat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		ExpressionStat expr = (ExpressionStat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Statement stat = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new IterationStat(init.expr, expr.expr, new EmptyExpr(), stat); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",27, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // iteration_statement ::= FOR PARAL expression_statement expression_statement expression PARAR statement 
            {
              IterationStat RESULT =null;
		ExpressionStat init = (ExpressionStat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		ExpressionStat expr = (ExpressionStat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Expression inct = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Statement stat = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new IterationStat(init.expr, expr.expr, inct, stat); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",27, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // jump_statement ::= CONTINUE COLON 
            {
              JumpStat RESULT =null;
			RESULT = new ContinueStat(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_statement",28, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // jump_statement ::= BREAK COLON 
            {
              JumpStat RESULT =null;
			RESULT = new BreakStat(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_statement",28, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // jump_statement ::= RETURN COLON 
            {
              JumpStat RESULT =null;
			RESULT = new ReturnStat(new EmptyExpr()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_statement",28, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // jump_statement ::= RETURN expression COLON 
            {
              JumpStat RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			RESULT = new ReturnStat(expr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_statement",28, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expression ::= assignment_expression 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",29, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expression ::= expression COMMA assignment_expression 
            {
              Expression RESULT =null;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new BinaryExpr(expr1, Symbols.COMMA, expr2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",29, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // assignment_expression ::= logical_or_expression 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",30, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // assignment_expression ::= unary_expression assignment_operator assignment_expression 
            {
              Expression RESULT =null;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new BinaryExpr(expr1, op, expr2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",30, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // assignment_operator ::= ASSIGN 
            {
              Integer RESULT =null;
			RESULT = Symbols.ASSIGN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",47, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // assignment_operator ::= MUL_ASSIGN 
            {
              Integer RESULT =null;
			RESULT = Symbols.MUL_ASSIGN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",47, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // assignment_operator ::= DIV_ASSIGN 
            {
              Integer RESULT =null;
			RESULT = Symbols.DIV_ASSIGN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",47, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // assignment_operator ::= MOD_ASSIGN 
            {
              Integer RESULT =null;
			RESULT = Symbols.MOD_ASSIGN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",47, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // assignment_operator ::= ADD_ASSIGN 
            {
              Integer RESULT =null;
			RESULT = Symbols.ADD_ASSIGN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",47, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // assignment_operator ::= SUB_ASSIGN 
            {
              Integer RESULT =null;
			RESULT = Symbols.SUB_ASSIGN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",47, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // assignment_operator ::= SHL_ASSIGN 
            {
              Integer RESULT =null;
			RESULT = Symbols.SHL_ASSIGN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",47, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // assignment_operator ::= SHR_ASSIGN 
            {
              Integer RESULT =null;
			RESULT = Symbols.SHR_ASSIGN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",47, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // assignment_operator ::= AND_ASSIGN 
            {
              Integer RESULT =null;
			RESULT = Symbols.AND_ASSIGN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",47, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // assignment_operator ::= OR_ASSIGN 
            {
              Integer RESULT =null;
			RESULT = Symbols.OR_ASSIGN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",47, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // assignment_operator ::= XOR_ASSIGN 
            {
              Integer RESULT =null;
			RESULT = Symbols.XOR_ASSIGN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",47, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // constant_expression ::= logical_or_expression 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_expression",31, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // logical_or_expression ::= logical_and_expression 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_or_expression",32, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // logical_or_expression ::= logical_or_expression OR_OP logical_and_expression 
            {
              Expression RESULT =null;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new BinaryExpr(expr1, Symbols.OR_OP, expr2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_or_expression",32, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // logical_and_expression ::= inclusive_or_expression 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_and_expression",33, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // logical_and_expression ::= logical_and_expression AND_OP inclusive_or_expression 
            {
              Expression RESULT =null;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new BinaryExpr(expr1, Symbols.AND_OP, expr2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_and_expression",33, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // inclusive_or_expression ::= exclusive_or_expression 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inclusive_or_expression",34, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // inclusive_or_expression ::= inclusive_or_expression OR exclusive_or_expression 
            {
              Expression RESULT =null;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new BinaryExpr(expr1, Symbols.OR, expr2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inclusive_or_expression",34, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // exclusive_or_expression ::= and_expression 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exclusive_or_expression",35, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // exclusive_or_expression ::= exclusive_or_expression XOR and_expression 
            {
              Expression RESULT =null;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new BinaryExpr(expr1, Symbols.XOR, expr2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exclusive_or_expression",35, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // and_expression ::= equality_expression 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = expr;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("and_expression",36, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // and_expression ::= and_expression ADRESS equality_expression 
            {
              Expression RESULT =null;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new BinaryExpr(expr1, Symbols.ADRESS, expr2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("and_expression",36, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // equality_expression ::= relational_expression 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = expr;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_expression",37, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // equality_expression ::= equality_expression equality_operator relational_expression 
            {
              Expression RESULT =null;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new BinaryExpr(expr1, op, expr2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_expression",37, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // equality_operator ::= EQ_OP 
            {
              Integer RESULT =null;
			RESULT = Symbols.EQ_OP;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_operator",48, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // equality_operator ::= NE_OP 
            {
              Integer RESULT =null;
			RESULT = Symbols.NE_OP;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_operator",48, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // relational_expression ::= shift_expression 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = expr;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expression",38, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // relational_expression ::= relational_expression relational_operator shift_expression 
            {
              Expression RESULT =null;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new BinaryExpr(expr1, op, expr2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expression",38, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // relational_operator ::= LESS 
            {
              Integer RESULT =null;
			RESULT = Symbols.LESS;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator",49, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // relational_operator ::= GREATER 
            {
              Integer RESULT =null;
			RESULT = Symbols.GREATER;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator",49, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // relational_operator ::= LE_OP 
            {
              Integer RESULT =null;
			RESULT = Symbols.LE_OP;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator",49, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // relational_operator ::= GE_OP 
            {
              Integer RESULT =null;
			RESULT = Symbols.GE_OP;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator",49, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // shift_expression ::= additive_expression 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = expr;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shift_expression",39, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // shift_expression ::= shift_expression shift_operator additive_expression 
            {
              Expression RESULT =null;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new BinaryExpr(expr1, op, expr2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shift_expression",39, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // shift_operator ::= SHL_OP 
            {
              Integer RESULT =null;
			RESULT = Symbols.SHL_OP;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shift_operator",50, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // shift_operator ::= SHR_OP 
            {
              Integer RESULT =null;
			RESULT = Symbols.SHR_OP;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shift_operator",50, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // additive_expression ::= multiplicative_expression 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = expr;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_expression",40, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // additive_expression ::= additive_expression additive_operator multiplicative_expression 
            {
              Expression RESULT =null;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new BinaryExpr(expr1, op, expr2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_expression",40, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // additive_operator ::= ADD 
            {
              Integer RESULT =null;
			RESULT = Symbols.ADD;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_operator",51, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // additive_operator ::= SUB 
            {
              Integer RESULT =null;
			RESULT = Symbols.SUB;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_operator",51, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // multiplicative_expression ::= cast_expression 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = expr;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",41, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // multiplicative_expression ::= multiplicative_expression multiplicative_operator cast_expression 
            {
              Expression RESULT =null;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new BinaryExpr(expr1, op, expr2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",41, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // multiplicative_operator ::= MUL 
            {
              Integer RESULT =null;
			RESULT = Symbols.MUL;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_operator",52, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // multiplicative_operator ::= DIV 
            {
              Integer RESULT =null;
			RESULT = Symbols.DIV;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_operator",52, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // multiplicative_operator ::= MOD 
            {
              Integer RESULT =null;
			RESULT = Symbols.MOD;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_operator",52, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // cast_expression ::= unary_expression 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = expr;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cast_expression",42, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // cast_expression ::= PARAL type_name PARAR cast_expression 
            {
              Expression RESULT =null;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new CastExpr(type, expr);	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cast_expression",42, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // type_name ::= type_specifier 
            {
              Type RESULT =null;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_name",20, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // type_name ::= type_name MUL 
            {
              Type RESULT =null;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			RESULT = new PointerType(type); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_name",20, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // unary_expression ::= postfix_expression 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",43, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // unary_expression ::= unary_operator cast_expression 
            {
              Expression RESULT =null;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new UnaryExpr(op, expr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",43, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // unary_expression ::= SIZEOF unary_expression 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new UnaryExpr(Symbols.SIZEOF, expr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",43, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // unary_expression ::= SIZEOF PARAL type_name PARAR 
            {
              Expression RESULT =null;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			RESULT = new SizeofExpr(type); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",43, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // unary_operator ::= ADRESS 
            {
              Integer RESULT =null;
			RESULT = Symbols.ADRESS;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",53, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // unary_operator ::= MUL 
            {
              Integer RESULT =null;
			RESULT = Symbols.MUL;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",53, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // unary_operator ::= ADD 
            {
              Integer RESULT =null;
			RESULT = Symbols.ADD;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",53, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // unary_operator ::= SUB 
            {
              Integer RESULT =null;
			RESULT = Symbols.SUB;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",53, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // unary_operator ::= TILDE 
            {
              Integer RESULT =null;
			RESULT = Symbols.TILDE;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",53, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // unary_operator ::= NOT 
            {
              Integer RESULT =null;
			RESULT = Symbols.NOT;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",53, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // unary_operator ::= INC_OP 
            {
              Integer RESULT =null;
			RESULT = Symbols.INC_OP; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",53, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // unary_operator ::= DEC_OP 
            {
              Integer RESULT =null;
			RESULT = Symbols.DEC_OP; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",53, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // postfix_expression ::= primary_expression 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",44, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // postfix_expression ::= postfix_expression SQUARL expression SQUARR 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Expression delta = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			RESULT = new ArrayExpr(expr, delta); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",44, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // postfix_expression ::= postfix_expression PARAL PARAR 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
			RESULT = new FunctionCall(expr, new ArgumentList()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",44, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // postfix_expression ::= postfix_expression PARAL argument_list PARAR 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		ArgumentList argu = (ArgumentList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			RESULT = new FunctionCall(expr, argu); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",44, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // postfix_expression ::= postfix_expression DOT IDENTIFIER 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new RecordAccess(expr, new Symbol(id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",44, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // postfix_expression ::= postfix_expression PTR_OP IDENTIFIER 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new PointerAccess(expr, new Symbol(id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",44, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // postfix_expression ::= postfix_expression DOT TYPENAME 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new RecordAccess(expr, new Symbol(id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",44, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // postfix_expression ::= postfix_expression PTR_OP TYPENAME 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new PointerAccess(expr, new Symbol(id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",44, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // postfix_expression ::= postfix_expression INC_OP 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			RESULT = new PostExpr(expr, Symbols.INC_OP); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",44, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // postfix_expression ::= postfix_expression DEC_OP 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			RESULT = new PostExpr(expr, Symbols.DEC_OP); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",44, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // argument_list ::= assignment_expression 
            {
              ArgumentList RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = (new ArgumentList()).add(expr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument_list",46, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // argument_list ::= argument_list COMMA assignment_expression 
            {
              ArgumentList RESULT =null;
		ArgumentList list = (ArgumentList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = list.add(expr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument_list",46, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // primary_expression ::= IDENTIFIER 
            {
              Expression RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new Variable(new Symbol(id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",45, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // primary_expression ::= INTEGER 
            {
              Expression RESULT =null;
		int it = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new IntConst(it); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",45, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // primary_expression ::= CHARACTER 
            {
              Expression RESULT =null;
		char ch = (char)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new CharConst(ch); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",45, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // primary_expression ::= strings 
            {
              Expression RESULT =null;
		String st = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new StringConst(st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",45, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // primary_expression ::= PARAL expression PARAR 
            {
              Expression RESULT =null;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",45, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // strings ::= STRING 
            {
              String RESULT =null;
		String st = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = st; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("strings",54, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // strings ::= strings STRING 
            {
              String RESULT =null;
		String st1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		String st2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = st1 + st2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("strings",54, RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
