
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package parser;

import lexer.Yylex;
import java.io.Reader;
import ast.nodes.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symbols.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\220\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\003\003\000\002\003\003\000\002\015\007" +
    "\000\002\015\010\000\002\005\003\000\002\005\004\000" +
    "\002\004\004\000\002\004\005\000\002\007\004\000\002" +
    "\013\003\000\002\013\005\000\002\013\006\000\002\013" +
    "\004\000\002\011\003\000\002\011\005\000\002\014\003" +
    "\000\002\014\004\000\002\022\005\000\002\022\006\000" +
    "\002\010\003\000\002\010\005\000\002\006\003\000\002" +
    "\006\005\000\002\012\003\000\002\012\005\000\002\016" +
    "\003\000\002\016\005\000\002\017\003\000\002\017\005" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\004\000\002\020\007\000\002\020\006\000\002" +
    "\020\004\000\002\020\006\000\002\023\005\000\002\023" +
    "\006\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\025\003\000" +
    "\002\025\004\000\002\026\004\000\002\026\003\000\002" +
    "\027\006\000\002\027\005\000\002\027\005\000\002\027" +
    "\004\000\002\030\007\000\002\030\011\000\002\031\007" +
    "\000\002\031\010\000\002\031\011\000\002\032\004\000" +
    "\002\032\004\000\002\032\004\000\002\032\005\000\002" +
    "\033\003\000\002\033\005\000\002\034\003\000\002\034" +
    "\005\000\002\055\003\000\002\055\003\000\002\055\003" +
    "\000\002\055\003\000\002\055\003\000\002\055\003\000" +
    "\002\055\003\000\002\055\003\000\002\055\003\000\002" +
    "\055\003\000\002\055\003\000\002\035\003\000\002\036" +
    "\003\000\002\036\005\000\002\037\003\000\002\037\005" +
    "\000\002\040\003\000\002\040\005\000\002\041\003\000" +
    "\002\041\005\000\002\042\003\000\002\042\005\000\002" +
    "\043\003\000\002\043\005\000\002\056\003\000\002\056" +
    "\003\000\002\044\003\000\002\044\005\000\002\057\003" +
    "\000\002\057\003\000\002\057\003\000\002\057\003\000" +
    "\002\045\003\000\002\045\005\000\002\060\003\000\002" +
    "\060\003\000\002\046\003\000\002\046\005\000\002\061" +
    "\003\000\002\061\003\000\002\047\003\000\002\047\005" +
    "\000\002\062\003\000\002\062\003\000\002\062\003\000" +
    "\002\050\003\000\002\050\006\000\002\021\003\000\002" +
    "\021\004\000\002\051\003\000\002\051\004\000\002\051" +
    "\004\000\002\051\004\000\002\051\004\000\002\051\006" +
    "\000\002\063\003\000\002\063\003\000\002\063\003\000" +
    "\002\063\003\000\002\063\003\000\002\063\003\000\002" +
    "\052\003\000\002\052\006\000\002\052\005\000\002\052" +
    "\006\000\002\052\005\000\002\052\005\000\002\052\004" +
    "\000\002\052\004\000\002\054\003\000\002\054\005\000" +
    "\002\053\003\000\002\053\003\000\002\053\003\000\002" +
    "\053\003\000\002\053\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\355\000\014\063\012\064\015\065\004\066\011\067" +
    "\010\001\002\000\012\005\uffe0\006\uffe0\015\uffe0\057\uffe0" +
    "\001\002\000\016\002\000\063\000\064\000\065\000\066" +
    "\000\067\000\001\002\000\016\002\ufffe\063\ufffe\064\ufffe" +
    "\065\ufffe\066\ufffe\067\ufffe\001\002\000\016\002\ufffd\063" +
    "\ufffd\064\ufffd\065\ufffd\066\ufffd\067\ufffd\001\002\000\006" +
    "\011\354\057\355\001\002\000\006\011\334\057\335\001" +
    "\002\000\012\005\uffe1\006\uffe1\015\uffe1\057\uffe1\001\002" +
    "\000\016\002\333\063\012\064\015\065\004\066\011\067" +
    "\010\001\002\000\010\006\021\015\020\057\022\001\002" +
    "\000\012\005\uffdf\006\uffdf\015\uffdf\057\uffdf\001\002\000" +
    "\006\006\330\007\327\001\002\000\010\006\uffe7\007\uffe7" +
    "\010\316\001\002\000\006\015\020\057\022\001\002\000" +
    "\074\002\ufff8\004\ufff8\006\ufff8\011\ufff8\012\ufff8\015\ufff8" +
    "\020\ufff8\023\ufff8\024\ufff8\027\ufff8\030\ufff8\042\ufff8\043" +
    "\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8\063\ufff8\064\ufff8" +
    "\065\ufff8\066\ufff8\067\ufff8\070\ufff8\072\ufff8\073\ufff8\074" +
    "\ufff8\075\ufff8\076\ufff8\077\ufff8\001\002\000\016\004\uffef" +
    "\005\uffef\006\uffef\007\uffef\010\uffef\013\uffef\001\002\000" +
    "\006\006\uffe9\007\uffe9\001\002\000\014\004\027\006\ufff5" +
    "\007\ufff5\010\ufff5\013\026\001\002\000\014\005\ufff2\006" +
    "\ufff2\007\ufff2\010\ufff2\013\312\001\002\000\036\004\055" +
    "\015\073\020\101\023\074\024\116\027\053\030\057\042" +
    "\050\043\040\057\120\060\044\061\056\062\112\077\060" +
    "\001\002\000\016\005\032\063\012\064\015\065\004\066" +
    "\011\067\010\001\002\000\006\005\uffeb\007\uffeb\001\002" +
    "\000\006\015\020\057\022\001\002\000\012\006\ufff4\007" +
    "\ufff4\010\ufff4\011\036\001\002\000\006\005\035\007\034" +
    "\001\002\000\014\063\012\064\015\065\004\066\011\067" +
    "\010\001\002\000\012\006\ufff3\007\ufff3\010\ufff3\011\036" +
    "\001\002\000\072\004\055\006\104\011\036\012\052\015" +
    "\073\020\101\023\074\024\116\027\053\030\057\042\050" +
    "\043\040\057\120\060\044\061\056\062\112\063\012\064" +
    "\015\065\004\066\011\067\010\070\065\072\107\073\051" +
    "\074\046\075\076\076\071\077\060\001\002\000\016\002" +
    "\ufffb\063\ufffb\064\ufffb\065\ufffb\066\ufffb\067\ufffb\001\002" +
    "\000\036\004\275\015\073\020\101\023\074\024\116\027" +
    "\053\030\057\042\050\043\040\057\120\060\044\061\056" +
    "\062\112\077\060\001\002\000\072\004\055\006\104\011" +
    "\036\012\277\015\073\020\101\023\074\024\116\027\053" +
    "\030\057\042\050\043\040\057\120\060\044\061\056\062" +
    "\112\063\012\064\015\065\004\066\011\067\010\070\065" +
    "\072\107\073\051\074\046\075\076\076\071\077\060\001" +
    "\002\000\052\005\uff9d\006\uff9d\007\uff9d\012\uff9d\014\uff9d" +
    "\016\uff9d\017\uff9d\020\uff9d\021\uff9d\022\uff9d\023\140\024" +
    "\137\032\uff9d\033\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d" +
    "\040\uff9d\041\uff9d\001\002\000\062\004\uffd4\006\uffd4\011" +
    "\uffd4\012\uffd4\015\uffd4\020\uffd4\023\uffd4\024\uffd4\027\uffd4" +
    "\030\uffd4\042\uffd4\043\uffd4\057\uffd4\060\uffd4\061\uffd4\062" +
    "\uffd4\070\uffd4\071\uffd4\072\uffd4\073\uffd4\074\uffd4\075\uffd4" +
    "\076\uffd4\077\uffd4\001\002\000\122\004\uff75\005\uff75\006" +
    "\uff75\007\uff75\010\uff75\012\uff75\013\uff75\014\uff75\015\uff75" +
    "\016\uff75\017\uff75\020\uff75\021\uff75\022\uff75\023\uff75\024" +
    "\uff75\025\uff75\026\uff75\031\uff75\032\uff75\033\uff75\034\uff75" +
    "\035\uff75\036\uff75\037\uff75\040\uff75\041\uff75\042\uff75\043" +
    "\uff75\044\uff75\045\uff75\046\uff75\047\uff75\050\uff75\051\uff75" +
    "\052\uff75\053\uff75\054\uff75\055\uff75\056\uff75\001\002\000" +
    "\062\004\uffd3\006\uffd3\011\uffd3\012\uffd3\015\uffd3\020\uffd3" +
    "\023\uffd3\024\uffd3\027\uffd3\030\uffd3\042\uffd3\043\uffd3\057" +
    "\uffd3\060\uffd3\061\uffd3\062\uffd3\070\uffd3\071\uffd3\072\uffd3" +
    "\073\uffd3\074\uffd3\075\uffd3\076\uffd3\077\uffd3\001\002\000" +
    "\004\006\276\001\002\000\062\004\uffd6\006\uffd6\011\uffd6" +
    "\012\uffd6\015\uffd6\020\uffd6\023\uffd6\024\uffd6\027\uffd6\030" +
    "\uffd6\042\uffd6\043\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6" +
    "\070\uffd6\071\uffd6\072\uffd6\073\uffd6\074\uffd6\075\uffd6\076" +
    "\uffd6\077\uffd6\001\002\000\036\004\275\015\073\020\101" +
    "\023\074\024\116\027\053\030\057\042\050\043\040\057" +
    "\120\060\044\061\056\062\112\077\060\001\002\000\004" +
    "\004\264\001\002\000\076\002\uffcb\004\uffcb\006\uffcb\011" +
    "\uffcb\012\uffcb\015\uffcb\020\uffcb\023\uffcb\024\uffcb\027\uffcb" +
    "\030\uffcb\042\uffcb\043\uffcb\057\uffcb\060\uffcb\061\uffcb\062" +
    "\uffcb\063\uffcb\064\uffcb\065\uffcb\066\uffcb\067\uffcb\070\uffcb" +
    "\071\uffcb\072\uffcb\073\uffcb\074\uffcb\075\uffcb\076\uffcb\077" +
    "\uffcb\001\002\000\036\004\uff82\015\uff82\020\uff82\023\uff82" +
    "\024\uff82\027\uff82\030\uff82\042\uff82\043\uff82\057\uff82\060" +
    "\uff82\061\uff82\062\uff82\077\uff82\001\002\000\122\004\uff80" +
    "\005\uff80\006\uff80\007\uff80\010\uff80\012\uff80\013\uff80\014" +
    "\uff80\015\uff80\016\uff80\017\uff80\020\uff80\021\uff80\022\uff80" +
    "\023\uff80\024\uff80\025\uff80\026\uff80\031\uff80\032\uff80\033" +
    "\uff80\034\uff80\035\uff80\036\uff80\037\uff80\040\uff80\041\uff80" +
    "\042\uff80\043\uff80\044\uff80\045\uff80\046\uff80\047\uff80\050" +
    "\uff80\051\uff80\052\uff80\053\uff80\054\uff80\055\uff80\056\uff80" +
    "\001\002\000\050\004\055\015\073\020\101\023\074\024" +
    "\116\027\053\030\057\042\050\043\040\057\120\060\044" +
    "\061\056\062\112\063\012\064\015\065\004\066\011\067" +
    "\010\077\060\001\002\000\122\004\uff74\005\uff74\006\uff74" +
    "\007\uff74\010\uff74\012\uff74\013\uff74\014\uff74\015\uff74\016" +
    "\uff74\017\uff74\020\uff74\021\uff74\022\uff74\023\uff74\024\uff74" +
    "\025\uff74\026\uff74\031\uff74\032\uff74\033\uff74\034\uff74\035" +
    "\uff74\036\uff74\037\uff74\040\uff74\041\uff74\042\uff74\043\uff74" +
    "\044\uff74\045\uff74\046\uff74\047\uff74\050\uff74\051\uff74\052" +
    "\uff74\053\uff74\054\uff74\055\uff74\056\uff74\001\002\000\036" +
    "\004\uff81\015\uff81\020\uff81\023\uff81\024\uff81\027\uff81\030" +
    "\uff81\042\uff81\043\uff81\057\uff81\060\uff81\061\uff81\062\uff81" +
    "\077\uff81\001\002\000\036\004\252\015\073\020\101\023" +
    "\074\024\116\027\053\030\057\042\050\043\040\057\120" +
    "\060\044\061\056\062\112\077\060\001\002\000\016\005" +
    "\uffbf\006\uffbf\007\uffbf\012\uffbf\014\uffbf\032\247\001\002" +
    "\000\032\005\uffa9\006\uffa9\007\uffa9\012\uffa9\014\uffa9\016" +
    "\uffa9\017\uffa9\020\uffa9\032\uffa9\033\uffa9\034\164\035\165" +
    "\001\002\000\024\005\uffad\006\uffad\007\uffad\012\uffad\014" +
    "\uffad\016\uffad\017\160\032\uffad\033\uffad\001\002\000\060" +
    "\005\uff95\006\uff95\007\uff95\012\uff95\014\uff95\015\uff95\016" +
    "\uff95\017\uff95\020\uff95\021\uff95\022\uff95\023\uff95\024\uff95" +
    "\025\uff95\026\uff95\032\uff95\033\uff95\034\uff95\035\uff95\036" +
    "\uff95\037\uff95\040\uff95\041\uff95\001\002\000\004\004\241" +
    "\001\002\000\006\006\240\007\152\001\002\000\060\004" +
    "\uffd2\006\uffd2\011\uffd2\012\uffd2\015\uffd2\020\uffd2\023\uffd2" +
    "\024\uffd2\027\uffd2\030\uffd2\042\uffd2\043\uffd2\057\uffd2\060" +
    "\uffd2\061\uffd2\062\uffd2\070\uffd2\072\uffd2\073\uffd2\074\uffd2" +
    "\075\uffd2\076\uffd2\077\uffd2\001\002\000\106\005\uff90\006" +
    "\uff90\007\uff90\010\232\012\uff90\014\uff90\015\uff90\016\uff90" +
    "\017\uff90\020\uff90\021\uff90\022\uff90\023\uff90\024\uff90\025" +
    "\uff90\026\uff90\032\uff90\033\uff90\034\uff90\035\uff90\036\uff90" +
    "\037\uff90\040\uff90\041\uff90\045\224\046\227\047\234\050" +
    "\225\051\226\052\236\053\233\054\223\055\235\056\230" +
    "\001\002\000\040\004\055\006\220\015\073\020\101\023" +
    "\074\024\116\027\053\030\057\042\050\043\040\057\120" +
    "\060\044\061\056\062\112\077\060\001\002\000\010\006" +
    "\021\015\020\057\022\001\002\000\036\004\uff85\015\uff85" +
    "\020\uff85\023\uff85\024\uff85\027\uff85\030\uff85\042\uff85\043" +
    "\uff85\057\uff85\060\uff85\061\uff85\062\uff85\077\uff85\001\002" +
    "\000\036\004\uff84\015\uff84\020\uff84\023\uff84\024\uff84\027" +
    "\uff84\030\uff84\042\uff84\043\uff84\057\uff84\060\uff84\061\uff84" +
    "\062\uff84\077\uff84\001\002\000\062\004\uffd5\006\uffd5\011" +
    "\uffd5\012\uffd5\015\uffd5\020\uffd5\023\uffd5\024\uffd5\027\uffd5" +
    "\030\uffd5\042\uffd5\043\uffd5\057\uffd5\060\uffd5\061\uffd5\062" +
    "\uffd5\070\uffd5\071\uffd5\072\uffd5\073\uffd5\074\uffd5\075\uffd5" +
    "\076\uffd5\077\uffd5\001\002\000\004\006\212\001\002\000" +
    "\122\004\177\005\uff8c\006\uff8c\007\uff8c\010\uff8c\012\uff8c" +
    "\013\175\014\uff8c\015\uff8c\016\uff8c\017\uff8c\020\uff8c\021" +
    "\uff8c\022\uff8c\023\uff8c\024\uff8c\025\uff8c\026\uff8c\031\176" +
    "\032\uff8c\033\uff8c\034\uff8c\035\uff8c\036\uff8c\037\uff8c\040" +
    "\uff8c\041\uff8c\042\172\043\173\044\174\045\uff8c\046\uff8c" +
    "\047\uff8c\050\uff8c\051\uff8c\052\uff8c\053\uff8c\054\uff8c\055" +
    "\uff8c\056\uff8c\001\002\000\020\005\uffb1\006\uffb1\007\uffb1" +
    "\012\uffb1\014\uffb1\032\uffb1\033\170\001\002\000\036\004" +
    "\uff86\015\uff86\020\uff86\023\uff86\024\uff86\027\uff86\030\uff86" +
    "\042\uff86\043\uff86\057\uff86\060\uff86\061\uff86\062\uff86\077" +
    "\uff86\001\002\000\046\005\uffa3\006\uffa3\007\uffa3\012\uffa3" +
    "\014\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\032" +
    "\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3\040\134" +
    "\041\133\001\002\000\026\005\uffab\006\uffab\007\uffab\012" +
    "\uffab\014\uffab\016\uffab\017\uffab\020\162\032\uffab\033\uffab" +
    "\001\002\000\064\004\uffcf\005\uffcf\006\uffcf\011\uffcf\012" +
    "\uffcf\015\uffcf\020\uffcf\023\uffcf\024\uffcf\027\uffcf\030\uffcf" +
    "\042\uffcf\043\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf\070" +
    "\uffcf\071\uffcf\072\uffcf\073\uffcf\074\uffcf\075\uffcf\076\uffcf" +
    "\077\uffcf\001\002\000\022\005\uffaf\006\uffaf\007\uffaf\012" +
    "\uffaf\014\uffaf\016\156\032\uffaf\033\uffaf\001\002\000\012" +
    "\005\uffc1\006\uffc1\007\uffc1\014\uffc1\001\002\000\004\004" +
    "\150\001\002\000\060\005\uff99\006\uff99\007\uff99\012\uff99" +
    "\014\uff99\015\145\016\uff99\017\uff99\020\uff99\021\uff99\022" +
    "\uff99\023\uff99\024\uff99\025\146\026\143\032\uff99\033\uff99" +
    "\034\uff99\035\uff99\036\uff99\037\uff99\040\uff99\041\uff99\001" +
    "\002\000\062\004\uffd7\006\uffd7\011\uffd7\012\uffd7\015\uffd7" +
    "\020\uffd7\023\uffd7\024\uffd7\027\uffd7\030\uffd7\042\uffd7\043" +
    "\uffd7\057\uffd7\060\uffd7\061\uffd7\062\uffd7\070\uffd7\071\uffd7" +
    "\072\uffd7\073\uffd7\074\uffd7\075\uffd7\076\uffd7\077\uffd7\001" +
    "\002\000\122\004\uff73\005\uff73\006\uff73\007\uff73\010\uff73" +
    "\012\uff73\013\uff73\014\uff73\015\uff73\016\uff73\017\uff73\020" +
    "\uff73\021\uff73\022\uff73\023\uff73\024\uff73\025\uff73\026\uff73" +
    "\031\uff73\032\uff73\033\uff73\034\uff73\035\uff73\036\uff73\037" +
    "\uff73\040\uff73\041\uff73\042\uff73\043\uff73\044\uff73\045\uff73" +
    "\046\uff73\047\uff73\050\uff73\051\uff73\052\uff73\053\uff73\054" +
    "\uff73\055\uff73\056\uff73\001\002\000\072\004\ufffa\006\ufffa" +
    "\011\ufffa\012\ufffa\015\ufffa\020\ufffa\023\ufffa\024\ufffa\027" +
    "\ufffa\030\ufffa\042\ufffa\043\ufffa\057\ufffa\060\ufffa\061\ufffa" +
    "\062\ufffa\063\ufffa\064\ufffa\065\ufffa\066\ufffa\067\ufffa\070" +
    "\ufffa\072\ufffa\073\ufffa\074\ufffa\075\ufffa\076\ufffa\077\ufffa" +
    "\001\002\000\042\005\uffa7\006\uffa7\007\uffa7\012\uffa7\014" +
    "\uffa7\016\uffa7\017\uffa7\020\uffa7\021\131\022\126\032\uffa7" +
    "\033\uffa7\034\uffa7\035\uffa7\036\125\037\127\001\002\000" +
    "\036\004\055\015\073\020\101\023\074\024\116\027\053" +
    "\030\057\042\050\043\040\057\120\060\044\061\056\062" +
    "\112\077\060\001\002\000\036\004\uff83\015\uff83\020\uff83" +
    "\023\uff83\024\uff83\027\uff83\030\uff83\042\uff83\043\uff83\057" +
    "\uff83\060\uff83\061\uff83\062\uff83\077\uff83\001\002\000\060" +
    "\004\055\006\104\011\036\012\121\015\073\020\101\023" +
    "\074\024\116\027\053\030\057\042\050\043\040\057\120" +
    "\060\044\061\056\062\112\070\065\072\107\073\051\074" +
    "\046\075\076\076\071\077\060\001\002\000\122\004\uff76" +
    "\005\uff76\006\uff76\007\uff76\010\uff76\012\uff76\013\uff76\014" +
    "\uff76\015\uff76\016\uff76\017\uff76\020\uff76\021\uff76\022\uff76" +
    "\023\uff76\024\uff76\025\uff76\026\uff76\031\uff76\032\uff76\033" +
    "\uff76\034\uff76\035\uff76\036\uff76\037\uff76\040\uff76\041\uff76" +
    "\042\uff76\043\uff76\044\uff76\045\uff76\046\uff76\047\uff76\050" +
    "\uff76\051\uff76\052\uff76\053\uff76\054\uff76\055\uff76\056\uff76" +
    "\001\002\000\076\002\uffcd\004\uffcd\006\uffcd\011\uffcd\012" +
    "\uffcd\015\uffcd\020\uffcd\023\uffcd\024\uffcd\027\uffcd\030\uffcd" +
    "\042\uffcd\043\uffcd\057\uffcd\060\uffcd\061\uffcd\062\uffcd\063" +
    "\uffcd\064\uffcd\065\uffcd\066\uffcd\067\uffcd\070\uffcd\071\uffcd" +
    "\072\uffcd\073\uffcd\074\uffcd\075\uffcd\076\uffcd\077\uffcd\001" +
    "\002\000\060\004\uffd1\006\uffd1\011\uffd1\012\uffd1\015\uffd1" +
    "\020\uffd1\023\uffd1\024\uffd1\027\uffd1\030\uffd1\042\uffd1\043" +
    "\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1\070\uffd1\072\uffd1" +
    "\073\uffd1\074\uffd1\075\uffd1\076\uffd1\077\uffd1\001\002\000" +
    "\106\005\uff89\006\uff89\007\uff89\010\uff89\012\uff89\014\uff89" +
    "\015\uff89\016\uff89\017\uff89\020\uff89\021\uff89\022\uff89\023" +
    "\uff89\024\uff89\025\uff89\026\uff89\032\uff89\033\uff89\034\uff89" +
    "\035\uff89\036\uff89\037\uff89\040\uff89\041\uff89\045\uff89\046" +
    "\uff89\047\uff89\050\uff89\051\uff89\052\uff89\053\uff89\054\uff89" +
    "\055\uff89\056\uff89\001\002\000\106\005\uff90\006\uff90\007" +
    "\uff90\010\uff90\012\uff90\014\uff90\015\uff90\016\uff90\017\uff90" +
    "\020\uff90\021\uff90\022\uff90\023\uff90\024\uff90\025\uff90\026" +
    "\uff90\032\uff90\033\uff90\034\uff90\035\uff90\036\uff90\037\uff90" +
    "\040\uff90\041\uff90\045\uff90\046\uff90\047\uff90\050\uff90\051" +
    "\uff90\052\uff90\053\uff90\054\uff90\055\uff90\056\uff90\001\002" +
    "\000\036\004\uff9f\015\uff9f\020\uff9f\023\uff9f\024\uff9f\027" +
    "\uff9f\030\uff9f\042\uff9f\043\uff9f\057\uff9f\060\uff9f\061\uff9f" +
    "\062\uff9f\077\uff9f\001\002\000\036\004\uffa0\015\uffa0\020" +
    "\uffa0\023\uffa0\024\uffa0\027\uffa0\030\uffa0\042\uffa0\043\uffa0" +
    "\057\uffa0\060\uffa0\061\uffa0\062\uffa0\077\uffa0\001\002\000" +
    "\036\004\uff9e\015\uff9e\020\uff9e\023\uff9e\024\uff9e\027\uff9e" +
    "\030\uff9e\042\uff9e\043\uff9e\057\uff9e\060\uff9e\061\uff9e\062" +
    "\uff9e\077\uff9e\001\002\000\036\004\055\015\073\020\101" +
    "\023\074\024\116\027\053\030\057\042\050\043\040\057" +
    "\120\060\044\061\056\062\112\077\060\001\002\000\036" +
    "\004\uffa1\015\uffa1\020\uffa1\023\uffa1\024\uffa1\027\uffa1\030" +
    "\uffa1\042\uffa1\043\uffa1\057\uffa1\060\uffa1\061\uffa1\062\uffa1" +
    "\077\uffa1\001\002\000\046\005\uffa2\006\uffa2\007\uffa2\012" +
    "\uffa2\014\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2" +
    "\032\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\040" +
    "\134\041\133\001\002\000\036\004\uff9a\015\uff9a\020\uff9a" +
    "\023\uff9a\024\uff9a\027\uff9a\030\uff9a\042\uff9a\043\uff9a\057" +
    "\uff9a\060\uff9a\061\uff9a\062\uff9a\077\uff9a\001\002\000\036" +
    "\004\uff9b\015\uff9b\020\uff9b\023\uff9b\024\uff9b\027\uff9b\030" +
    "\uff9b\042\uff9b\043\uff9b\057\uff9b\060\uff9b\061\uff9b\062\uff9b" +
    "\077\uff9b\001\002\000\036\004\055\015\073\020\101\023" +
    "\074\024\116\027\053\030\057\042\050\043\040\057\120" +
    "\060\044\061\056\062\112\077\060\001\002\000\052\005" +
    "\uff9c\006\uff9c\007\uff9c\012\uff9c\014\uff9c\016\uff9c\017\uff9c" +
    "\020\uff9c\021\uff9c\022\uff9c\023\140\024\137\032\uff9c\033" +
    "\uff9c\034\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c" +
    "\001\002\000\036\004\uff96\015\uff96\020\uff96\023\uff96\024" +
    "\uff96\027\uff96\030\uff96\042\uff96\043\uff96\057\uff96\060\uff96" +
    "\061\uff96\062\uff96\077\uff96\001\002\000\036\004\uff97\015" +
    "\uff97\020\uff97\023\uff97\024\uff97\027\uff97\030\uff97\042\uff97" +
    "\043\uff97\057\uff97\060\uff97\061\uff97\062\uff97\077\uff97\001" +
    "\002\000\036\004\055\015\073\020\101\023\074\024\116" +
    "\027\053\030\057\042\050\043\040\057\120\060\044\061" +
    "\056\062\112\077\060\001\002\000\060\005\uff98\006\uff98" +
    "\007\uff98\012\uff98\014\uff98\015\145\016\uff98\017\uff98\020" +
    "\uff98\021\uff98\022\uff98\023\uff98\024\uff98\025\146\026\143" +
    "\032\uff98\033\uff98\034\uff98\035\uff98\036\uff98\037\uff98\040" +
    "\uff98\041\uff98\001\002\000\036\004\uff91\015\uff91\020\uff91" +
    "\023\uff91\024\uff91\027\uff91\030\uff91\042\uff91\043\uff91\057" +
    "\uff91\060\uff91\061\uff91\062\uff91\077\uff91\001\002\000\036" +
    "\004\055\015\073\020\101\023\074\024\116\027\053\030" +
    "\057\042\050\043\040\057\120\060\044\061\056\062\112" +
    "\077\060\001\002\000\036\004\uff93\015\uff93\020\uff93\023" +
    "\uff93\024\uff93\027\uff93\030\uff93\042\uff93\043\uff93\057\uff93" +
    "\060\uff93\061\uff93\062\uff93\077\uff93\001\002\000\036\004" +
    "\uff92\015\uff92\020\uff92\023\uff92\024\uff92\027\uff92\030\uff92" +
    "\042\uff92\043\uff92\057\uff92\060\uff92\061\uff92\062\uff92\077" +
    "\uff92\001\002\000\060\005\uff94\006\uff94\007\uff94\012\uff94" +
    "\014\uff94\015\uff94\016\uff94\017\uff94\020\uff94\021\uff94\022" +
    "\uff94\023\uff94\024\uff94\025\uff94\026\uff94\032\uff94\033\uff94" +
    "\034\uff94\035\uff94\036\uff94\037\uff94\040\uff94\041\uff94\001" +
    "\002\000\036\004\055\015\073\020\101\023\074\024\116" +
    "\027\053\030\057\042\050\043\040\057\120\060\044\061" +
    "\056\062\112\077\060\001\002\000\006\005\153\007\152" +
    "\001\002\000\036\004\055\015\073\020\101\023\074\024" +
    "\116\027\053\030\057\042\050\043\040\057\120\060\044" +
    "\061\056\062\112\077\060\001\002\000\056\004\055\006" +
    "\104\011\036\015\073\020\101\023\074\024\116\027\053" +
    "\030\057\042\050\043\040\057\120\060\044\061\056\062" +
    "\112\070\065\072\107\073\051\074\046\075\076\076\071" +
    "\077\060\001\002\000\062\004\uffc8\006\uffc8\011\uffc8\012" +
    "\uffc8\015\uffc8\020\uffc8\023\uffc8\024\uffc8\027\uffc8\030\uffc8" +
    "\042\uffc8\043\uffc8\057\uffc8\060\uffc8\061\uffc8\062\uffc8\070" +
    "\uffc8\071\uffc8\072\uffc8\073\uffc8\074\uffc8\075\uffc8\076\uffc8" +
    "\077\uffc8\001\002\000\012\005\uffc0\006\uffc0\007\uffc0\014" +
    "\uffc0\001\002\000\036\004\055\015\073\020\101\023\074" +
    "\024\116\027\053\030\057\042\050\043\040\057\120\060" +
    "\044\061\056\062\112\077\060\001\002\000\024\005\uffac" +
    "\006\uffac\007\uffac\012\uffac\014\uffac\016\uffac\017\160\032" +
    "\uffac\033\uffac\001\002\000\036\004\055\015\073\020\101" +
    "\023\074\024\116\027\053\030\057\042\050\043\040\057" +
    "\120\060\044\061\056\062\112\077\060\001\002\000\026" +
    "\005\uffaa\006\uffaa\007\uffaa\012\uffaa\014\uffaa\016\uffaa\017" +
    "\uffaa\020\162\032\uffaa\033\uffaa\001\002\000\036\004\055" +
    "\015\073\020\101\023\074\024\116\027\053\030\057\042" +
    "\050\043\040\057\120\060\044\061\056\062\112\077\060" +
    "\001\002\000\032\005\uffa8\006\uffa8\007\uffa8\012\uffa8\014" +
    "\uffa8\016\uffa8\017\uffa8\020\uffa8\032\uffa8\033\uffa8\034\164" +
    "\035\165\001\002\000\036\004\uffa5\015\uffa5\020\uffa5\023" +
    "\uffa5\024\uffa5\027\uffa5\030\uffa5\042\uffa5\043\uffa5\057\uffa5" +
    "\060\uffa5\061\uffa5\062\uffa5\077\uffa5\001\002\000\036\004" +
    "\uffa4\015\uffa4\020\uffa4\023\uffa4\024\uffa4\027\uffa4\030\uffa4" +
    "\042\uffa4\043\uffa4\057\uffa4\060\uffa4\061\uffa4\062\uffa4\077" +
    "\uffa4\001\002\000\036\004\055\015\073\020\101\023\074" +
    "\024\116\027\053\030\057\042\050\043\040\057\120\060" +
    "\044\061\056\062\112\077\060\001\002\000\042\005\uffa6" +
    "\006\uffa6\007\uffa6\012\uffa6\014\uffa6\016\uffa6\017\uffa6\020" +
    "\uffa6\021\131\022\126\032\uffa6\033\uffa6\034\uffa6\035\uffa6" +
    "\036\125\037\127\001\002\000\036\004\055\015\073\020" +
    "\101\023\074\024\116\027\053\030\057\042\050\043\040" +
    "\057\120\060\044\061\056\062\112\077\060\001\002\000" +
    "\022\005\uffae\006\uffae\007\uffae\012\uffae\014\uffae\016\156" +
    "\032\uffae\033\uffae\001\002\000\122\004\uff7a\005\uff7a\006" +
    "\uff7a\007\uff7a\010\uff7a\012\uff7a\013\uff7a\014\uff7a\015\uff7a" +
    "\016\uff7a\017\uff7a\020\uff7a\021\uff7a\022\uff7a\023\uff7a\024" +
    "\uff7a\025\uff7a\026\uff7a\031\uff7a\032\uff7a\033\uff7a\034\uff7a" +
    "\035\uff7a\036\uff7a\037\uff7a\040\uff7a\041\uff7a\042\uff7a\043" +
    "\uff7a\044\uff7a\045\uff7a\046\uff7a\047\uff7a\050\uff7a\051\uff7a" +
    "\052\uff7a\053\uff7a\054\uff7a\055\uff7a\056\uff7a\001\002\000" +
    "\122\004\uff79\005\uff79\006\uff79\007\uff79\010\uff79\012\uff79" +
    "\013\uff79\014\uff79\015\uff79\016\uff79\017\uff79\020\uff79\021" +
    "\uff79\022\uff79\023\uff79\024\uff79\025\uff79\026\uff79\031\uff79" +
    "\032\uff79\033\uff79\034\uff79\035\uff79\036\uff79\037\uff79\040" +
    "\uff79\041\uff79\042\uff79\043\uff79\044\uff79\045\uff79\046\uff79" +
    "\047\uff79\050\uff79\051\uff79\052\uff79\053\uff79\054\uff79\055" +
    "\uff79\056\uff79\001\002\000\004\057\211\001\002\000\036" +
    "\004\055\015\073\020\101\023\074\024\116\027\053\030" +
    "\057\042\050\043\040\057\120\060\044\061\056\062\112" +
    "\077\060\001\002\000\004\057\206\001\002\000\040\004" +
    "\055\005\201\015\073\020\101\023\074\024\116\027\053" +
    "\030\057\042\050\043\040\057\120\060\044\061\056\062" +
    "\112\077\060\001\002\000\006\005\uff78\007\uff78\001\002" +
    "\000\122\004\uff7e\005\uff7e\006\uff7e\007\uff7e\010\uff7e\012" +
    "\uff7e\013\uff7e\014\uff7e\015\uff7e\016\uff7e\017\uff7e\020\uff7e" +
    "\021\uff7e\022\uff7e\023\uff7e\024\uff7e\025\uff7e\026\uff7e\031" +
    "\uff7e\032\uff7e\033\uff7e\034\uff7e\035\uff7e\036\uff7e\037\uff7e" +
    "\040\uff7e\041\uff7e\042\uff7e\043\uff7e\044\uff7e\045\uff7e\046" +
    "\uff7e\047\uff7e\050\uff7e\051\uff7e\052\uff7e\053\uff7e\054\uff7e" +
    "\055\uff7e\056\uff7e\001\002\000\006\005\204\007\203\001" +
    "\002\000\036\004\055\015\073\020\101\023\074\024\116" +
    "\027\053\030\057\042\050\043\040\057\120\060\044\061" +
    "\056\062\112\077\060\001\002\000\122\004\uff7d\005\uff7d" +
    "\006\uff7d\007\uff7d\010\uff7d\012\uff7d\013\uff7d\014\uff7d\015" +
    "\uff7d\016\uff7d\017\uff7d\020\uff7d\021\uff7d\022\uff7d\023\uff7d" +
    "\024\uff7d\025\uff7d\026\uff7d\031\uff7d\032\uff7d\033\uff7d\034" +
    "\uff7d\035\uff7d\036\uff7d\037\uff7d\040\uff7d\041\uff7d\042\uff7d" +
    "\043\uff7d\044\uff7d\045\uff7d\046\uff7d\047\uff7d\050\uff7d\051" +
    "\uff7d\052\uff7d\053\uff7d\054\uff7d\055\uff7d\056\uff7d\001\002" +
    "\000\006\005\uff77\007\uff77\001\002\000\122\004\uff7c\005" +
    "\uff7c\006\uff7c\007\uff7c\010\uff7c\012\uff7c\013\uff7c\014\uff7c" +
    "\015\uff7c\016\uff7c\017\uff7c\020\uff7c\021\uff7c\022\uff7c\023" +
    "\uff7c\024\uff7c\025\uff7c\026\uff7c\031\uff7c\032\uff7c\033\uff7c" +
    "\034\uff7c\035\uff7c\036\uff7c\037\uff7c\040\uff7c\041\uff7c\042" +
    "\uff7c\043\uff7c\044\uff7c\045\uff7c\046\uff7c\047\uff7c\050\uff7c" +
    "\051\uff7c\052\uff7c\053\uff7c\054\uff7c\055\uff7c\056\uff7c\001" +
    "\002\000\006\007\152\014\210\001\002\000\122\004\uff7f" +
    "\005\uff7f\006\uff7f\007\uff7f\010\uff7f\012\uff7f\013\uff7f\014" +
    "\uff7f\015\uff7f\016\uff7f\017\uff7f\020\uff7f\021\uff7f\022\uff7f" +
    "\023\uff7f\024\uff7f\025\uff7f\026\uff7f\031\uff7f\032\uff7f\033" +
    "\uff7f\034\uff7f\035\uff7f\036\uff7f\037\uff7f\040\uff7f\041\uff7f" +
    "\042\uff7f\043\uff7f\044\uff7f\045\uff7f\046\uff7f\047\uff7f\050" +
    "\uff7f\051\uff7f\052\uff7f\053\uff7f\054\uff7f\055\uff7f\056\uff7f" +
    "\001\002\000\122\004\uff7b\005\uff7b\006\uff7b\007\uff7b\010" +
    "\uff7b\012\uff7b\013\uff7b\014\uff7b\015\uff7b\016\uff7b\017\uff7b" +
    "\020\uff7b\021\uff7b\022\uff7b\023\uff7b\024\uff7b\025\uff7b\026" +
    "\uff7b\031\uff7b\032\uff7b\033\uff7b\034\uff7b\035\uff7b\036\uff7b" +
    "\037\uff7b\040\uff7b\041\uff7b\042\uff7b\043\uff7b\044\uff7b\045" +
    "\uff7b\046\uff7b\047\uff7b\050\uff7b\051\uff7b\052\uff7b\053\uff7b" +
    "\054\uff7b\055\uff7b\056\uff7b\001\002\000\062\004\uffc4\006" +
    "\uffc4\011\uffc4\012\uffc4\015\uffc4\020\uffc4\023\uffc4\024\uffc4" +
    "\027\uffc4\030\uffc4\042\uffc4\043\uffc4\057\uffc4\060\uffc4\061" +
    "\uffc4\062\uffc4\070\uffc4\071\uffc4\072\uffc4\073\uffc4\074\uffc4" +
    "\075\uffc4\076\uffc4\077\uffc4\001\002\000\016\004\214\005" +
    "\ufff5\006\ufff5\007\ufff5\010\ufff5\013\026\001\002\000\016" +
    "\005\215\063\012\064\015\065\004\066\011\067\010\001" +
    "\002\000\012\005\ufff4\006\ufff4\007\ufff4\010\ufff4\001\002" +
    "\000\006\005\217\007\034\001\002\000\012\005\ufff3\006" +
    "\ufff3\007\ufff3\010\ufff3\001\002\000\062\004\uffc3\006\uffc3" +
    "\011\uffc3\012\uffc3\015\uffc3\020\uffc3\023\uffc3\024\uffc3\027" +
    "\uffc3\030\uffc3\042\uffc3\043\uffc3\057\uffc3\060\uffc3\061\uffc3" +
    "\062\uffc3\070\uffc3\071\uffc3\072\uffc3\073\uffc3\074\uffc3\075" +
    "\uffc3\076\uffc3\077\uffc3\001\002\000\006\006\222\007\152" +
    "\001\002\000\062\004\uffc2\006\uffc2\011\uffc2\012\uffc2\015" +
    "\uffc2\020\uffc2\023\uffc2\024\uffc2\027\uffc2\030\uffc2\042\uffc2" +
    "\043\uffc2\057\uffc2\060\uffc2\061\uffc2\062\uffc2\070\uffc2\071" +
    "\uffc2\072\uffc2\073\uffc2\074\uffc2\075\uffc2\076\uffc2\077\uffc2" +
    "\001\002\000\036\004\uffb3\015\uffb3\020\uffb3\023\uffb3\024" +
    "\uffb3\027\uffb3\030\uffb3\042\uffb3\043\uffb3\057\uffb3\060\uffb3" +
    "\061\uffb3\062\uffb3\077\uffb3\001\002\000\036\004\uffbc\015" +
    "\uffbc\020\uffbc\023\uffbc\024\uffbc\027\uffbc\030\uffbc\042\uffbc" +
    "\043\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc\077\uffbc\001" +
    "\002\000\036\004\uffb9\015\uffb9\020\uffb9\023\uffb9\024\uffb9" +
    "\027\uffb9\030\uffb9\042\uffb9\043\uffb9\057\uffb9\060\uffb9\061" +
    "\uffb9\062\uffb9\077\uffb9\001\002\000\036\004\uffb8\015\uffb8" +
    "\020\uffb8\023\uffb8\024\uffb8\027\uffb8\030\uffb8\042\uffb8\043" +
    "\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8\077\uffb8\001\002" +
    "\000\036\004\uffbb\015\uffbb\020\uffbb\023\uffbb\024\uffbb\027" +
    "\uffbb\030\uffbb\042\uffbb\043\uffbb\057\uffbb\060\uffbb\061\uffbb" +
    "\062\uffbb\077\uffbb\001\002\000\036\004\uffb5\015\uffb5\020" +
    "\uffb5\023\uffb5\024\uffb5\027\uffb5\030\uffb5\042\uffb5\043\uffb5" +
    "\057\uffb5\060\uffb5\061\uffb5\062\uffb5\077\uffb5\001\002\000" +
    "\036\004\055\015\073\020\101\023\074\024\116\027\053" +
    "\030\057\042\050\043\040\057\120\060\044\061\056\062" +
    "\112\077\060\001\002\000\036\004\uffbd\015\uffbd\020\uffbd" +
    "\023\uffbd\024\uffbd\027\uffbd\030\uffbd\042\uffbd\043\uffbd\057" +
    "\uffbd\060\uffbd\061\uffbd\062\uffbd\077\uffbd\001\002\000\036" +
    "\004\uffb6\015\uffb6\020\uffb6\023\uffb6\024\uffb6\027\uffb6\030" +
    "\uffb6\042\uffb6\043\uffb6\057\uffb6\060\uffb6\061\uffb6\062\uffb6" +
    "\077\uffb6\001\002\000\036\004\uffba\015\uffba\020\uffba\023" +
    "\uffba\024\uffba\027\uffba\030\uffba\042\uffba\043\uffba\057\uffba" +
    "\060\uffba\061\uffba\062\uffba\077\uffba\001\002\000\036\004" +
    "\uffb4\015\uffb4\020\uffb4\023\uffb4\024\uffb4\027\uffb4\030\uffb4" +
    "\042\uffb4\043\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4\077" +
    "\uffb4\001\002\000\036\004\uffb7\015\uffb7\020\uffb7\023\uffb7" +
    "\024\uffb7\027\uffb7\030\uffb7\042\uffb7\043\uffb7\057\uffb7\060" +
    "\uffb7\061\uffb7\062\uffb7\077\uffb7\001\002\000\014\005\uffbe" +
    "\006\uffbe\007\uffbe\012\uffbe\014\uffbe\001\002\000\064\004" +
    "\uffd0\005\uffd0\006\uffd0\011\uffd0\012\uffd0\015\uffd0\020\uffd0" +
    "\023\uffd0\024\uffd0\027\uffd0\030\uffd0\042\uffd0\043\uffd0\057" +
    "\uffd0\060\uffd0\061\uffd0\062\uffd0\070\uffd0\071\uffd0\072\uffd0" +
    "\073\uffd0\074\uffd0\075\uffd0\076\uffd0\077\uffd0\001\002\000" +
    "\036\004\055\015\073\020\101\023\074\024\116\027\053" +
    "\030\057\042\050\043\040\057\120\060\044\061\056\062" +
    "\112\077\060\001\002\000\006\005\243\007\152\001\002" +
    "\000\056\004\055\006\104\011\036\015\073\020\101\023" +
    "\074\024\116\027\053\030\057\042\050\043\040\057\120" +
    "\060\044\061\056\062\112\070\065\072\107\073\051\074" +
    "\046\075\076\076\071\077\060\001\002\000\062\004\uffca" +
    "\006\uffca\011\uffca\012\uffca\015\uffca\020\uffca\023\uffca\024" +
    "\uffca\027\uffca\030\uffca\042\uffca\043\uffca\057\uffca\060\uffca" +
    "\061\uffca\062\uffca\070\uffca\071\245\072\uffca\073\uffca\074" +
    "\uffca\075\uffca\076\uffca\077\uffca\001\002\000\056\004\055" +
    "\006\104\011\036\015\073\020\101\023\074\024\116\027" +
    "\053\030\057\042\050\043\040\057\120\060\044\061\056" +
    "\062\112\070\065\072\107\073\051\074\046\075\076\076" +
    "\071\077\060\001\002\000\062\004\uffc9\006\uffc9\011\uffc9" +
    "\012\uffc9\015\uffc9\020\uffc9\023\uffc9\024\uffc9\027\uffc9\030" +
    "\uffc9\042\uffc9\043\uffc9\057\uffc9\060\uffc9\061\uffc9\062\uffc9" +
    "\070\uffc9\071\uffc9\072\uffc9\073\uffc9\074\uffc9\075\uffc9\076" +
    "\uffc9\077\uffc9\001\002\000\036\004\055\015\073\020\101" +
    "\023\074\024\116\027\053\030\057\042\050\043\040\057" +
    "\120\060\044\061\056\062\112\077\060\001\002\000\020" +
    "\005\uffb0\006\uffb0\007\uffb0\012\uffb0\014\uffb0\032\uffb0\033" +
    "\170\001\002\000\106\005\uff88\006\uff88\007\uff88\010\uff88" +
    "\012\uff88\014\uff88\015\uff88\016\uff88\017\uff88\020\uff88\021" +
    "\uff88\022\uff88\023\uff88\024\uff88\025\uff88\026\uff88\032\uff88" +
    "\033\uff88\034\uff88\035\uff88\036\uff88\037\uff88\040\uff88\041" +
    "\uff88\045\uff88\046\uff88\047\uff88\050\uff88\051\uff88\052\uff88" +
    "\053\uff88\054\uff88\055\uff88\056\uff88\001\002\000\050\004" +
    "\055\015\073\020\101\023\074\024\116\027\053\030\057" +
    "\042\050\043\040\057\120\060\044\061\056\062\112\063" +
    "\012\064\015\065\004\066\011\067\010\077\060\001\002" +
    "\000\006\005\260\007\152\001\002\000\006\005\uff8e\015" +
    "\uff8e\001\002\000\006\005\256\015\257\001\002\000\106" +
    "\005\uff87\006\uff87\007\uff87\010\uff87\012\uff87\014\uff87\015" +
    "\uff87\016\uff87\017\uff87\020\uff87\021\uff87\022\uff87\023\uff87" +
    "\024\uff87\025\uff87\026\uff87\032\uff87\033\uff87\034\uff87\035" +
    "\uff87\036\uff87\037\uff87\040\uff87\041\uff87\045\uff87\046\uff87" +
    "\047\uff87\050\uff87\051\uff87\052\uff87\053\uff87\054\uff87\055" +
    "\uff87\056\uff87\001\002\000\006\005\uff8d\015\uff8d\001\002" +
    "\000\122\004\uff72\005\uff72\006\uff72\007\uff72\010\uff72\012" +
    "\uff72\013\uff72\014\uff72\015\uff72\016\uff72\017\uff72\020\uff72" +
    "\021\uff72\022\uff72\023\uff72\024\uff72\025\uff72\026\uff72\031" +
    "\uff72\032\uff72\033\uff72\034\uff72\035\uff72\036\uff72\037\uff72" +
    "\040\uff72\041\uff72\042\uff72\043\uff72\044\uff72\045\uff72\046" +
    "\uff72\047\uff72\050\uff72\051\uff72\052\uff72\053\uff72\054\uff72" +
    "\055\uff72\056\uff72\001\002\000\006\005\262\015\257\001" +
    "\002\000\036\004\055\015\073\020\101\023\074\024\116" +
    "\027\053\030\057\042\050\043\040\057\120\060\044\061" +
    "\056\062\112\077\060\001\002\000\106\005\uff8f\006\uff8f" +
    "\007\uff8f\010\uff8f\012\uff8f\014\uff8f\015\uff8f\016\uff8f\017" +
    "\uff8f\020\uff8f\021\uff8f\022\uff8f\023\uff8f\024\uff8f\025\uff8f" +
    "\026\uff8f\032\uff8f\033\uff8f\034\uff8f\035\uff8f\036\uff8f\037" +
    "\uff8f\040\uff8f\041\uff8f\045\uff8f\046\uff8f\047\uff8f\050\uff8f" +
    "\051\uff8f\052\uff8f\053\uff8f\054\uff8f\055\uff8f\056\uff8f\001" +
    "\002\000\040\004\055\006\104\015\073\020\101\023\074" +
    "\024\116\027\053\030\057\042\050\043\040\057\120\060" +
    "\044\061\056\062\112\077\060\001\002\000\040\004\055" +
    "\006\104\015\073\020\101\023\074\024\116\027\053\030" +
    "\057\042\050\043\040\057\120\060\044\061\056\062\112" +
    "\077\060\001\002\000\040\004\055\005\270\015\073\020" +
    "\101\023\074\024\116\027\053\030\057\042\050\043\040" +
    "\057\120\060\044\061\056\062\112\077\060\001\002\000" +
    "\006\005\272\007\152\001\002\000\056\004\055\006\104" +
    "\011\036\015\073\020\101\023\074\024\116\027\053\030" +
    "\057\042\050\043\040\057\120\060\044\061\056\062\112" +
    "\070\065\072\107\073\051\074\046\075\076\076\071\077" +
    "\060\001\002\000\062\004\uffc7\006\uffc7\011\uffc7\012\uffc7" +
    "\015\uffc7\020\uffc7\023\uffc7\024\uffc7\027\uffc7\030\uffc7\042" +
    "\uffc7\043\uffc7\057\uffc7\060\uffc7\061\uffc7\062\uffc7\070\uffc7" +
    "\071\uffc7\072\uffc7\073\uffc7\074\uffc7\075\uffc7\076\uffc7\077" +
    "\uffc7\001\002\000\056\004\055\006\104\011\036\015\073" +
    "\020\101\023\074\024\116\027\053\030\057\042\050\043" +
    "\040\057\120\060\044\061\056\062\112\070\065\072\107" +
    "\073\051\074\046\075\076\076\071\077\060\001\002\000" +
    "\062\004\uffc6\006\uffc6\011\uffc6\012\uffc6\015\uffc6\020\uffc6" +
    "\023\uffc6\024\uffc6\027\uffc6\030\uffc6\042\uffc6\043\uffc6\057" +
    "\uffc6\060\uffc6\061\uffc6\062\uffc6\070\uffc6\071\uffc6\072\uffc6" +
    "\073\uffc6\074\uffc6\075\uffc6\076\uffc6\077\uffc6\001\002\000" +
    "\106\005\uff8b\006\uff8b\007\uff8b\010\uff8b\012\uff8b\014\uff8b" +
    "\015\uff8b\016\uff8b\017\uff8b\020\uff8b\021\uff8b\022\uff8b\023" +
    "\uff8b\024\uff8b\025\uff8b\026\uff8b\032\uff8b\033\uff8b\034\uff8b" +
    "\035\uff8b\036\uff8b\037\uff8b\040\uff8b\041\uff8b\045\uff8b\046" +
    "\uff8b\047\uff8b\050\uff8b\051\uff8b\052\uff8b\053\uff8b\054\uff8b" +
    "\055\uff8b\056\uff8b\001\002\000\036\004\055\015\073\020" +
    "\101\023\074\024\116\027\053\030\057\042\050\043\040" +
    "\057\120\060\044\061\056\062\112\077\060\001\002\000" +
    "\062\004\uffc5\006\uffc5\011\uffc5\012\uffc5\015\uffc5\020\uffc5" +
    "\023\uffc5\024\uffc5\027\uffc5\030\uffc5\042\uffc5\043\uffc5\057" +
    "\uffc5\060\uffc5\061\uffc5\062\uffc5\070\uffc5\071\uffc5\072\uffc5" +
    "\073\uffc5\074\uffc5\075\uffc5\076\uffc5\077\uffc5\001\002\000" +
    "\076\002\uffcc\004\uffcc\006\uffcc\011\uffcc\012\uffcc\015\uffcc" +
    "\020\uffcc\023\uffcc\024\uffcc\027\uffcc\030\uffcc\042\uffcc\043" +
    "\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc\064\uffcc" +
    "\065\uffcc\066\uffcc\067\uffcc\070\uffcc\071\uffcc\072\uffcc\073" +
    "\uffcc\074\uffcc\075\uffcc\076\uffcc\077\uffcc\001\002\000\072" +
    "\004\ufff9\006\ufff9\011\ufff9\012\ufff9\015\ufff9\020\ufff9\023" +
    "\ufff9\024\ufff9\027\ufff9\030\ufff9\042\ufff9\043\ufff9\057\ufff9" +
    "\060\ufff9\061\ufff9\062\ufff9\063\ufff9\064\ufff9\065\ufff9\066" +
    "\ufff9\067\ufff9\070\ufff9\072\ufff9\073\ufff9\074\ufff9\075\ufff9" +
    "\076\ufff9\077\ufff9\001\002\000\060\004\055\006\104\011" +
    "\036\012\302\015\073\020\101\023\074\024\116\027\053" +
    "\030\057\042\050\043\040\057\120\060\044\061\056\062" +
    "\112\070\065\072\107\073\051\074\046\075\076\076\071" +
    "\077\060\001\002\000\076\002\uffce\004\uffce\006\uffce\011" +
    "\uffce\012\uffce\015\uffce\020\uffce\023\uffce\024\uffce\027\uffce" +
    "\030\uffce\042\uffce\043\uffce\057\uffce\060\uffce\061\uffce\062" +
    "\uffce\063\uffce\064\uffce\065\uffce\066\uffce\067\uffce\070\uffce" +
    "\071\uffce\072\uffce\073\uffce\074\uffce\075\uffce\076\uffce\077" +
    "\uffce\001\002\000\106\005\uff8a\006\uff8a\007\uff8a\010\uff8a" +
    "\012\uff8a\014\uff8a\015\uff8a\016\uff8a\017\uff8a\020\uff8a\021" +
    "\uff8a\022\uff8a\023\uff8a\024\uff8a\025\uff8a\026\uff8a\032\uff8a" +
    "\033\uff8a\034\uff8a\035\uff8a\036\uff8a\037\uff8a\040\uff8a\041" +
    "\uff8a\045\uff8a\046\uff8a\047\uff8a\050\uff8a\051\uff8a\052\uff8a" +
    "\053\uff8a\054\uff8a\055\uff8a\056\uff8a\001\002\000\006\005" +
    "\uffea\007\uffea\001\002\000\016\002\ufffc\063\ufffc\064\ufffc" +
    "\065\ufffc\066\ufffc\067\ufffc\001\002\000\006\005\ufff6\007" +
    "\ufff6\001\002\000\006\014\uffb2\032\247\001\002\000\004" +
    "\014\311\001\002\000\014\005\uffed\006\uffed\007\uffed\010" +
    "\uffed\013\uffed\001\002\000\036\004\055\015\073\020\101" +
    "\023\074\024\116\027\053\030\057\042\050\043\040\057" +
    "\120\060\044\061\056\062\112\077\060\001\002\000\004" +
    "\014\314\001\002\000\014\005\uffec\006\uffec\007\uffec\010" +
    "\uffec\013\uffec\001\002\000\016\004\uffee\005\uffee\006\uffee" +
    "\007\uffee\010\uffee\013\uffee\001\002\000\040\004\055\011" +
    "\321\015\073\020\101\023\074\024\116\027\053\030\057" +
    "\042\050\043\040\057\120\060\044\061\056\062\112\077" +
    "\060\001\002\000\010\006\uffe5\007\uffe5\012\uffe5\001\002" +
    "\000\006\006\uffe6\007\uffe6\001\002\000\040\004\055\011" +
    "\321\015\073\020\101\023\074\024\116\027\053\030\057" +
    "\042\050\043\040\057\120\060\044\061\056\062\112\077" +
    "\060\001\002\000\006\007\324\012\325\001\002\000\006" +
    "\007\uffe3\012\uffe3\001\002\000\040\004\055\011\321\015" +
    "\073\020\101\023\074\024\116\027\053\030\057\042\050" +
    "\043\040\057\120\060\044\061\056\062\112\077\060\001" +
    "\002\000\010\006\uffe4\007\uffe4\012\uffe4\001\002\000\006" +
    "\007\uffe2\012\uffe2\001\002\000\006\015\020\057\022\001" +
    "\002\000\074\002\ufff7\004\ufff7\006\ufff7\011\ufff7\012\ufff7" +
    "\015\ufff7\020\ufff7\023\ufff7\024\ufff7\027\ufff7\030\ufff7\042" +
    "\ufff7\043\ufff7\057\ufff7\060\ufff7\061\ufff7\062\ufff7\063\ufff7" +
    "\064\ufff7\065\ufff7\066\ufff7\067\ufff7\070\ufff7\072\ufff7\073" +
    "\ufff7\074\ufff7\075\ufff7\076\ufff7\077\ufff7\001\002\000\006" +
    "\006\uffe8\007\uffe8\001\002\000\016\002\uffff\063\uffff\064" +
    "\uffff\065\uffff\066\uffff\067\uffff\001\002\000\004\002\001" +
    "\001\002\000\014\063\012\064\015\065\004\066\011\067" +
    "\010\001\002\000\014\005\uffde\006\uffde\011\336\015\uffde" +
    "\057\uffde\001\002\000\014\063\012\064\015\065\004\066" +
    "\011\067\010\001\002\000\006\015\020\057\022\001\002" +
    "\000\016\012\342\063\012\064\015\065\004\066\011\067" +
    "\010\001\002\000\006\015\020\057\022\001\002\000\012" +
    "\005\uffdd\006\uffdd\015\uffdd\057\uffdd\001\002\000\006\006" +
    "\ufff1\007\ufff1\001\002\000\006\006\346\007\345\001\002" +
    "\000\006\015\020\057\022\001\002\000\016\012\uffd8\063" +
    "\uffd8\064\uffd8\065\uffd8\066\uffd8\067\uffd8\001\002\000\006" +
    "\006\ufff0\007\ufff0\001\002\000\006\006\351\007\345\001" +
    "\002\000\016\012\uffd9\063\uffd9\064\uffd9\065\uffd9\066\uffd9" +
    "\067\uffd9\001\002\000\016\012\353\063\012\064\015\065" +
    "\004\066\011\067\010\001\002\000\012\005\uffdc\006\uffdc" +
    "\015\uffdc\057\uffdc\001\002\000\014\063\012\064\015\065" +
    "\004\066\011\067\010\001\002\000\012\005\uffdb\006\uffdb" +
    "\015\uffdb\057\uffdb\001\002\000\016\012\357\063\012\064" +
    "\015\065\004\066\011\067\010\001\002\000\012\005\uffda" +
    "\006\uffda\015\uffda\057\uffda\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\355\000\014\002\012\003\004\004\005\015\006\020" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\331\004\005\015\006" +
    "\020\013\001\001\000\012\006\015\012\022\013\016\014" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\314\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\024\001\001" +
    "\000\002\001\001\000\042\035\307\036\306\037\077\040" +
    "\104\041\062\042\102\043\061\044\113\045\101\046\041" +
    "\047\107\050\063\051\123\052\076\053\053\063\114\001" +
    "\001\000\010\007\027\010\032\020\030\001\001\000\002" +
    "\001\001\000\006\013\305\014\212\001\001\000\004\027" +
    "\304\001\001\000\002\001\001\000\006\007\303\020\030" +
    "\001\001\000\004\027\036\001\001\000\070\004\112\005" +
    "\040\020\071\024\066\025\116\026\110\027\046\030\074" +
    "\031\042\032\044\033\065\034\105\036\060\037\077\040" +
    "\104\041\062\042\102\043\061\044\113\045\101\046\041" +
    "\047\107\050\063\051\067\052\076\053\053\063\114\001" +
    "\001\000\002\001\001\000\012\051\302\052\076\053\053" +
    "\063\114\001\001\000\066\004\277\020\071\024\066\025" +
    "\300\026\110\027\046\030\074\031\042\032\044\033\065" +
    "\034\105\036\060\037\077\040\104\041\062\042\102\043" +
    "\061\044\113\045\101\046\041\047\107\050\063\051\067" +
    "\052\076\053\053\063\114\001\001\000\004\061\140\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\051\273\052" +
    "\076\053\053\063\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\020" +
    "\253\021\260\033\252\034\105\036\060\037\077\040\104" +
    "\041\062\042\102\043\061\044\113\045\101\046\041\047" +
    "\107\050\063\051\067\052\076\053\053\063\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\051\250\052" +
    "\076\053\053\063\114\001\001\000\002\001\001\000\004" +
    "\056\165\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\055\230\001\001\000\044\033\220\034\105\036\060\037" +
    "\077\040\104\041\062\042\102\043\061\044\113\045\101" +
    "\046\041\047\107\050\063\051\067\052\076\053\053\063" +
    "\114\001\001\000\012\006\015\012\022\013\016\014\212" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\060\134\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\062\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\057\127" +
    "\001\001\000\014\050\122\051\123\052\076\053\053\063" +
    "\114\001\001\000\002\001\001\000\060\024\121\026\110" +
    "\027\046\030\074\031\042\032\044\033\065\034\105\036" +
    "\060\037\077\040\104\041\062\042\102\043\061\044\113" +
    "\045\101\046\041\047\107\050\063\051\067\052\076\053" +
    "\053\063\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\045\131\046\041\047\107\050\063\051\123\052\076\053" +
    "\053\063\114\001\001\000\002\001\001\000\004\060\134" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\046" +
    "\135\047\107\050\063\051\123\052\076\053\053\063\114" +
    "\001\001\000\004\061\140\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\047\141\050\063\051\123\052\076" +
    "\053\053\063\114\001\001\000\004\062\143\001\001\000" +
    "\002\001\001\000\014\050\146\051\123\052\076\053\053" +
    "\063\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\033\150\034\105\036\060\037\077" +
    "\040\104\041\062\042\102\043\061\044\113\045\101\046" +
    "\041\047\107\050\063\051\067\052\076\053\053\063\114" +
    "\001\001\000\002\001\001\000\042\034\154\036\060\037" +
    "\077\040\104\041\062\042\102\043\061\044\113\045\101" +
    "\046\041\047\107\050\063\051\067\052\076\053\053\063" +
    "\114\001\001\000\060\024\153\026\110\027\046\030\074" +
    "\031\042\032\044\033\065\034\105\036\060\037\077\040" +
    "\104\041\062\042\102\043\061\044\113\045\101\046\041" +
    "\047\107\050\063\051\067\052\076\053\053\063\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\041\156" +
    "\042\102\043\061\044\113\045\101\046\041\047\107\050" +
    "\063\051\123\052\076\053\053\063\114\001\001\000\002" +
    "\001\001\000\030\042\160\043\061\044\113\045\101\046" +
    "\041\047\107\050\063\051\123\052\076\053\053\063\114" +
    "\001\001\000\002\001\001\000\026\043\162\044\113\045" +
    "\101\046\041\047\107\050\063\051\123\052\076\053\053" +
    "\063\114\001\001\000\004\056\165\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\044\166\045\101\046\041" +
    "\047\107\050\063\051\123\052\076\053\053\063\114\001" +
    "\001\000\004\057\127\001\001\000\034\040\170\041\062" +
    "\042\102\043\061\044\113\045\101\046\041\047\107\050" +
    "\063\051\123\052\076\053\053\063\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\033\206\034\105\036\060\037\077\040\104" +
    "\041\062\042\102\043\061\044\113\045\101\046\041\047" +
    "\107\050\063\051\067\052\076\053\053\063\114\001\001" +
    "\000\002\001\001\000\044\034\177\036\060\037\077\040" +
    "\104\041\062\042\102\043\061\044\113\045\101\046\041" +
    "\047\107\050\063\051\067\052\076\053\053\054\201\063" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\034\204\036\060\037\077\040\104\041" +
    "\062\042\102\043\061\044\113\045\101\046\041\047\107" +
    "\050\063\051\067\052\076\053\053\063\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\024\001\001\000\010\007\027\010\215" +
    "\020\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\034\236\036\060\037\077\040\104\041\062\042" +
    "\102\043\061\044\113\045\101\046\041\047\107\050\063" +
    "\051\067\052\076\053\053\063\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\033\241\034\105\036\060\037\077\040\104\041\062" +
    "\042\102\043\061\044\113\045\101\046\041\047\107\050" +
    "\063\051\067\052\076\053\053\063\114\001\001\000\002" +
    "\001\001\000\060\024\243\026\110\027\046\030\074\031" +
    "\042\032\044\033\065\034\105\036\060\037\077\040\104" +
    "\041\062\042\102\043\061\044\113\045\101\046\041\047" +
    "\107\050\063\051\067\052\076\053\053\063\114\001\001" +
    "\000\002\001\001\000\060\024\245\026\110\027\046\030" +
    "\074\031\042\032\044\033\065\034\105\036\060\037\077" +
    "\040\104\041\062\042\102\043\061\044\113\045\101\046" +
    "\041\047\107\050\063\051\067\052\076\053\053\063\114" +
    "\001\001\000\002\001\001\000\036\037\247\040\104\041" +
    "\062\042\102\043\061\044\113\045\101\046\041\047\107" +
    "\050\063\051\123\052\076\053\053\063\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\020\253\021\254" +
    "\033\252\034\105\036\060\037\077\040\104\041\062\042" +
    "\102\043\061\044\113\045\101\046\041\047\107\050\063" +
    "\051\067\052\076\053\053\063\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\050\262\051\123\052\076\053\053\063\114\001\001" +
    "\000\002\001\001\000\046\026\264\033\065\034\105\036" +
    "\060\037\077\040\104\041\062\042\102\043\061\044\113" +
    "\045\101\046\041\047\107\050\063\051\067\052\076\053" +
    "\053\063\114\001\001\000\046\026\265\033\065\034\105" +
    "\036\060\037\077\040\104\041\062\042\102\043\061\044" +
    "\113\045\101\046\041\047\107\050\063\051\067\052\076" +
    "\053\053\063\114\001\001\000\044\033\266\034\105\036" +
    "\060\037\077\040\104\041\062\042\102\043\061\044\113" +
    "\045\101\046\041\047\107\050\063\051\067\052\076\053" +
    "\053\063\114\001\001\000\002\001\001\000\060\024\270" +
    "\026\110\027\046\030\074\031\042\032\044\033\065\034" +
    "\105\036\060\037\077\040\104\041\062\042\102\043\061" +
    "\044\113\045\101\046\041\047\107\050\063\051\067\052" +
    "\076\053\053\063\114\001\001\000\002\001\001\000\060" +
    "\024\272\026\110\027\046\030\074\031\042\032\044\033" +
    "\065\034\105\036\060\037\077\040\104\041\062\042\102" +
    "\043\061\044\113\045\101\046\041\047\107\050\063\051" +
    "\067\052\076\053\053\063\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\033\252\034\105\036\060\037" +
    "\077\040\104\041\062\042\102\043\061\044\113\045\101" +
    "\046\041\047\107\050\063\051\067\052\076\053\053\063" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\060\024\121\026\110\027\046\030\074\031" +
    "\042\032\044\033\065\034\105\036\060\037\077\040\104" +
    "\041\062\042\102\043\061\044\113\045\101\046\041\047" +
    "\107\050\063\051\067\052\076\053\053\063\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\035\312\036\306\037" +
    "\077\040\104\041\062\042\102\043\061\044\113\045\101" +
    "\046\041\047\107\050\063\051\123\052\076\053\053\063" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\016\317\034\316\036\060\037\077\040" +
    "\104\041\062\042\102\043\061\044\113\045\101\046\041" +
    "\047\107\050\063\051\067\052\076\053\053\063\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\016\322" +
    "\017\321\034\316\036\060\037\077\040\104\041\062\042" +
    "\102\043\061\044\113\045\101\046\041\047\107\050\063" +
    "\051\067\052\076\053\053\063\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\016\325\034\316\036\060" +
    "\037\077\040\104\041\062\042\102\043\061\044\113\045" +
    "\101\046\041\047\107\050\063\051\067\052\076\053\053" +
    "\063\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\012\330\013\016\014\212\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\020\336\023\351\001\001\000\002\001\001\000\006" +
    "\020\336\023\337\001\001\000\010\011\347\013\342\014" +
    "\212\001\001\000\004\020\340\001\001\000\010\011\343" +
    "\013\342\014\212\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\346\014\212\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\340\001\001\000\002\001\001" +
    "\000\006\020\336\023\355\001\001\000\002\001\001\000" +
    "\004\020\340\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer("\tParsing error");
    	if (info instanceof java_cup.runtime.Symbol) {
    		java_cup.runtime.Symbol s = (java_cup.runtime.Symbol) info;

   			if (s.left >= 0) {
   				m.append(" in line " + (s.left +1 ));
   				if (s.right >= 0) { m.append(", column " + (s.right + 1));
   				}
   			}
   		}
   		m.append(" : " + message);
   		System.err.println(m);
   	}

   	public Parser(Reader input) {
   		this(new Yylex(input));
   	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= external_definition 
            {
              Program RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Program decl = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = decl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= program external_definition 
            {
              Program RESULT =null;
		int progleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int progright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program prog = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int declleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Program decl = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (new Program()).add(prog).add(decl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // external_definition ::= declaration 
            {
              Program RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DeclList decl = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (new Program()).add(decl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("external_definition",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // external_definition ::= function_definition 
            {
              Program RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionDefi func = (FunctionDefi)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (new Program()).add(func); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("external_definition",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // function_definition ::= type_specifier plain_declarator PARAL PARAR compound_statement 
            {
              FunctionDefi RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dectleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dectright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int statleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int statright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CompoundStat stat = (CompoundStat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							if (dect.type == null) {
								dect.type = type;
							} else {
								dect.type.encore(type);
							}
							RESULT = new FunctionDefi(dect.type, dect.name, new DeclList(), stat); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_definition",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // function_definition ::= type_specifier plain_declarator PARAL parameter_list PARAR compound_statement 
            {
              FunctionDefi RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int dectleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int dectright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int paraleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DeclList para = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int statleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int statright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CompoundStat stat = (CompoundStat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							if (dect.type == null) {
								dect.type = type;
							} else {
								dect.type.encore(type);
							}
							RESULT = new FunctionDefi(dect.type, dect.name, para, stat); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_definition",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration_list ::= declaration 
            {
              DeclList RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DeclList decl = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (new DeclList()).add(decl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration_list ::= declaration_list declaration 
            {
              DeclList RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DeclList list = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int declleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DeclList decl = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = list.add(decl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaration ::= type_specifier COLON 
            {
              DeclList RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = (new DeclList()).add(new TypeDecl(type)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaration ::= type_specifier init_declarator_list COLON 
            {
              DeclList RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DeclList init = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					for (Declaration dect : init.list) {
						if (dect.type == null) {
							dect.type = type;
						} else {
							dect.type.encore(type);
						}
					}
					RESULT = init;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // plain_declaration ::= type_specifier declarator 
            {
              DeclList RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dectleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dectright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							if (dect.type == null) {
								dect.type = type;
							} else {
								dect.type.encore(type);
							}
							RESULT = (new DeclList()).add(dect);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plain_declaration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declarator ::= plain_declarator 
            {
              Declaration RESULT =null;
		int dectleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dectright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new VariableDecl(dect.type, dect.name, new InitList()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declarator ::= plain_declarator PARAL PARAR 
            {
              Declaration RESULT =null;
		int dectleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dectright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  RESULT = new FunctionDecl(dect.type, dect.name, new DeclList()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declarator ::= plain_declarator PARAL parameter_list PARAR 
            {
              Declaration RESULT =null;
		int dectleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dectright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int paraleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DeclList para = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			RESULT = new FunctionDecl(dect.type, dect.name, para); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declarator ::= plain_declarator array_dimensions 
            {
              Declaration RESULT =null;
		int dectleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dectright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tydrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tydrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type tydr = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new VariableDecl(tydr.encore(dect.type), dect.name, new InitList()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declarator_list ::= declarator 
            {
              DeclList RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Declaration decl = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = (new DeclList()).add(decl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declarator_list ::= declarator_list COMMA declarator 
            {
              DeclList RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DeclList list = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int declleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Declaration decl = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = list.add(decl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // plain_declarator ::= IDENTIFIER 
            {
              Declaration RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new VariableDecl(null, new Symbol(name), new InitList()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plain_declarator",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // plain_declarator ::= MUL plain_declarator 
            {
              Declaration RESULT =null;
		int dectleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dectright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			dect.type = new PointerType(dect.type);
							RESULT = dect; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plain_declarator",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // array_dimensions ::= SQUARL constant_expression SQUARR 
            {
              Type RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			RESULT = new ArrayType(null, expr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_dimensions",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // array_dimensions ::= array_dimensions SQUARL constant_expression SQUARR 
            {
              Type RESULT =null;
		int tydrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tydrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Type tydr = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			RESULT = tydr.encore(new ArrayType(null, expr)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_dimensions",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // parameter_list ::= plain_declaration 
            {
              DeclList RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DeclList decl = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = (new DeclList()).add(decl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // parameter_list ::= parameter_list COMMA plain_declaration 
            {
              DeclList RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DeclList list = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int declleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DeclList decl = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = list.add(decl);	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // init_declarator_list ::= init_declarator 
            {
              DeclList RESULT =null;
		int dectleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dectright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = (new DeclList()).add(dect); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_declarator_list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // init_declarator_list ::= init_declarator_list COMMA init_declarator 
            {
              DeclList RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DeclList list = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dectleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dectright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = list.add(dect); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_declarator_list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // init_declarator ::= declarator 
            {
              Declaration RESULT =null;
		int dectleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dectright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = dect; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_declarator",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // init_declarator ::= declarator ASSIGN initializer 
            {
              Declaration RESULT =null;
		int dectleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dectright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Declaration dect = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int initright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Initializer init = (Initializer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			dect.init = init;
						RESULT = dect; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_declarator",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // initializer ::= assignment_expression 
            {
              Initializer RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new InitValue(expr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializer",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // initializer ::= CURLYL initializer_list CURLYR 
            {
              Initializer RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		InitList list = (InitList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			RESULT = list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializer",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // initializer_list ::= initializer 
            {
              InitList RESULT =null;
		int initleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int initright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Initializer init = (Initializer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = (new InitList()).add(init); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializer_list",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // initializer_list ::= initializer_list COMMA initializer 
            {
              InitList RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		InitList list = (InitList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int initright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Initializer init = (Initializer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = list.add(init); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializer_list",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // type_specifier ::= VOID 
            {
              Type RESULT =null;
			RESULT = new VoidType(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type_specifier ::= INT 
            {
              Type RESULT =null;
			RESULT = new IntType(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type_specifier ::= CHAR 
            {
              Type RESULT =null;
			RESULT = new CharType(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // type_specifier ::= STRUCT IDENTIFIER 
            {
              Type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new StructType(new Symbol(id), new DeclList()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // type_specifier ::= STRUCT IDENTIFIER CURLYL field_list CURLYR 
            {
              Type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DeclList list = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			RESULT = new StructType(new Symbol(id), list); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // type_specifier ::= STRUCT CURLYL field_list CURLYR 
            {
              Type RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DeclList list = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			RESULT = new StructType(new Symbol(""), list); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // type_specifier ::= UNION IDENTIFIER 
            {
              Type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new UnionType(new Symbol(id), new DeclList()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // type_specifier ::= UNION CURLYL field_list CURLYR 
            {
              Type RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DeclList list = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			RESULT = new UnionType(new Symbol(""), list); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // field_list ::= type_specifier declarator_list COLON 
            {
              DeclList RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DeclList list = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			for (Declaration decl : list.list) {
						if (decl.type == null) {
							decl.type = type;
						} else {
							decl.type.encore(type);
						}
					}
					RESULT = list;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // field_list ::= field_list type_specifier declarator_list COLON 
            {
              DeclList RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		DeclList list = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int list2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int list2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DeclList list2 = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			for (Declaration decl : list2.list) {
						if (decl.type == null) {
							decl.type = type;
						} else {
							decl.type.encore(type);
						}
					}
					list = list.add(list2);
					RESULT = list;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement ::= expression_statement 
            {
              Statement RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int statright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionStat stat = (ExpressionStat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = stat; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement ::= compound_statement 
            {
              Statement RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int statright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CompoundStat stat = (CompoundStat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = stat; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement ::= selection_statement 
            {
              Statement RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int statright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SelectionStat stat = (SelectionStat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = stat; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement ::= iteration_statement 
            {
              Statement RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int statright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IterationStat stat = (IterationStat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = stat; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statement ::= jump_statement 
            {
              Statement RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int statright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JumpStat stat = (JumpStat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = stat; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement_list ::= statement 
            {
              StatList RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int statright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement stat = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = (new StatList()).add(stat); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement_list ::= statement_list statement 
            {
              StatList RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatList list = (StatList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int statleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int statright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement stat = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = list.add(stat); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression_statement ::= expression COLON 
            {
              ExpressionStat RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			RESULT = new ExpressionStat(expr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_statement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression_statement ::= COLON 
            {
              ExpressionStat RESULT =null;
			RESULT = new ExpressionStat(new EmptyExpr()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_statement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // compound_statement ::= CURLYL declaration_list statement_list CURLYR 
            {
              CompoundStat RESULT =null;
		int dlstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dlstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DeclList dlst = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int slstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatList slst = (StatList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			RESULT = new CompoundStat(dlst, slst); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_statement",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // compound_statement ::= CURLYL statement_list CURLYR 
            {
              CompoundStat RESULT =null;
		int slstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatList slst = (StatList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			RESULT = new CompoundStat(new DeclList(), slst); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_statement",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // compound_statement ::= CURLYL declaration_list CURLYR 
            {
              CompoundStat RESULT =null;
		int dlstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dlstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DeclList dlst = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			RESULT = new CompoundStat(dlst, new StatList()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_statement",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // compound_statement ::= CURLYL CURLYR 
            {
              CompoundStat RESULT =null;
			RESULT = new CompoundStat(new DeclList(), new StatList()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_statement",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // selection_statement ::= IF PARAL expression PARAR statement 
            {
              SelectionStat RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int iftrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iftrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement iftr = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new SelectionStat(expr, iftr, new ExpressionStat(new EmptyExpr())); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selection_statement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // selection_statement ::= IF PARAL expression PARAR statement ELSE statement 
            {
              SelectionStat RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int iftrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iftrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statement iftr = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ifflleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ifflright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement iffl = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new SelectionStat(expr, iftr, iffl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selection_statement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // iteration_statement ::= WHILE PARAL expression PARAR statement 
            {
              IterationStat RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int statleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int statright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement stat = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new IterationStat(new ExpressionStat(new EmptyExpr()), expr, new ExpressionStat(new EmptyExpr()), stat); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // iteration_statement ::= FOR PARAL expression_statement expression_statement PARAR statement 
            {
              IterationStat RESULT =null;
		int initleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ExpressionStat init = (ExpressionStat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionStat expr = (ExpressionStat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int statleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int statright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement stat = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new IterationStat(init, expr.expr, new ExpressionStat(new EmptyExpr()), stat); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // iteration_statement ::= FOR PARAL expression_statement expression_statement expression PARAR statement 
            {
              IterationStat RESULT =null;
		int initleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ExpressionStat init = (ExpressionStat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ExpressionStat expr = (ExpressionStat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int inctleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int inctright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression inct = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int statleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int statright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement stat = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new IterationStat(init, expr.expr, new ExpressionStat(inct), stat); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // jump_statement ::= CONTINUE COLON 
            {
              JumpStat RESULT =null;
			RESULT = new ContinueStat(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_statement",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // jump_statement ::= BREAK COLON 
            {
              JumpStat RESULT =null;
			RESULT = new BreakStat(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_statement",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // jump_statement ::= RETURN COLON 
            {
              JumpStat RESULT =null;
			RESULT = new ReturnStat(new EmptyExpr()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_statement",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // jump_statement ::= RETURN expression COLON 
            {
              JumpStat RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			RESULT = new ReturnStat(expr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_statement",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression ::= assignment_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression ::= expression COMMA assignment_expression 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new BinaryExpr(expr1, Symbols.COMMA, expr2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // assignment_expression ::= logical_or_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // assignment_expression ::= unary_expression assignment_operator assignment_expression 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new BinaryExpr(expr1, op, expr2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // assignment_operator ::= ASSIGN 
            {
              Integer RESULT =null;
			RESULT = Symbols.ASSIGN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // assignment_operator ::= MUL_ASSIGN 
            {
              Integer RESULT =null;
			RESULT = Symbols.MUL_ASSIGN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // assignment_operator ::= DIV_ASSIGN 
            {
              Integer RESULT =null;
			RESULT = Symbols.DIV_ASSIGN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // assignment_operator ::= MOD_ASSIGN 
            {
              Integer RESULT =null;
			RESULT = Symbols.MOD_ASSIGN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // assignment_operator ::= ADD_ASSIGN 
            {
              Integer RESULT =null;
			RESULT = Symbols.ADD_ASSIGN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // assignment_operator ::= SUB_ASSIGN 
            {
              Integer RESULT =null;
			RESULT = Symbols.SUB_ASSIGN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // assignment_operator ::= SHL_ASSIGN 
            {
              Integer RESULT =null;
			RESULT = Symbols.SHL_ASSIGN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // assignment_operator ::= SHR_ASSIGN 
            {
              Integer RESULT =null;
			RESULT = Symbols.SHR_ASSIGN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // assignment_operator ::= AND_ASSIGN 
            {
              Integer RESULT =null;
			RESULT = Symbols.AND_ASSIGN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // assignment_operator ::= OR_ASSIGN 
            {
              Integer RESULT =null;
			RESULT = Symbols.OR_ASSIGN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // assignment_operator ::= XOR_ASSIGN 
            {
              Integer RESULT =null;
			RESULT = Symbols.XOR_ASSIGN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // constant_expression ::= logical_or_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // logical_or_expression ::= logical_and_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_or_expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // logical_or_expression ::= logical_or_expression OR_OP logical_and_expression 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new BinaryExpr(expr1, Symbols.OR_OP, expr2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_or_expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // logical_and_expression ::= inclusive_or_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_and_expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // logical_and_expression ::= logical_and_expression AND_OP inclusive_or_expression 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new BinaryExpr(expr1, Symbols.AND_OP, expr2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_and_expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // inclusive_or_expression ::= exclusive_or_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inclusive_or_expression",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // inclusive_or_expression ::= inclusive_or_expression OR exclusive_or_expression 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new BinaryExpr(expr1, Symbols.OR, expr2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inclusive_or_expression",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // exclusive_or_expression ::= and_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exclusive_or_expression",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // exclusive_or_expression ::= exclusive_or_expression XOR and_expression 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new BinaryExpr(expr1, Symbols.XOR, expr2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exclusive_or_expression",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // and_expression ::= equality_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = expr;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("and_expression",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // and_expression ::= and_expression ADRESS equality_expression 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new BinaryExpr(expr1, Symbols.ADRESS, expr2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("and_expression",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // equality_expression ::= relational_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = expr;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_expression",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // equality_expression ::= equality_expression equality_operator relational_expression 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new BinaryExpr(expr1, op, expr2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_expression",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // equality_operator ::= EQ_OP 
            {
              Integer RESULT =null;
			RESULT = Symbols.EQ_OP;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_operator",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // equality_operator ::= NE_OP 
            {
              Integer RESULT =null;
			RESULT = Symbols.NE_OP;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_operator",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // relational_expression ::= shift_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = expr;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expression",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // relational_expression ::= relational_expression relational_operator shift_expression 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new BinaryExpr(expr1, op, expr2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expression",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // relational_operator ::= LESS 
            {
              Integer RESULT =null;
			RESULT = Symbols.LESS;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // relational_operator ::= GREATER 
            {
              Integer RESULT =null;
			RESULT = Symbols.GREATER;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // relational_operator ::= LE_OP 
            {
              Integer RESULT =null;
			RESULT = Symbols.LE_OP;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // relational_operator ::= GE_OP 
            {
              Integer RESULT =null;
			RESULT = Symbols.GE_OP;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // shift_expression ::= additive_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = expr;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shift_expression",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // shift_expression ::= shift_expression shift_operator additive_expression 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new BinaryExpr(expr1, op, expr2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shift_expression",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // shift_operator ::= SHL_OP 
            {
              Integer RESULT =null;
			RESULT = Symbols.SHL_OP;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shift_operator",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // shift_operator ::= SHR_OP 
            {
              Integer RESULT =null;
			RESULT = Symbols.SHR_OP;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shift_operator",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // additive_expression ::= multiplicative_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = expr;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_expression",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // additive_expression ::= additive_expression additive_operator multiplicative_expression 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new BinaryExpr(expr1, op, expr2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_expression",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // additive_operator ::= ADD 
            {
              Integer RESULT =null;
			RESULT = Symbols.ADD;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_operator",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // additive_operator ::= SUB 
            {
              Integer RESULT =null;
			RESULT = Symbols.SUB;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_operator",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // multiplicative_expression ::= cast_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = expr;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // multiplicative_expression ::= multiplicative_expression multiplicative_operator cast_expression 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new BinaryExpr(expr1, op, expr2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // multiplicative_operator ::= MUL 
            {
              Integer RESULT =null;
			RESULT = Symbols.MUL;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_operator",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // multiplicative_operator ::= DIV 
            {
              Integer RESULT =null;
			RESULT = Symbols.DIV;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_operator",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // multiplicative_operator ::= MOD 
            {
              Integer RESULT =null;
			RESULT = Symbols.MOD;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_operator",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // cast_expression ::= unary_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = expr;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cast_expression",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // cast_expression ::= PARAL type_name PARAR cast_expression 
            {
              Expression RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new CastExpr(type, expr);	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cast_expression",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // type_name ::= type_specifier 
            {
              Type RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_name",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // type_name ::= type_name MUL 
            {
              Type RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			RESULT = new PointerType(type); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_name",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // unary_expression ::= postfix_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // unary_expression ::= INC_OP unary_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new UnaryExpr(Symbols.INC_OP, expr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // unary_expression ::= DEC_OP unary_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new UnaryExpr(Symbols.DEC_OP, expr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // unary_expression ::= unary_operator cast_expression 
            {
              Expression RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new UnaryExpr(op, expr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // unary_expression ::= SIZEOF unary_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new UnaryExpr(Symbols.SIZEOF, expr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // unary_expression ::= SIZEOF PARAL type_name PARAR 
            {
              Expression RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			RESULT = new SizeofExpr(type); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // unary_operator ::= ADRESS 
            {
              Integer RESULT =null;
			RESULT = Symbols.ADRESS;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // unary_operator ::= MUL 
            {
              Integer RESULT =null;
			RESULT = Symbols.MUL;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // unary_operator ::= ADD 
            {
              Integer RESULT =null;
			RESULT = Symbols.ADD;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // unary_operator ::= SUB 
            {
              Integer RESULT =null;
			RESULT = Symbols.SUB;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // unary_operator ::= TILDE 
            {
              Integer RESULT =null;
			RESULT = Symbols.TILDE;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // unary_operator ::= NOT 
            {
              Integer RESULT =null;
			RESULT = Symbols.NOT;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // postfix_expression ::= primary_expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // postfix_expression ::= postfix_expression SQUARL expression SQUARR 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int deltaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int deltaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression delta = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			RESULT = new ArrayExpr(expr, delta); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // postfix_expression ::= postfix_expression PARAL PARAR 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
			RESULT = new FunctionCall(expr, new ArgumentList()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // postfix_expression ::= postfix_expression PARAL argument_list PARAR 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int arguleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arguright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArgumentList argu = (ArgumentList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			RESULT = new FunctionCall(expr, argu); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // postfix_expression ::= postfix_expression DOT IDENTIFIER 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new RecordAccess(expr, new Symbol(id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // postfix_expression ::= postfix_expression PTR_OP IDENTIFIER 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new PointerAccess(expr, new Symbol(id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // postfix_expression ::= postfix_expression INC_OP 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			RESULT = new PostExpr(expr, Symbols.INC_OP); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // postfix_expression ::= postfix_expression DEC_OP 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			RESULT = new PostExpr(expr, Symbols.DEC_OP); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // argument_list ::= assignment_expression 
            {
              ArgumentList RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = (new ArgumentList()).add(expr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument_list",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // argument_list ::= argument_list COMMA assignment_expression 
            {
              ArgumentList RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArgumentList list = (ArgumentList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = list.add(expr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument_list",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // primary_expression ::= IDENTIFIER 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new Variable(new Symbol(id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // primary_expression ::= INTEGER 
            {
              Expression RESULT =null;
		int itleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int itright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int it = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new IntConst(it); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // primary_expression ::= CHARACTER 
            {
              Expression RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		char ch = (char)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new CharConst(ch); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // primary_expression ::= STRING 
            {
              Expression RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new StringConst(st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // primary_expression ::= PARAL expression PARAR 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
